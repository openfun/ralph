# Configuration file anchors
generate-version-file: &generate-version-file
  run:
    name: Create a version.json
    command: |
      # Create a version.json Ã -la-mozilla
      # https://github.com/mozilla-services/Dockerflow/blob/master/docs/version_object.md
      printf '{"commit":"%s","version":"%s","source":"https://github.com/%s/%s","build":"%s"}\n' \
        "$CIRCLE_SHA1" \
        "$CIRCLE_TAG" \
        "$CIRCLE_PROJECT_USERNAME" \
        "$CIRCLE_PROJECT_REPONAME" \
        "$CIRCLE_BUILD_URL" > version.json

docker-login: &docker-login
  # Login to DockerHub
  #
  # Nota bene: you'll need to define the following secrets environment vars
  # in CircleCI interface:
  #
  #   - DOCKER_HUB_USER
  #   - DOCKER_HUB_PASSWORD
  run:
    name: Login to DockerHub
    command: echo "$DOCKER_HUB_PASSWORD" | docker login -u "$DOCKER_HUB_USER" --password-stdin

version: 2
jobs:
  # Git jobs
  # Check that the git history is clean and complies with our expectations
  lint-git:
    docker:
      - image: circleci/python:3.8-buster
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD
    working_directory: ~/fun
    steps:
      - checkout
      # Make sure the changes don't add a "print" statement to the code base.
      # We should exclude the ".circleci" folder from the search as the very command that checks
      # the absence of "print" is including a "print(" itself.
      - run:
          name: enforce absence of print statements in code
          command: |
            ! git diff origin/master..HEAD -- . ':(exclude).circleci' | grep "print("
      - run:
          name: Check absence of fixup commits
          command: |
            ! git log | grep 'fixup!'
      - run:
          name: Install gitlint
          command: |
            pip install --user gitlint
      - run:
          name: lint commit messages added to master
          command: |
            ~/.local/bin/gitlint --commits origin/master..HEAD

  # Check that the CHANGELOG has been updated in the current branch
  check-changelog:
    docker:
      - image: circleci/buildpack-deps:stretch-scm
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD
    working_directory: ~/fun
    steps:
      - checkout
      - run:
          name: Check that the CHANGELOG has been modified in the current branch
          command: |
            git whatchanged --name-only --pretty="" origin..HEAD | grep CHANGELOG

  # Check that the CHANGELOG max line length does not exceed 80 characters
  lint-changelog:
    docker:
      - image: debian:stretch
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD
    working_directory: ~/fun
    steps:
      - checkout
      - run:
          name: Check CHANGELOG max line length
          command: |
            # Get the longuest line width (ignoring release links)
            test $(cat CHANGELOG.md | grep -Ev "^\[.*\]: https://github.com/openfun" | wc -L) -le 80

  # ---- Docker jobs ----
  # Build the Docker image ready for production
  build-docker:
    docker:
      - image: circleci/buildpack-deps:stretch
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD
    working_directory: ~/fun
    steps:
      # Checkout repository sources
      - checkout
      # Generate a version.json file describing app release & login to DockerHub
      - *generate-version-file
      - *docker-login
      # Activate docker-in-docker (with layers caching enabled)
      - setup_remote_docker:
          docker_layer_caching: true
      # Each image is tagged with the current git commit sha1 to avoid
      # collisions in parallel builds.
      - run:
          name: Build production image
          command: docker build -t ralph:${CIRCLE_SHA1} --target production .
      - run:
          name: Check built image availability
          command: docker images "ralph:${CIRCLE_SHA1}*"

  # ---- Backend jobs ----
  # Build backend development environment
  build:
    docker:
      - image: circleci/python:3.8-buster
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD
    working_directory: ~/fun
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ .Revision }}
      - run:
          name: Install development dependencies
          command: pip install --user .[dev]
      - save_cache:
          paths:
            - ~/.local
          key: v1-dependencies-{{ .Revision }}

  lint:
    docker:
      - image: circleci/python:3.8-buster
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD
    working_directory: ~/fun
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ .Revision }}
      - run:
          name: Lint code with flake8
          command: ~/.local/bin/flake8
      - run:
          name: Lint code with isort
          command: ~/.local/bin/isort --recursive --check-only .
      - run:
          name: Lint code with black
          command: ~/.local/bin/black src/ralph tests --check
      - run:
          name: Lint code with pylint
          command: ~/.local/bin/pylint src/ralph tests
      - run:
          name: Lint code with bandit
          command: ~/.local/bin/bandit -qr src/ralph

  test:
    docker:
      - image: circleci/python:3.8-buster
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD
        environment:
          RALPH_APP_DIR: ~/fun/.ralph
      - image: elasticsearch:7.10.1
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD
        environment:
          discovery.type: single-node
    working_directory: ~/fun
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ .Revision }}
      - run:
          name: Run tests
          command: |
            dockerize \
              -wait tcp://${HOSTNAME}:9200 \
              -timeout 60s \
              ~/.local/bin/pytest

  # ---- Tray jobs (k8s) ----
  tray:
    machine:
      # Prevent cache-related issues
      docker_layer_caching: false
    working_directory: ~/fun
    steps:
      - checkout
      - *generate-version-file
      - *docker-login

      - run:
          name: Build production image
          command: docker build -t "ralph:${CIRCLE_SHA1}" --target production .

      - run:
          name: Check built images availability
          command: docker images "ralph:${CIRCLE_SHA1}*"

      - run:
          name: Install the OC client
          command: |
            mkdir /tmp/openshift/
            wget https://github.com/openshift/origin/releases/download/v3.11.0/openshift-origin-client-tools-v3.11.0-0cbc58b-linux-64bit.tar.gz -O /tmp/openshift/openshift.tar.gz
            tar xzf /tmp/openshift/openshift.tar.gz --strip-components=1 -C /tmp/openshift/
            cp /tmp/openshift/oc $HOME/bin/

      - run:
          name: Configure Docker for OpenShift cluster
          command: |
            # Elasticsearch requires to increase this setting's default value
            sudo sysctl -w vm/max_map_count=262144
            sudo bash -c "echo '{\"insecure-registries\": [\"172.30.0.0/16\"]}' > /etc/docker/daemon.json"
            sudo service docker restart

      - run:
          name: Run local OpenShift cluster & configure environment
          command: |
            K8S_DOMAIN=$(hostname -I | awk '{print $1}')
            export K8S_DOMAIN
            oc cluster up --server-loglevel=5 --public-hostname=${K8S_DOMAIN}
            oc login https://${K8S_DOMAIN}:8443 -u developer -p developer --insecure-skip-tls-verify=true
            # Set environment variables for the CI
            echo "export K8S_DOMAIN=${K8S_DOMAIN}" >> $BASH_ENV
            echo "export ARNOLD_DEFAULT_VAULT_PASSWORD=arnold" >> $BASH_ENV
            echo 'export ANSIBLE_VAULT_PASSWORD="${ARNOLD_DEFAULT_VAULT_PASSWORD}"' >> $BASH_ENV
            echo "export K8S_AUTH_VERIFY_SSL=no" >> $BASH_ENV
            echo "export INTERNAL_DOCKER_REGISTRY=172.30.1.1:5000" >> $BASH_ENV
            source $BASH_ENV

      - run:
          name: Install arnold CLI
          command: |
            wget https://raw.githubusercontent.com/openfun/arnold/master/bin/arnold -O "${HOME}/bin/arnold"
            chmod +x "${HOME}/bin/arnold"

      - run:
          name: Setup a new Arnold project
          command: |
            arnold -c ralph -e ci setup
            arnold -d -c ralph -e ci -a ralph create_app_vaults
            arnold -d -c ralph -e ci -- vault -a ralph decrypt
            sed -i 's/^# RALPH_/RALPH_/g' group_vars/customer/ralph/ci/secrets/ralph.vault.yml
            arnold -d -c ralph -e ci -- vault -a ralph encrypt
            VARS_FILE="group_vars/customer/ralph/ci/main.yml"
            echo "skip_verification: True" > ${VARS_FILE}
            echo "apps:" >> ${VARS_FILE}
            echo "  - name: ralph" >> ${VARS_FILE}
            echo "ralph_image_name: ${INTERNAL_DOCKER_REGISTRY}/ci-ralph/ralph" >> ${VARS_FILE}
            echo "ralph_image_tag: ${CIRCLE_SHA1}" >> ${VARS_FILE}
            echo "ralph_app_replicas: 1" >> ${VARS_FILE}
            echo "ralph_cronjobs:" >> ${VARS_FILE}
            echo "  - name: ci-test" >> ${VARS_FILE}
            echo "    schedule: '* * * * *'" >> ${VARS_FILE}
            echo "    command: ['date']" >> ${VARS_FILE}

      - run:
          name: Push ralph image to the k8s cluster docker registry
          command: |
            docker login -u developer -p "$(oc whoami -t)" "${INTERNAL_DOCKER_REGISTRY}"
            docker tag ralph:${CIRCLE_SHA1} "${INTERNAL_DOCKER_REGISTRY}/ci-ralph/ralph:${CIRCLE_SHA1}"
            arnold -d -c ralph -e ci create_project
            docker push "${INTERNAL_DOCKER_REGISTRY}/ci-ralph/ralph:${CIRCLE_SHA1}"

      - run:
          name: Bootstrap ralph application
          command: |
            arnold -d -c ralph -e ci -a ralph init
            arnold -d -c ralph -e ci -a ralph deploy
            oc project ci-ralph
            oc get pods -l app=ralph | grep Running
            test $(oc get cj -o name ralph-ci-test | wc -l) -eq 1

  # ---- Packaging jobs ----
  package:
    docker:
      - image: circleci/python:3.8-buster
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD
    working_directory: ~/fun
    steps:
      - checkout
      # Ensure we restore frontend production builds in Richie's static
      # directory
      - attach_workspace:
          at: ~/fun
      - run:
          name: Build python package
          command: python setup.py sdist bdist_wheel
      # Persist build packages to the workspace
      - persist_to_workspace:
          root: ~/fun
          paths:
            - dist
      # Store packages as artifacts to download/test them
      - store_artifacts:
          path: ~/fun/dist

  # Publishing to PyPI requires that:
  #   * you already registered to pypi.org
  #   * you have define both the TWINE_USERNAME & TWINE_PASSWORD secret
  #     environment variables in CircleCI UI (with your PyPI credentials)
  pypi:
    docker:
      - image: circleci/python:3.8-buster
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD
    working_directory: ~/fun
    steps:
      - checkout
      # Restore built python packages
      - attach_workspace:
          at: ~/fun
      - run:
          name: List built packages
          command: ls dist/*
      - run:
          name: Install base requirements (twine)
          command: pip install --user .[ci]
      - run:
          name: Upload built packages to PyPI
          command: ~/.local/bin/twine upload dist/*

  # ---- DockerHub publication job ----
  hub:
    docker:
      - image: circleci/buildpack-deps:stretch
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD
    working_directory: ~/fun
    steps:
      # Checkout repository sources
      - checkout
      # Generate a version.json file describing app release & login to DockerHub
      - *generate-version-file
      - *docker-login
      # Activate docker-in-docker (with layers caching enabled)
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build production image (using cached layers)
          command: docker build -t ralph:${CIRCLE_SHA1} --target production .
      - run:
          name: Check built images availability
          command: docker images "ralph:${CIRCLE_SHA1}*"
      # Tag docker images with the same pattern used in Git (Semantic Versioning)
      #
      # Git tag: v1.0.1
      # Docker tag: 1.0.1(-ci)
      - run:
          name: Tag images
          command: |
            docker images fundocker/ralph
            DOCKER_TAG=$([[ -z "$CIRCLE_TAG" ]] && echo $CIRCLE_BRANCH || echo ${CIRCLE_TAG} | sed 's/^v//')
            RELEASE_TYPE=$([[ -z "$CIRCLE_TAG" ]] && echo "branch" || echo "tag ")
            # Display either:
            # - DOCKER_TAG: master (Git branch)
            # or
            # - DOCKER_TAG: 1.1.2 (Git tag v1.1.2)
            echo "DOCKER_TAG: ${DOCKER_TAG} (Git ${RELEASE_TYPE}${CIRCLE_TAG})"
            docker tag ralph:${CIRCLE_SHA1} fundocker/ralph:${DOCKER_TAG}
            if [[ -n "$CIRCLE_TAG" ]]; then
                docker tag ralph:${CIRCLE_SHA1} fundocker/ralph:latest
            fi
            docker images | grep -E "^fundocker/ralph\s*(${DOCKER_TAG}.*|latest|master)"

      # Publish images to DockerHub
      #
      # Nota bene: logged user (see "Login to DockerHub" step) must have write
      # permission for the project's repository; this also implies that the
      # DockerHub repository already exists.
      - run:
          name: Publish images
          command: |
            DOCKER_TAG=$([[ -z "$CIRCLE_TAG" ]] && echo $CIRCLE_BRANCH || echo ${CIRCLE_TAG} | sed 's/^v//')
            RELEASE_TYPE=$([[ -z "$CIRCLE_TAG" ]] && echo "branch" || echo "tag ")
            # Display either:
            # - DOCKER_TAG: master (Git branch)
            # or
            # - DOCKER_TAG: 1.1.2 (Git tag v1.1.2)
            echo "DOCKER_TAG: ${DOCKER_TAG} (Git ${RELEASE_TYPE}${CIRCLE_TAG})"
            docker push fundocker/ralph:${DOCKER_TAG}
            if [[ -n "$CIRCLE_TAG" ]]; then
              docker push fundocker/ralph:latest
            fi

workflows:
  version: 2

  ralph:
    jobs:
      # Git jobs
      #
      # Check validity of git history
      - lint-git:
          filters:
            tags:
              only: /.*/
      # Check CHANGELOG update
      - check-changelog:
          filters:
            branches:
              ignore: master
            tags:
              only: /(?!^v).*/
      - lint-changelog:
          filters:
            branches:
              ignore: master
            tags:
              only: /.*/

      # Docker jobs
      #
      # Build images
      - build-docker:
          filters:
            tags:
              only: /.*/

      # Backend jobs
      #
      # Build, lint and test production and development Docker images
      # (debian-based)
      - build:
          filters:
            tags:
              only: /.*/
      - lint:
          requires:
            - build
          filters:
            tags:
              only: /.*/
      - test:
          requires:
            - build
          filters:
            tags:
              only: /.*/

      # Tray
      #
      # Deploy ralph in a k8s cluster using arnold
      - tray:
          requires:
            - test
          filters:
            tags:
              only: /.*/

      # Packaging: python
      #
      # Build the python package
      - package:
          requires:
            - test
          filters:
            tags:
              only: /.*/

      # DockerHub publication.
      #
      # Publish docker images only if all build, lint and test jobs succeed
      # and it has been tagged with a tag starting with the letter v or is on
      # the master branch
      - hub:
          requires:
            - build-docker
            - test
            - tray
          filters:
            branches:
              only: master
            tags:
              only: /^v.*/

      # PyPI publication.
      #
      # Publish python package to PYPI only if all build, lint and test jobs
      # succeed and it has been tagged with a tag starting with the letter v
      - pypi:
          requires:
            - package
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
