{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Ralph is a toolbox for your learning analytics, it can be used as a:</p> <ul> <li>library, to fetch learning events from various backends, (de)serialize or   convert them from various standard formats such as   xAPI,</li> <li>command-line interface (CLI), to build data pipelines the UNIX-way\u2122\ufe0f,</li> <li>HTTP API server, to collect xAPI statements (learning events)   following the ADL LRS   standard.</li> </ul>"},{"location":"#supported_backends","title":"Supported backends","text":"<p>As a library or a CLI, you will be able to read and write from/to the following backends:</p> <ul> <li>Elasticsearch</li> <li>MongoDB</li> <li>OpenStack Swift</li> <li>AWS S3</li> <li>OVH Logs Data Platform*</li> <li>WebSocket</li> <li>File system</li> </ul> <p>* read-only backend</p> <p>The LRS server currently supports the following backends to store learning traces in xAPI format:</p> <ul> <li>Elasticsearch</li> <li>MongoDB</li> </ul>"},{"location":"#cli_key_concepts","title":"CLI key concepts","text":"<p>At first, Ralph has been designed as a CLI to batch process your logs using base commands and UNIX standard streams (<code>stdin</code>, <code>stdout</code>) to connect them in a pipeline. A base example pipeline may be:</p> <pre><code>$ ralph fetch --backend swift my_archive.gzip | \\\ngunzip | \\\nralph push --backend es\n</code></pre> <p>In this small pipeline, we stream <code>my_archive.gzip</code> content from a Swift container to the standard output (using the <code>fetch</code> command), uncompress the content (using the <code>gunzip</code> command), and bulk insert logs in an ElasticSearch index (using the <code>push</code> command).</p> <p>As UNIX is beautiful, Ralph offers many powerful possibilities by combining its commands with other standard commands or command line tools.</p>"},{"location":"#quick_start_guide","title":"Quick start guide","text":"<p>Ralph is distributed as a python package and a Docker image.</p> <p>If you choose to install <code>ralph</code> in your native environment (without using Docker), please make sure that Python 3.11 is installed (and your default python distribution).</p> <p>Ralph package can be installed from PyPI using the <code>pip</code> tool:</p> <pre><code># Create a new virtualenv (optional)\n$ python3.11 -m venv venv\n$ source venv/bin/activate\n\n# Install the full package (in a virtualenv)\n(venv) $ pip install \\\nralph-malph[backend-es,backend-ldp,backend-mongo,backend-swift,backend-ws,cli,lrs]\n\n# Install only the core package with the Elasticsearch backend and the LRS (in\n# a virtualenv)\n(venv) $ pip install ralph-malph[backend-es,lrs]\n\n# Test the ralph command (it should be in your PATH)\n(venv) $ ralph --help\n</code></pre> <p>If you only need to integrate <code>ralph</code> models in your project, you don\u2019t need to install the <code>backends</code>, <code>cli</code> or <code>lrs</code> extra dependencies, the core package is what you need:</p> <pre><code># Install the core library (in a virtualenv)\n(venv) $ pip install ralph-malph\n</code></pre> <p>Alternatively, Docker users can pull the latest <code>ralph</code> image and start playing with it:</p> <pre><code># Pull latest docker image and get usage\n$ docker run --rm -i fundocker/ralph:latest ralph --help\n\n# Pro tip: define an alias to ease your life\n$ alias ralph=\"docker run --rm -i fundocker/ralph:latest ralph\"\n</code></pre> <p>Now that <code>ralph</code> can be run from your system, we invite you to explore available commands.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>This project is intended to be community-driven, so please, do not hesitate to get in touch if you have any questions related to our implementation or design decisions.</p> <p>We try to raise our code quality standards and expect contributors to follow the recommendations from our handbook.</p>"},{"location":"#license","title":"License","text":"<p>This work is released under the MIT License (see LICENSE).</p>"},{"location":"CHANGELOG/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"CHANGELOG/#unreleased","title":"Unreleased","text":""},{"location":"CHANGELOG/#changed","title":"Changed","text":"<ul> <li>Upgrade <code>fastapi</code> to <code>0.95.2</code></li> <li>Upgrade <code>sentry_sdk</code> to <code>1.24.0</code></li> <li>Upgrade <code>httpx</code> to <code>0.24.1</code></li> <li>Force a valid (JSON-formatted) IFI to be passed for the <code>/statements</code>  GET query <code>agent</code> filtering</li> </ul>"},{"location":"CHANGELOG/#360_-_2023-05-17","title":"3.6.0 - 2023-05-17","text":""},{"location":"CHANGELOG/#added","title":"Added","text":"<ul> <li>Allow to ignore health check routes for Sentry transactions</li> </ul>"},{"location":"CHANGELOG/#changed_1","title":"Changed","text":"<ul> <li>Upgrade <code>sentry_sdk</code> to <code>1.22.2</code></li> <li>Upgrade <code>uvicorn</code> to <code>0.22.0</code></li> <li>LRS <code>/statements</code> <code>GET</code> method returns a code 400 with certain parameters as per the xAPI specification</li> <li>Use batch/v1 api in cronjob_pipeline manifest</li> <li>Use autoscaling/v2 in HorizontalPodAutoscaler manifest</li> </ul>"},{"location":"CHANGELOG/#fixed","title":"Fixed","text":"<ul> <li>Fix the <code>more</code> IRL building in LRS <code>/statements</code> GET requests</li> </ul>"},{"location":"CHANGELOG/#351_-_2023-04-18","title":"3.5.1 - 2023-04-18","text":""},{"location":"CHANGELOG/#changed_2","title":"Changed","text":"<ul> <li>Upgrade <code>httpx</code> to <code>0.24.0</code></li> <li>Upgrade <code>fastapi</code> to <code>0.95.1</code></li> <li>Upgrade <code>sentry_sdk</code> to <code>1.19.1</code></li> <li>Upgrade <code>uvicorn</code> to <code>0.21.1</code></li> </ul>"},{"location":"CHANGELOG/#fixed_1","title":"Fixed","text":"<ul> <li>An issue with starting Ralph in pre-built Docker containers</li> <li>Fix double quoting in ClickHouse backend server parameters</li> <li>An issue Ralph starting when ClickHouse is down</li> </ul>"},{"location":"CHANGELOG/#350_-_2023-03-08","title":"3.5.0 - 2023-03-08","text":""},{"location":"CHANGELOG/#added_1","title":"Added","text":"<ul> <li>Implement PUT verb on statements endpoint</li> <li>Add ClickHouse database backend support</li> </ul>"},{"location":"CHANGELOG/#changed_3","title":"Changed","text":"<ul> <li>Make trailing slashes optional on statements endpoint</li> <li>Upgrade <code>sentry_sdk</code> to <code>1.16.0</code></li> </ul>"},{"location":"CHANGELOG/#340_-_2023-03-01","title":"3.4.0 - 2023-03-01","text":""},{"location":"CHANGELOG/#changed_4","title":"Changed","text":"<ul> <li>Upgrade <code>fastapi</code> to <code>0.92.0</code></li> <li>Upgrade <code>sentry_sdk</code> to <code>1.15.0</code></li> </ul>"},{"location":"CHANGELOG/#fixed_2","title":"Fixed","text":"<ul> <li>Restore sentry integration in the LRS server</li> </ul>"},{"location":"CHANGELOG/#330_-_2023-02-03","title":"3.3.0 - 2023-02-03","text":""},{"location":"CHANGELOG/#added_2","title":"Added","text":"<ul> <li>Restore python 3.7+ support for library usage (models)</li> </ul>"},{"location":"CHANGELOG/#changed_5","title":"Changed","text":"<ul> <li>Allow xAPI extra fields in <code>extensions</code> fields</li> </ul>"},{"location":"CHANGELOG/#321_-_2023-02-01","title":"3.2.1 - 2023-02-01","text":""},{"location":"CHANGELOG/#changed_6","title":"Changed","text":"<ul> <li>Relax required Python version to <code>3.7</code>+</li> </ul>"},{"location":"CHANGELOG/#320_-_2023-01-25","title":"3.2.0 - 2023-01-25","text":""},{"location":"CHANGELOG/#added_3","title":"Added","text":"<ul> <li>Add a new <code>auth</code> subcommand to generate required credentials file for the LRS</li> <li>Add an official Helm Chart (experimental)</li> <li>Implement support for AWS S3 storage backend</li> <li>Add CLI <code>--version</code> option</li> </ul>"},{"location":"CHANGELOG/#changed_7","title":"Changed","text":"<ul> <li>Upgrade <code>fastapi</code> to <code>0.89.1</code></li> <li>Upgrade <code>httpx</code> to <code>0.23.3</code></li> <li>Upgrade <code>sentry_sdk</code> to <code>1.14.0</code></li> <li>Upgrade <code>uvicorn</code> to <code>0.20.0</code></li> <li>Tray: add the <code>ca_certs</code> path for the ES backend client option (LRS)</li> <li>Improve Sentry integration for the LRS</li> <li>Update handbook link to <code>https://handbook.openfun.fr</code></li> <li>Upgrade base python version to 3.11 for the development stack and Docker   image</li> </ul>"},{"location":"CHANGELOG/#fixed_3","title":"Fixed","text":"<ul> <li>Restore ES and Mongo backends ability to use client options</li> </ul>"},{"location":"CHANGELOG/#310_-_2022-11-17","title":"3.1.0 - 2022-11-17","text":""},{"location":"CHANGELOG/#added_4","title":"Added","text":"<ul> <li>EdX to xAPI converters for video events</li> </ul>"},{"location":"CHANGELOG/#changed_8","title":"Changed","text":"<ul> <li>Improve Ralph\u2019s library integration by unpinning dependencies (and prefer   ranges)</li> <li>Upgrade <code>fastapi</code> to <code>0.87.0</code></li> </ul>"},{"location":"CHANGELOG/#removed","title":"Removed","text":"<ul> <li>ModelRules constraint</li> </ul>"},{"location":"CHANGELOG/#300_-_2022-10-19","title":"3.0.0 - 2022-10-19","text":""},{"location":"CHANGELOG/#added_5","title":"Added","text":"<ul> <li>Implement edx video browser events pydantic models</li> <li>Create a <code>post</code> endpoint for statements implementing the LRS spec</li> <li>Implement support for the MongoDB database backend</li> <li>Implement support for custom queries when using database backends <code>get</code>   method (used in the <code>fetch</code> command)</li> <li>Add dotenv configuration file support and <code>python-dotenv</code> dependency</li> <li>Add <code>host</code> and <code>port</code> options for the <code>runserver</code> cli command</li> <li>Add support for database selection when running the Ralph LRS server</li> <li>Implement support for xAPI statement forwarding</li> <li>Add database backends <code>status</code> checking</li> <li>Add <code>health</code> LRS router</li> <li>Tray: add LRS server support</li> </ul>"},{"location":"CHANGELOG/#changed_9","title":"Changed","text":"<ul> <li>Migrate to <code>python-legacy</code> handler for <code>mkdocstrings</code> package</li> <li>Upgrade <code>click</code> to <code>8.1.3</code></li> <li>Upgrade <code>elasticsearch</code> to <code>8.3.3</code></li> <li>Upgrade <code>fastapi</code> to <code>0.79.1</code></li> <li>Upgrade <code>ovh</code> to <code>1.0.0</code></li> <li>Upgrade <code>pydantic</code> to <code>1.9.2</code></li> <li>Upgrade <code>pymongo</code> to <code>4.2.0</code></li> <li>Upgrade <code>python-keystoneclient</code> to <code>5.0.0</code></li> <li>Upgrade <code>python-swiftclient</code> to <code>4.0.1</code></li> <li>Upgrade <code>requests</code> to <code>2.28.1</code></li> <li>Upgrade <code>sentry_sdk</code> to <code>1.9.5</code></li> <li>Upgrade <code>uvicorn</code> to <code>0.18.2</code></li> <li>Upgrade <code>websockets</code> to <code>10.3</code></li> <li>Make backends yield results instead of writing to standard streams (BC)</li> <li>Use pydantic settings management instead of global variables in defaults.py</li> <li>Rename backend and parser parameter environment variables (BC)</li> <li>Make project dependencies management more modular for library usage</li> </ul>"},{"location":"CHANGELOG/#removed_1","title":"Removed","text":"<ul> <li>Remove YAML configuration file support and <code>pyyaml</code> dependency (BC)</li> </ul>"},{"location":"CHANGELOG/#fixed_4","title":"Fixed","text":"<ul> <li>Tray: do not create a cronjobs list when no cronjob has been defined</li> <li>Restore history mixin logger</li> </ul>"},{"location":"CHANGELOG/#210_-_2022-04-13","title":"2.1.0 - 2022-04-13","text":""},{"location":"CHANGELOG/#added_6","title":"Added","text":"<ul> <li>Implement edx problem interaction events pydantic models</li> <li>Implement edx textbook interaction events pydantic models</li> <li><code>ws</code> websocket stream backend (compatible with the <code>fetch</code> command)</li> <li>bundle <code>jq</code>, <code>curl</code> and <code>wget</code> in the <code>fundocker/ralph</code> Docker image</li> <li>Tray: enable ralph app deployment command configuration</li> <li>Add a <code>runserver</code> command with basic auth and a <code>Whoami</code> route</li> <li>Create a <code>get</code> endpoint for statements implementing the LRS spec</li> <li>Add optional fields to BaseXapiModel</li> </ul>"},{"location":"CHANGELOG/#changed_10","title":"Changed","text":"<ul> <li>Upgrade <code>uvicorn</code> to <code>0.17.4</code></li> <li>Upgrade <code>elasticsearch</code> to <code>7.17.0</code></li> <li>Upgrade <code>sentry_sdk</code> to <code>1.5.5</code></li> <li>Upgrade <code>fastapi</code> to <code>0.73.0</code></li> <li>Upgrade <code>pyparsing</code> to <code>3.0.7</code></li> <li>Upgrade <code>pydantic</code> to <code>1.9.0</code></li> <li>Upgrade <code>python-keystoneclient</code> to <code>4.4.0</code></li> <li>Upgrade <code>python-swiftclient</code> to <code>3.13.0</code></li> <li>Upgrade <code>pyyaml</code> to <code>6.0</code></li> <li>Upgrade <code>requests</code> to <code>2.27.1</code></li> <li>Upgrade <code>websockets</code> to <code>10.1</code></li> </ul>"},{"location":"CHANGELOG/#201_-_2021-07-15","title":"2.0.1 - 2021-07-15","text":""},{"location":"CHANGELOG/#changed_11","title":"Changed","text":"<ul> <li>Upgrade <code>elasticsearch</code> to <code>7.13.3</code></li> </ul>"},{"location":"CHANGELOG/#fixed_5","title":"Fixed","text":"<ul> <li>Restore elasticsearch backend datastream compatibility for bulk operations</li> </ul>"},{"location":"CHANGELOG/#200_-_2021-07-09","title":"2.0.0 - 2021-07-09","text":""},{"location":"CHANGELOG/#added_7","title":"Added","text":"<ul> <li>xAPI video <code>interacted</code> pydantic models</li> <li>xAPI video <code>terminated</code> pydantic models</li> <li>xAPI video <code>completed</code> pydantic models</li> <li>xAPI video <code>seeked</code> pydantic models</li> <li>xAPI video <code>initialized</code> pydantic models</li> <li>xAPI video <code>paused</code> pydantic models</li> <li><code>convert</code> command to transform edx events to xAPI format</li> <li>EdX to xAPI converters for page <code>viewed</code> and<code>page_close</code> events</li> <li>Implement core event format converter</li> <li>xAPI video <code>played</code> pydantic models</li> <li>xAPI page <code>viewed</code> and page <code>terminated</code> pydantic models</li> <li>Implement edx navigational events pydantic models</li> <li>Implement edx enrollment events pydantic models</li> <li>Install security updates in project Docker images</li> <li>Model selector to retrieve associated pydantic model of a given event</li> <li><code>validate</code> command to lint edx events using pydantic models</li> <li>Support all available bulk operation types for the elasticsearch backend   (create, index, update, delete) using the <code>--es-op-type</code> option</li> </ul>"},{"location":"CHANGELOG/#changed_12","title":"Changed","text":"<ul> <li>Upgrade <code>elasticsearch</code> to <code>7.13.2</code></li> <li>Upgrade <code>python-swiftclient</code> to <code>3.12.0</code></li> <li>Upgrade <code>click</code> to <code>8.0.1</code></li> <li>Upgrade <code>click-option-group</code> to <code>0.5.3</code></li> <li>Upgrade <code>pydantic</code> to <code>1.8.2</code></li> <li>Upgrade <code>sentry_sdk</code> to <code>1.1.0</code></li> <li>Rename edx models</li> <li>Migrate model tests from factories to hypothesis strategies</li> <li>Tray: switch from openshift to k8s (BC)</li> <li>Tray: remove useless deployment probes</li> </ul>"},{"location":"CHANGELOG/#fixed_6","title":"Fixed","text":"<ul> <li>Tray: remove <code>version</code> immutable field in DC selector</li> </ul>"},{"location":"CHANGELOG/#120_-_2021-02-26","title":"1.2.0 - 2021-02-26","text":""},{"location":"CHANGELOG/#added_8","title":"Added","text":"<ul> <li>EdX server event pydantic model and factory</li> <li>EdX page_close browser event pydantic model and factory</li> <li>Tray: allow to specify a self-generated elasticsearch cluster CA certificate</li> </ul>"},{"location":"CHANGELOG/#fixed_7","title":"Fixed","text":"<ul> <li>Tray: add missing Swift variables in the secret</li> <li>Tray: fix pods anti-affinity selector</li> </ul>"},{"location":"CHANGELOG/#removed_2","title":"Removed","text":"<ul> <li><code>pandas</code> is no longer required</li> </ul>"},{"location":"CHANGELOG/#110_-_2021-02-04","title":"1.1.0 - 2021-02-04","text":""},{"location":"CHANGELOG/#added_9","title":"Added","text":"<ul> <li>Support for Swift storage backend</li> <li>Use the <code>push</code> command <code>--ignore-errors</code> option to ignore ES bulk import   errors</li> <li>The elasticsearch backend now accepts passing all supported client options</li> </ul>"},{"location":"CHANGELOG/#changed_13","title":"Changed","text":"<ul> <li>Upgrade <code>pyyaml</code> to <code>5.4.1</code></li> <li>Upgrade <code>pandas</code> to <code>1.2.1</code></li> </ul>"},{"location":"CHANGELOG/#removed_3","title":"Removed","text":"<ul> <li><code>click_log</code> is no longer required as we are able to configure logging</li> </ul>"},{"location":"CHANGELOG/#100_-_2021-01-13","title":"1.0.0 - 2021-01-13","text":""},{"location":"CHANGELOG/#added_10","title":"Added","text":"<ul> <li>Implement base CLI commands (list, extract, fetch &amp; push) for supported   backends</li> <li>Support for ElasticSearch database backend</li> <li>Support for LDP storage backend</li> <li>Support for FS storage backend</li> <li>Parse (gzipped) tracking logs in GELF format</li> <li>Support for application\u2019s configuration file</li> <li>Add optional sentry integration</li> <li>Distribute Arnold\u2019s tray to deploy Ralph in a k8s cluster as cronjobs</li> </ul>"},{"location":"LICENSE/","title":"License","text":"<p>MIT License</p> <p>Copyright (c) 2020-present France Universit\u00e9 Num\u00e9rique</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u201cSoftware\u201d), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"api/","title":"API Server","text":"<p>Ralph comes with an API server that aims to implement the Learning Record Store (LRS) specification (still a work in progress).</p>"},{"location":"api/#getting_started","title":"Getting started","text":"<p>The API server can be started up with the following command:</p> <pre><code>$ ralph runserver --backend es\n</code></pre> <p>The <code>--backend</code> (or <code>-b</code>) option specifies which database backend to use for LRS data storage and retrieval. See Ralph\u2019s backends documentation for more details.</p> <p>However, before you can start your API server and make requests against it, you need to set up your credentials.</p>"},{"location":"api/#creating_a_credentials_file","title":"Creating a credentials file","text":"<p>The credentials file is expected to be a valid JSON file. Its location is specified by the <code>RALPH_AUTH_FILE</code> configuration value. By default, <code>ralph</code> will look for the <code>auth.json</code> file in the application directory (see click documentation for details).</p> <p>The expected format is a list of entries (JSON objects) each containing the username, the user\u2019s <code>bcrypt</code> hashed+salted password and scopes they can access:</p> <pre><code>[\n{\n\"username\": \"john.doe@example.com\",\n\"hash\": \"$2b$12$yBXrzIuRIk6yaft5KUgVFOIPv0PskCCh9PXmF2t7pno.qUZ5LK0D2\",\n\"scopes\": [\"example_scope\"]\n},\n{\n\"username\": \"simon.says@example.com\",\n\"hash\": \"$2b$12$yBXrzIuRIk6yaft5KUgVFOIPv0PskCCh9PXmF2t7pno.qUZ5LK0D2\",\n\"scopes\": [\"second_scope\", \"third_scope\"]\n}\n]\n</code></pre> <p>To create a new user credentials, Ralph\u2019s CLI provides a dedicated command:</p> <pre><code>$ ralph auth \\\n--username janedoe \\\n--password supersecret \\\n--scope janedoe_scope \\\n-w\n</code></pre> <p>This command updates your credentials file with the new <code>janedoe</code> user.</p> <p>Note that running this command requires that you installed Ralph with the CLI optional dependencies, e.g. <code>pip install ralph-malph[cli]</code> (which we highly recommend).</p>"},{"location":"api/#making_a_get_request","title":"Making a GET request","text":"<p>The first request that can be answered by the ralph API server is a <code>whoami</code> request, which checks if the user is authenticated and returns their username and permission scopes.</p> <p>Use curl to get <code>http://localhost:8100/whoami</code>:</p> <pre><code>$ curl http://localhost:8100/whoami\n&lt; HTTP/1.1 401 Unauthorized\n&lt; {\"error\":\"Not authenticated\"}\n</code></pre> <p>Send your username and password to the API server through HTTP Basic Auth:</p> <pre><code>$ curl --user john.doe@example.com:PASSWORD http://localhost:8100/whoami\n&lt; HTTP/1.1 200 OK\n&lt; {\"username\":\"john.doe@example.com\",\"scopes\":[\"authenticated\",\"example_scope\"]}\n</code></pre>"},{"location":"api/#forwarding_statements","title":"Forwarding statements","text":"<p>Ralph\u2019s API server can be configured to forward xAPI statements it receives to other LRSes.</p> <p>To configure statement forwarding, you need to create a <code>.env</code> file in the current directory and define the <code>RALPH_XAPI_FORWARDINGS</code> variable or define the <code>RALPH_XAPI_FORWARDINGS</code> environment variable.</p> <p>The value of the <code>RALPH_XAPI_FORWARDINGS</code> variable should be a JSON encoded list of dictionaries where each dictionary defines a forwarding configuration and consists of the following key/value pairs:</p> key value type description <code>is_active</code> <code>boolean</code> Specifies whether or not this forwarding configuration should take effect. <code>url</code> <code>URL</code> Specifies the endpoint URL where forwarded statements should be send. <code>basic_username</code> <code>string</code> Specifies the basic auth username. <code>basic_password</code> <code>string</code> Specifies the basic auth password. <code>max_retries</code> <code>number</code> Specifies the number of times a failed forwarding request should be retried. <code>timeout</code> <code>number</code> Specifies the duration in seconds of network inactivity leading to a timeout. <p>Note that for a forwarding configuration to be valid it is required that all key/value pairs are defined.</p> <p>Example of a valid forwarding configuration:</p> <pre><code>RALPH_XAPI_FORWARDINGS='\n[\n  {\n    \"is_active\": true,\n    \"url\": \"http://lrs1.example.com/xAPI/statements/\",\n    \"basic_username\": \"admin1@example.com\",\n    \"basic_password\": \"PASSWORD1\",\n    \"max_retries\": 1,\n    \"timeout\": 5\n  },\n  {\n    \"is_active\": true,\n    \"url\": \"http://lrs2.example.com/xAPI/statements/\",\n    \"basic_username\": \"admin2@example.com\",\n    \"basic_password\": \"PASSWORD2\",\n    \"max_retries\": 5,\n    \"timeout\": 0.2\n  }\n]\n'\n</code></pre>"},{"location":"api/#sentry_configuration","title":"Sentry configuration","text":"<p>Ralph provides Sentry integration to monitor its LRS server and its CLI. To activate Sentry integration, one should define the following environment variables:</p> <pre><code>RALPH_SENTRY_DSN={PROTOCOL}://{PUBLIC_KEY}:{SECRET_KEY}@{HOST}{PATH}/{PROJECT_ID}\nRALPH_EXECUTION_ENVIRONMENT=development\n</code></pre> <p>The Sentry DSN (Data Source Name) can be found in your project settings from Sentry application. The execution environment should reflect the environment Ralph has been deployed in (e.g. <code>production</code>).</p> <p>You may also want to monitor the performance of Ralph by configuring the CLI and LRS traces sample rates: <pre><code>RALPH_SENTRY_CLI_TRACES_SAMPLE_RATE=0.1\nRALPH_SENTRY_LRS_TRACES_SAMPLE_RATE=0.3\n</code></pre></p> <p>Note that a sampling rate of <code>1.0</code> means 100% of transactions are sent to sentry and <code>0.1</code> only 10%.</p> <p>If you want to lower noisy transactions (e.g. in a Kubernetes cluster), you can disable health checks related ones: <pre><code>RALPH_SENTRY_IGNORE_HEALTH_CHECKS=True\n</code></pre></p>"},{"location":"backends/","title":"Backends","text":"<p>Ralph supports various storage and database backends that can be accessed to read from or write learning events to. Implemented backends are listed below along with their configuration parameters. If your favourite backend is missing to the list, feel free to submit your implementation or get in touch!</p>"},{"location":"backends/#key_concepts","title":"Key concepts","text":"<p>We distinguish storage from database backends as the semantic and concepts are quite different in terms of code, but those two types of backends can be considered as \u201cbackends\u201d from a Ralph user perspective as the CLI can use both in most of its commands.</p> <p>Each backend has its own parameters that are required to use it. Those parameters can be set as command line options or environment variables; the later is the recommended solution for sensible data such as service credentials. If we consider the <code>os_username</code> (OpenStack user name) parameter of the OpenStack Swift backend, it can be set as a command line option using <code>swift</code> as the option prefix (and replacing underscores in its name by dashes):</p> <pre><code>$ ralph list --backend swift --swift-os-username johndoe # [...] more options\n</code></pre> <p>Alternatively, this parameter can be set as an environment variable (in upper case, prefixed by the program name, e.g. <code>RALPH_</code>):</p> <pre><code>$ export RALPH_BACKENDS__STORAGE__SWIFT__OS_USERNAME=\"johndoe\"\n$ ralph list --backend swift # [...] more options\n</code></pre> <p>The general patterns for backend parameters are:</p> <ul> <li><code>--{{ backend_name }}-{{ parameter | underscore_to_dash }}</code> for command options, and,</li> <li><code>RALPH_BACKENDS__{{ backend_type | uppercase }}__{{ backend_name | uppercase }}__{{ parameter | uppercase }}</code> for environment variables, where the <code>backend_type</code> is one of <code>DATABASE</code>, <code>STORAGE</code> and <code>STREAM</code>.</li> </ul>"},{"location":"backends/#storage_backends","title":"Storage backends","text":""},{"location":"backends/#ovh_-_log_data_platform_ldp","title":"OVH - Log Data Platform (LDP)","text":"<p>LDP is a nice service built by OVH on top of Graylog to follow, analyse and store your logs. Learning events (aka tracking logs) can be stored in GELF format using this backend.</p> <p>For now the LDP backend is read-only as we consider that it is mostly used to collect primary logs and not as a Ralph target. Feel free to get in touch to prove us wrong, or better: submit your proposal for the <code>write</code> method implementation.</p>"},{"location":"backends/#backend_parameters","title":"Backend parameters","text":"<p>To access OVH\u2019s LDP API, you need to register Ralph as an authorized application and generate an application key, an application secret and a consumer key.</p> <p>While filling the registration form available at: eu.api.ovh.com/createToken/, be sure to give an appropriate validity time span to your token and allow only GET requests on the <code>/dbaas/logs/*</code> path.</p> <ul> <li><code>endpoint</code>: the API endpoint (e.g. <code>ovh-eu</code>)</li> <li><code>application_key</code>: use generated application key</li> <li><code>application_secret</code>: use generated application secret</li> <li><code>consumer_key</code>: use generated consumer key</li> </ul> <p>The following parameters are required to fetch archives from an LDP account stream:</p> <ul> <li><code>service_name</code>: the LDP account name (e.g. <code>ldp-xx-xxxxx</code>)</li> <li><code>stream_id</code>: the identifier of the stream you are querying (e.g. a UUID hex   representation: <code>77ec6e4a-ac15-4bcf-8043-7429bf275e49</code>)</li> </ul> <p>For more information about OVH\u2019s API client parameters, please refer to the project\u2019s documentation: github.com/ovh/python-ovh.</p>"},{"location":"backends/#openstack_swift","title":"OpenStack Swift","text":"<p>Swift is the OpenStack object storage service. This storage backend is fully supported (read and write operations) to stream and store log archives.</p>"},{"location":"backends/#backend_parameters_1","title":"Backend parameters","text":"<p>Primarily required parameters correspond to a standard authentication using OpenStack Keystone service:</p> <ul> <li><code>os_identity_api_version</code>: keystone API version you will authenticate to (defaults to <code>3</code>)</li> <li><code>os_auth_url</code>: the authentication URL (defaults to OVH\u2019s Swift <code>https://auth.cloud.ovh.net/</code>)</li> <li><code>os_project_domain_name</code>: the project domain name (defaults to <code>Default</code>)</li> <li><code>os_user_domain_name</code>: the user domain name (defaults to <code>Default</code>)</li> <li><code>os_username</code>: the name of your openstack swift user</li> <li><code>os_password</code>: the password of your openstack swift user</li> </ul> <p>Secondary parameters are required to work with the target container:</p> <ul> <li><code>os_storage_url</code>: the URL of the target container</li> <li><code>os_region_name</code>: the region where your container is</li> <li><code>os_tenant_name</code>: the name of the tenant of your container</li> <li><code>os_tenant_id</code>: the identifier of the tenant of your container</li> </ul>"},{"location":"backends/#amazon_s3","title":"Amazon S3","text":"<p>S3 is the Amazon Simple Storage Service. This storage backend is fully supported (read and write operations) to stream and store log archives.</p>"},{"location":"backends/#backend_parameters_2","title":"Backend parameters","text":"<p>Primarily required parameters correspond to a standard authentication with AWS CLI:</p> <ul> <li><code>access_key_id</code>: the access key for your AWS account</li> <li><code>secret_access_key</code>: the secret key for your AWS account</li> <li><code>session_token</code>: the session key for your AWS account (only needed when you are using temporary credentials).</li> </ul> <p>Secondary parameters are required to work with the target bucket:</p> <ul> <li><code>default_region</code>: the region where your bucket is</li> <li><code>bucket_name</code>: the name of your S3 bucket</li> </ul>"},{"location":"backends/#file_system","title":"File system","text":"<p>The file system backend is a dummy template that can be used to develop your own backend. It\u2019s a \u201cdummy\u201d backend as it\u2019s not required in a UNIX Shell context, the <code>ls</code> and <code>cat</code> commands used along with UNIX streams will do a better job.</p>"},{"location":"backends/#backend_parameters_3","title":"Backend parameters","text":"<p>The only required parameter is the <code>path</code> we want to list or stream content from.</p>"},{"location":"backends/#stream_backends","title":"Stream backends","text":""},{"location":"backends/#websocket","title":"WebSocket","text":"<p>The webSocket backend is read-only and can be used to get real-time events.</p> <p>If you use OVH\u2019s Logs Data Platform (LDP), you can retrieve a WebSocket URI to test your data stream by following instructions from the official documentation.</p>"},{"location":"backends/#backend_parameters_4","title":"Backend parameters","text":"<ul> <li><code>ws_uri</code>: the WebSocket uri (e.g. <code>wss://example.com/websocket</code>)</li> </ul>"},{"location":"backends/#database_backends","title":"Database backends","text":""},{"location":"backends/#elasticsearch","title":"Elasticsearch","text":"<p>Elasticsearch backend is mostly used for indexation purpose (as a datalake) but it can also be used to fetch indexed data from it.</p>"},{"location":"backends/#backend_parameters_5","title":"Backend parameters","text":"<p>Elasticsearch backend parameters required to connect to a cluster are:</p> <ul> <li><code>hosts</code>: a list of cluster hosts to connect to (e.g. <code>[\"http://elasticsearch-node:9200\"]</code>)</li> <li><code>index</code>: the elasticsearch index where to get/put documents</li> <li><code>client_options</code>: a comma separated key=value list of Elasticsearch client options</li> </ul> <p>The Elasticsearch client options supported in Ralph are: - <code>ca_certs</code>: the path to the CA certificate file. - <code>verify_certs</code>: enable or disable the certificate verification. Note that it should be enabled in production. Default to <code>True</code></p>"},{"location":"backends/#mongodb","title":"MongoDB","text":"<p>MongoDB backend is mostly used for indexation purpose (as a datalake) but it can also be used to fetch collections of documents from it.</p>"},{"location":"backends/#backend_parameters_6","title":"Backend parameters","text":"<p>MongoDB backend parameters required to connect to a cluster are:</p> <ul> <li><code>connection_uri</code>: the connection URI to connect to (e.g. <code>[\"mongodb://mongo:27017/\"]</code>)</li> <li><code>database</code>: the database to connect to</li> <li><code>collection</code>: the collection to get/put objects to</li> <li><code>client_options</code>: a comma separated key=value list of MongoDB client options</li> </ul> <p>The MongoDB client options supported in Ralph are: - <code>document_class</code>: default class to use for documents returned from queries - <code>tz_aware</code>: if True, datetime instances returned as values in a document will be timezone aware (otherwise they will be naive)</p>"},{"location":"backends/#clickhouse","title":"ClickHouse","text":"<p>The ClickHouse backend can be used as a data lake and to fetch collections of documents from it.</p>"},{"location":"backends/#backend_parameters_7","title":"Backend parameters","text":"<p>ClickHouse parameters required to connect are: - <code>host</code>: the connection hostname to connect to (e.g. <code>\"clickhouse.yourhost.com\"</code>) - <code>port</code>: the port to the ClickHouse HTTPS interface (e.g. <code>8123</code>) - <code>database</code>: the name of the database to connect to - <code>event_table_name</code>: the name of the table to write statements to - <code>client_options</code>: a comma separated key=value list of ClickHouse client options</p> <p>Secondary parameters are needed if not using the default ClickHouse user: - <code>username</code>: the username to connect as - <code>password</code>: the password for the given ClickHouse username</p> <p>By default, the following client options are set, if you override the default  client options you must also set these: - <code>\"date_time_input_format\": \"best_effort\"</code> allows RFC date parsing - <code>\"allow_experimental_object_type\": 1</code> allows the JSON data type we use to store statements</p> <p>The ClickHouse client options supported in Ralph can be found in these locations: - Python driver specific - General ClickHouse client settings</p>"},{"location":"commands/","title":"Commands","text":""},{"location":"commands/#ralph","title":"ralph","text":"<p>Ralph is a stream-based tool to play with your logs.</p> <p>Usage:</p> <pre><code>ralph [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <pre><code>  -v, --verbosity LVL  Either CRITICAL, ERROR, WARNING, INFO (default) or\n                       DEBUG\n  --version            Show the version and exit.\n  --help               Show this message and exit.\n</code></pre>"},{"location":"commands/#ralph-auth","title":"ralph auth","text":"<p>Generate credentials for LRS HTTP basic authentification.</p> <p>Usage:</p> <pre><code>ralph auth [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -u, --username TEXT  The user for which we generate credentials.  [required]\n  -p, --password TEXT  The password to encrypt for this user. Will be prompted\n                       if missing.  [required]\n  -s, --scope TEXT     The user scope(s). This option can be provided multiple\n                       times.  [required]\n  -w, --write          Write new credentials to the LRS authentication file.\n  --help               Show this message and exit.\n</code></pre>"},{"location":"commands/#ralph-convert","title":"ralph convert","text":"<p>Convert input events to a given format.</p> <p>Usage:</p> <pre><code>ralph convert [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  From edX to xAPI converter options: \n    -u, --uuid-namespace TEXT     The UUID namespace to use for the `ID` field\n                                  generation\n    -p, --platform-url TEXT       The `actor.account.homePage` to use in the\n                                  xAPI statements  [required]\n  -f, --from [edx]                Input events format to convert  [required]\n  -t, --to [xapi]                 Output events format  [required]\n  -I, --ignore-errors             Continue writing regardless of raised errors\n  -F, --fail-on-unknown           Stop converting at first unknown event\n  --help                          Show this message and exit.\n</code></pre>"},{"location":"commands/#ralph-extract","title":"ralph extract","text":"<p>Extract input events from a container format using a dedicated parser.</p> <p>Usage:</p> <pre><code>ralph extract [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -p, --parser [gelf|es]  Container format parser used to extract events\n                          [required]\n  --help                  Show this message and exit.\n</code></pre>"},{"location":"commands/#ralph-fetch","title":"ralph fetch","text":"<p>Fetch an archive or records from a configured backend.</p> <p>Usage:</p> <pre><code>ralph fetch [OPTIONS] [ARCHIVE]\n</code></pre> <p>Options:</p> <pre><code>  -b, --backend [es|mongo|clickhouse|ldp|fs|swift|s3|ws]\n                                  Backend  [required]\n  ws backend: \n    --ws-uri TEXT\n  s3 backend: \n    --s3-bucket-name TEXT\n    --s3-default-region TEXT\n    --s3-session-token TEXT\n    --s3-secret-access-key TEXT\n    --s3-access-key-id TEXT\n  swift backend: \n    --swift-os-identity-api-version TEXT\n    --swift-os-auth-url TEXT\n    --swift-os-project-domain-name TEXT\n    --swift-os-user-domain-name TEXT\n    --swift-os-storage-url TEXT\n    --swift-os-region-name TEXT\n    --swift-os-password TEXT\n    --swift-os-username TEXT\n    --swift-os-tenant-name TEXT\n    --swift-os-tenant-id TEXT\n  fs backend: \n    --fs-path TEXT\n  ldp backend: \n    --ldp-stream-id TEXT\n    --ldp-service-name TEXT\n    --ldp-consumer-key TEXT\n    --ldp-application-secret TEXT\n    --ldp-application-key TEXT\n    --ldp-endpoint TEXT\n  clickhouse backend: \n    --clickhouse-client-options KEY=VALUE,KEY=VALUE\n    --clickhouse-password TEXT\n    --clickhouse-username TEXT\n    --clickhouse-event-table-name TEXT\n    --clickhouse-database TEXT\n    --clickhouse-port INTEGER\n    --clickhouse-host TEXT\n  mongo backend: \n    --mongo-client-options KEY=VALUE,KEY=VALUE\n    --mongo-collection TEXT\n    --mongo-database TEXT\n    --mongo-connection-uri TEXT\n  es backend: \n    --es-op-type TEXT\n    --es-client-options KEY=VALUE,KEY=VALUE\n    --es-index TEXT\n    --es-hosts VALUE1,VALUE2,VALUE3\n  -c, --chunk-size INTEGER        Get events by chunks of size #\n  -q, --query '{\"KEY\": \"VALUE\", \"KEY\": \"VALUE\"}'\n                                  Query object as a JSON string (database\n                                  backends ONLY)\n  --help                          Show this message and exit.\n</code></pre>"},{"location":"commands/#ralph-list","title":"ralph list","text":"<p>List available archives from a configured storage backend.</p> <p>Usage:</p> <pre><code>ralph list [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -b, --backend [ldp|fs|swift|s3]\n                                  Backend  [required]\n  s3 backend: \n    --s3-bucket-name TEXT\n    --s3-default-region TEXT\n    --s3-session-token TEXT\n    --s3-secret-access-key TEXT\n    --s3-access-key-id TEXT\n  swift backend: \n    --swift-os-identity-api-version TEXT\n    --swift-os-auth-url TEXT\n    --swift-os-project-domain-name TEXT\n    --swift-os-user-domain-name TEXT\n    --swift-os-storage-url TEXT\n    --swift-os-region-name TEXT\n    --swift-os-password TEXT\n    --swift-os-username TEXT\n    --swift-os-tenant-name TEXT\n    --swift-os-tenant-id TEXT\n  fs backend: \n    --fs-path TEXT\n  ldp backend: \n    --ldp-stream-id TEXT\n    --ldp-service-name TEXT\n    --ldp-consumer-key TEXT\n    --ldp-application-secret TEXT\n    --ldp-application-key TEXT\n    --ldp-endpoint TEXT\n  -n, --new / -a, --all           List not fetched (or all) archives\n  -D, --details / -I, --ids       Get archives detailed output (JSON)\n  --help                          Show this message and exit.\n</code></pre>"},{"location":"commands/#ralph-push","title":"ralph push","text":"<p>Push an archive to a configured backend.</p> <p>Usage:</p> <pre><code>ralph push [OPTIONS] [ARCHIVE]\n</code></pre> <p>Options:</p> <pre><code>  -b, --backend [es|mongo|clickhouse|ldp|fs|swift|s3]\n                                  Backend  [required]\n  s3 backend: \n    --s3-bucket-name TEXT\n    --s3-default-region TEXT\n    --s3-session-token TEXT\n    --s3-secret-access-key TEXT\n    --s3-access-key-id TEXT\n  swift backend: \n    --swift-os-identity-api-version TEXT\n    --swift-os-auth-url TEXT\n    --swift-os-project-domain-name TEXT\n    --swift-os-user-domain-name TEXT\n    --swift-os-storage-url TEXT\n    --swift-os-region-name TEXT\n    --swift-os-password TEXT\n    --swift-os-username TEXT\n    --swift-os-tenant-name TEXT\n    --swift-os-tenant-id TEXT\n  fs backend: \n    --fs-path TEXT\n  ldp backend: \n    --ldp-stream-id TEXT\n    --ldp-service-name TEXT\n    --ldp-consumer-key TEXT\n    --ldp-application-secret TEXT\n    --ldp-application-key TEXT\n    --ldp-endpoint TEXT\n  clickhouse backend: \n    --clickhouse-client-options KEY=VALUE,KEY=VALUE\n    --clickhouse-password TEXT\n    --clickhouse-username TEXT\n    --clickhouse-event-table-name TEXT\n    --clickhouse-database TEXT\n    --clickhouse-port INTEGER\n    --clickhouse-host TEXT\n  mongo backend: \n    --mongo-client-options KEY=VALUE,KEY=VALUE\n    --mongo-collection TEXT\n    --mongo-database TEXT\n    --mongo-connection-uri TEXT\n  es backend: \n    --es-op-type TEXT\n    --es-client-options KEY=VALUE,KEY=VALUE\n    --es-index TEXT\n    --es-hosts VALUE1,VALUE2,VALUE3\n  -c, --chunk-size INTEGER        Get events by chunks of size #\n  -f, --force                     Overwrite existing archives or records\n  -I, --ignore-errors             Continue writing regardless of raised errors\n  --help                          Show this message and exit.\n</code></pre>"},{"location":"commands/#ralph-runserver","title":"ralph runserver","text":"<p>Run the API server for the development environment.</p> <p>Starts uvicorn programmatically for convenience and documentation.</p> <p>Usage:</p> <pre><code>ralph runserver [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -b, --backend [es|mongo|clickhouse]\n                                  Backend  [required]\n  clickhouse backend: \n    --clickhouse-client-options KEY=VALUE,KEY=VALUE\n    --clickhouse-password TEXT\n    --clickhouse-username TEXT\n    --clickhouse-event-table-name TEXT\n    --clickhouse-database TEXT\n    --clickhouse-port INTEGER\n    --clickhouse-host TEXT\n  mongo backend: \n    --mongo-client-options KEY=VALUE,KEY=VALUE\n    --mongo-collection TEXT\n    --mongo-database TEXT\n    --mongo-connection-uri TEXT\n  es backend: \n    --es-op-type TEXT\n    --es-client-options KEY=VALUE,KEY=VALUE\n    --es-index TEXT\n    --es-hosts VALUE1,VALUE2,VALUE3\n  -h, --host TEXT                 LRS server host name\n  -p, --port INTEGER              LRS server port\n  --help                          Show this message and exit.\n</code></pre>"},{"location":"commands/#ralph-validate","title":"ralph validate","text":"<p>Validate input events of given format.</p> <p>Usage:</p> <pre><code>ralph validate [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -f, --format [edx|xapi]  Input events format to validate  [required]\n  -I, --ignore-errors      Continue validating regardless of raised errors\n  -F, --fail-on-unknown    Stop validating at first unknown event\n  --help                   Show this message and exit.\n</code></pre>"},{"location":"contribute/","title":"Contribute","text":""},{"location":"contribute/#ralphs_core","title":"Ralph\u2019s core","text":"<p>To start playing with <code>ralph</code>, you should build it using the <code>bootstrap</code> Make target:</p> <pre><code>$ make bootstrap\n</code></pre> <p>Once the project has been bootstrapped, you may want to edit generated <code>.env</code> file to set up available backends parameters that will be injected in the running container as environment variables to configure Ralph (see backends documentation):</p> <pre><code># Elasticsearch backend\nRALPH_ES_HOSTS=http://elasticsearch:9200\nRALPH_ES_INDEX=statements\nRALPH_ES_TEST_HOSTS=http://elasticsearch:9200\nRALPH_ES_TEST_INDEX=test-index\n\n# [...]\n</code></pre> <p>Note that lines starting with a <code>#</code> are considered as commented and thus will have no effect while running Ralph.</p> <p>Now you can start playing the CLI:</p> <pre><code>$ bin/ralph --help\n</code></pre> <p>To lint your code, either use the <code>lint</code> meta target or one of the linting tools we use:</p> <pre><code># Run all linters\n$ make lint\n\n# Run pylint\n$ make lint-pylint\n\n# List available linters\n$ make help | grep lint-\n</code></pre> <p>To run tests on your code, either use the <code>test</code> Make target or the <code>bin/pytest</code> script to pass specific arguments to the test runner:</p> <pre><code># Run all tests\n$ make test\n\n# Run pytest with options\n$ bin/pytest -x -k mixins\n\n# Run pytest with options and more debugging logs\n$ bin/pytest -x -vvv -s --log-level=DEBUG -k mixins\n</code></pre>"},{"location":"contribute/#working_with_local_backends","title":"Working with local backends","text":"<p>Not all backends are accessible in a local environment development; for now only <code>elasticsearch</code> and <code>swift</code> services are accessible as docker containers (see <code>docker-compose.yml</code> services).</p> <p>To configure those backends, we provide default parameters in the <code>.env.dist</code> template, you can copy/paste them in your <code>.env</code> file (and uncomment them so that they are properly injected in running containers).</p> <p>In order to run the Elasticsearch backend locally on GNU/Linux operating systems, ensure that your virtual memory limits are not too low and increase them (temporally) if needed by typing this command from your terminal (as <code>root</code> or using <code>sudo</code>):</p> <p><code>sysctl -w vm.max_map_count=262144</code></p> <p>Reference: https://www.elastic.co/guide/en/elasticsearch/reference/master/vm-max-map-count.html</p> <p>Once configured, start available backends using:</p> <pre><code>$ make run-[BACKEND]\n</code></pre> <p>Substitute <code>[BACKEND]</code> by the backend name, e.g. <code>es</code> for Elasticsearch or <code>swift</code> for OpenStack Swift:</p> <pre><code># Start Elasticsearch local backend\n$ make run-es\n# Start Swift local backend\n$ make run-swift\n# Start all local backends\n$ make run-all\n</code></pre> <p>Now that you have started at least the <code>elasticsearch</code> and <code>swift</code> backends, it\u2019s time to play with them:</p> <pre><code># Store a JSON file in the Swift backend\n$ echo '{\"id\": 1, \"foo\": \"bar\"}' | \\\n./bin/ralph push -b swift -f foo.json\n\n# Check that we have created a new JSON file in the Swift backend\n$ bin/ralph list -b swift\nfoo.json\n\n# Fetch the content of the JSON file and index it in Elasticsearch\n$ bin/ralph fetch -b swift foo.json | \\\nbin/ralph push -b es\n\n# Check that we have properly indexed the JSON file in Elasticsearch\n$ bin/ralph fetch -b es\n{\"id\": 1, \"foo\": \"bar\"}\n</code></pre>"},{"location":"contribute/#ralphs_tray","title":"Ralph\u2019s tray","text":"<p>Ralph is distributed along with its tray (a deployable package for Kubernetes clusters using Arnold). If you intend to work on this tray, please refer to Arnold\u2019s documentation first.</p> <p>Dependencies:</p> <ul> <li>Kubectl (&gt;<code>v.1.23.5</code>):   This CLI is used to communicate with the running Kubernetes instance you   will use.</li> <li>k3d (&gt;<code>v.5.0.0</code>): This tool is used to setup   and run a lightweight Kubernetes cluster, in order to have a local   environment (it is required to complete below\u2019s quickstart instructions to   avoid depending on an existing Kubernetes cluster).</li> <li>curl is required by Arnold\u2019s CLI.</li> <li>gnupg to encrypt Ansible vaults passwords and   collaborate with your team.</li> </ul>"},{"location":"contribute/#create_a_local_k3d_cluster","title":"Create a local <code>k3d</code> cluster","text":"<p>To create (or run) a local kubernetes cluster, we use <code>k3d</code>. The cluster\u2019s bootstrapping should be run via:</p> <pre><code>$ make k3d-cluster\n</code></pre> <p>Running a k3d-cluster locally supposes that the 80 and 443 ports of your machine are available, so that the ingresses created for your project responds properly. If one or both ports are already used by another service running on your machine, the <code>make k3d-cluster</code> command may fail.</p> <p>You can check that your cluster is running using the <code>k3d cluster</code> command:</p> <pre><code>$ k3d cluster list\nNAME     SERVERS   AGENTS   LOADBALANCER\nralph    1/1       0/0      true\n</code></pre> <p>As you can see, we are running a single node cluster called <code>ralph</code>.</p>"},{"location":"contribute/#bootstrap_an_arnold_project","title":"Bootstrap an Arnold project","text":"<p>Once your Kubernetes cluster is running, you need to create a standard Arnold project describing applications and environments you need to deploy:</p> <pre><code>$ make arnold-bootstrap\n</code></pre> <p>Once bootstrapped, Arnold should have created a <code>group_vars</code> directory containing the following files:</p> <pre><code>$ tree group_vars\ngroup_vars\n\u251c\u2500\u2500 common\n\u2514\u2500\u2500 customer\n    \u2514\u2500\u2500 ralph\n        \u251c\u2500\u2500 development\n        \u2502\u00a0\u00a0 \u251c\u2500\u2500 main.yml\n        \u2502\u00a0\u00a0 \u2514\u2500\u2500 secrets\n        \u2502\u00a0\u00a0     \u251c\u2500\u2500 databases.vault.yml\n        \u2502\u00a0\u00a0     \u251c\u2500\u2500 elasticsearch.vault.yml\n        \u2502\u00a0\u00a0     \u2514\u2500\u2500 ralph.vault.yml\n        \u2514\u2500\u2500 main.yml\n\n5 directories, 5 files\n</code></pre> <p>To create the LRS credentials file, you need to provide a list of accounts allowed to request the LRS in Ralph\u2019s vault:</p> <pre><code># Setup your kubernetes environment\n$ source .k3d-cluster.env.sh\n\n# Decrypt the vault\n$ bin/arnold -d -c ralph -e development -- vault -a ralph decrypt\n</code></pre> <p>Edit the vault file to add a new account for the <code>foo</code> user with the <code>bar</code> password and a relevant scope:</p> <pre><code># group_vars/customer/ralph/development/secrets/ralph.vault.yml\n#\n# [...]\n#\n# LRS\nLRS_AUTH:\n- username: \"foo\"\nhash: \"$2b$12$lCggI749U6TrzK7Qyr7xGe1KVSAXdPjtkMew.BD6lzIk//T5YSb72\"\nscopes:\n- \"foo_scope\"\n</code></pre> <p>The password hash has been generated using <code>bcrypt</code> as explained in the API user guide.</p> <p>And finally (re-)encrypt Ralph\u2019s vault:</p> <pre><code># Encrypt the vault\n$ bin/arnold -d -c ralph -e development -- vault -a ralph encrypt\n</code></pre> <p>You are now ready to create the related Kubernetes Secret while initializing Arnold project in the next step.</p>"},{"location":"contribute/#prepare_working_namespace","title":"Prepare working namespace","text":"<p>You are now ready to create required Kubernetes objects to start working on Ralph\u2019s deployment:</p> <pre><code>$ make arnold-init\n</code></pre> <p>At this point an Elasticsearch cluster should be running on your Kubernetes cluster:</p> <pre><code>$ kubectl -n development-ralph get -l app=elasticsearch pod\nNAME                                         READY   STATUS      RESTARTS   AGE\nelasticsearch-node-0                         1/1     Running     0          69s\nelasticsearch-node-1                         1/1     Running     0          69s\nelasticsearch-node-2                         1/1     Running     0          69s\nes-index-template-j-221010-09h25m24s-nx5qz   0/1     Completed   0          49s\n</code></pre> <p>We are now ready to deploy Ralph to Kubernetes!</p>"},{"location":"contribute/#deploy_code_repeat","title":"Deploy, code, repeat","text":"<p>To test your local docker image, you need to build it and publish it to the local kubernetes cluster docker registry using the <code>k3d-push</code> Makefile rule:</p> <pre><code>$ make k3d-push\n</code></pre> <p>Note that each time you modify Ralph\u2019s application or its Docker image, you will need to make this update.</p> <p>Now that your Docker image is published, it\u2019s time to deploy it!</p> <pre><code>$ make arnold-deploy\n</code></pre> <p>To test this deployment, let\u2019s try to make an authenticated request to the LRS:</p> <pre><code>$ curl -sLk \\\n--user foo:bar \\\n\"https://$(\\\nkubectl -n development-ralph \\\nget \\\ningress/ralph-app-current \\\n-o jsonpath='{.spec.rules[0].host}')/whoami\"\n</code></pre> <p>And why not send test statements from Potsie\u2019s repository:</p> <pre><code>$ curl -sL \\\nhttps://github.com/openfun/potsie/raw/main/fixtures/elasticsearch/lrs.json.gz | \\\ngunzip | \\\nhead -n 100 | \\\njq -s . | \\\nsed \"s/@timestamp/timestamp/g\" | \\\ncurl -sLk \\\n--user foo:bar \\\n-X POST \\\n-H \"Content-Type: application/json\" \\\n\"https://$(\\\nkubectl -n development-ralph \\\nget \\\ningress/ralph-app-current \\\n-o jsonpath='{.spec.rules[0].host}')/xAPI/statements/\" \\\n-d @-\n</code></pre> <p>This example command requires <code>jq</code> to serialize the request payload (xAPI statements). When dealing with JSON data, we strongly recommend to install it to manipulate them from the command line.</p>"},{"location":"contribute/#perform_arnolds_operations","title":"Perform Arnold\u2019s operations","text":"<p>If you want to run the <code>bin/arnold</code> script to run specific Arnold commands, you must ensure that your environment is properly set and that Arnold runs in development mode (i.e. using the <code>-d</code> flag):</p> <pre><code>$ source .k3d-cluster.env.sh\n$ bin/arnold -d -c ralph -e development -- vault -a ralph view\n</code></pre>"},{"location":"contribute/#stop_k3d_cluster","title":"Stop <code>k3d</code> cluster","text":"<p>When finished to work on the Tray, you can stop the <code>k3d</code> cluster using the <code>k3d-stop</code> helper:</p> <pre><code>$ make k3d-stop\n</code></pre>"},{"location":"models/","title":"Rationale","text":"<p>Ralph can be considered versatile since at some point it is log-content-agnostic: most commands will work as expected without transforming logged events content or format.</p> <p>But on the other side, Ralph is a tool dedicated to learning events processing so we\u2019ve implemented key features related to learning events validation and conversion. For now, we mostly focus on two learning events standards: Open edX and xAPI.</p> <p>Data validation and serialisation/de-serialisation are achieved using pydantics models that are documented in the following subsections:</p> <ul> <li>Open edX events</li> <li>xAPI events</li> </ul>"},{"location":"models/edx/","title":"Open edX events","text":"<p>edX pydantic models.</p>"},{"location":"models/edx/#ralph.models.edx.base","title":"<code>base</code>","text":"<p>Base event model definitions.</p>"},{"location":"models/edx/#ralph.models.edx.base.AbstractBaseEventField","title":"<code> AbstractBaseEventField            (BaseModelWithConfig)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for core <code>event</code> fields.</p> <p>The base model does not have any attributes as event field does not have common sub-fields.</p> Source code in <code>ralph/models/edx/base.py</code> <pre><code>class AbstractBaseEventField(BaseModelWithConfig):\n\"\"\"Pydantic model for core `event` fields.\n\n    The base model does not have any attributes as event field does not have common\n    sub-fields.\n    \"\"\"\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.base.BaseContextField","title":"<code> BaseContextField            (BaseModelWithConfig)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for core <code>context</code> field.</p> <p>Attributes:</p> Name Type Description <code>course_user_tags</code> <code>Dict of str</code> <p>Content from <code>user_api_usercoursetag</code> table. Retrieved with:     <code>dict(         UserCourseTag.objects.filter(             user=request.user.pk, course_id=course_key         ).values_list('key', 'value')     )</code> Note:     Is only present when a course page is requested.     Is an empty dictionary when the user is not logged in or not found in     the <code>user_api_usercoursetag</code> table.</p> <code>user_id</code> <code>int or str or None</code> <p>Consists of the ID of the authenticated user. Retrieved with:     <code>request.user.pk</code> querying the <code>auth_user</code> table. Note:     Is an integer when the user is found in the <code>auth_user</code> table.     Is an empty string when an exception is raised while retrieving the ID.     Is <code>None</code> when the user is not logged in.</p> <code>org_id</code> <code>str</code> <p>Consists of the organization name that lists the course. Retrieved with:     <code>course_id.org</code> where <code>course_id</code> is an     <code>opaque_keys.edx.locator.CourseLocator</code> which is created using the URL     of the requested page. Note:     Is an empty string when the requested page is not a course page.</p> <code>course_id</code> <code>str</code> <p>Consists of the unique identifier for the visited course page. Retrieved with:     <code>course_id.to_deprecated_string()</code> where <code>course_id</code> is an     <code>opaque_keys.edx.locator.CourseLocator</code> which is created using the URL     of the requested page. Note:     Is an empty string when the requested page is not a course page.</p> <code>path</code> <code>Path</code> <p>Consist of the relative URL (without the hostname) of the requested page. Retrieved with:     <code>request.META['PATH_INFO']</code></p> Source code in <code>ralph/models/edx/base.py</code> <pre><code>class BaseContextField(BaseModelWithConfig):\n\"\"\"Pydantic model for core `context` field.\n\n    Attributes:\n        course_user_tags (Dict of str): Content from `user_api_usercoursetag` table.\n            Retrieved with:\n                `dict(\n                    UserCourseTag.objects.filter(\n                        user=request.user.pk, course_id=course_key\n                    ).values_list('key', 'value')\n                )`\n            Note:\n                Is only present when a course page is requested.\n                Is an empty dictionary when the user is not logged in or not found in\n                the `user_api_usercoursetag` table.\n        user_id (int or str or None): Consists of the ID of the authenticated user.\n            Retrieved with:\n                `request.user.pk` querying the `auth_user` table.\n            Note:\n                Is an integer when the user is found in the `auth_user` table.\n                Is an empty string when an exception is raised while retrieving the ID.\n                Is `None` when the user is not logged in.\n        org_id (str): Consists of the organization name that lists the course.\n            Retrieved with:\n                `course_id.org` where `course_id` is an\n                `opaque_keys.edx.locator.CourseLocator` which is created using the URL\n                of the requested page.\n            Note:\n                Is an empty string when the requested page is not a course page.\n        course_id (str): Consists of the unique identifier for the visited course page.\n            Retrieved with:\n                `course_id.to_deprecated_string()` where `course_id` is an\n                `opaque_keys.edx.locator.CourseLocator` which is created using the URL\n                of the requested page.\n            Note:\n                Is an empty string when the requested page is not a course page.\n        path (Path): Consist of the relative URL (without the hostname) of the\n            requested page.\n            Retrieved with:\n                `request.META['PATH_INFO']`\n    \"\"\"\n\n    course_id: constr(regex=r\"^$|^course-v1:.+\\+.+\\+.+$\")  # noqa:F722\n    course_user_tags: Optional[Dict[str, str]]\n    module: Optional[ContextModuleField]\n    org_id: str\n    path: Path\n    user_id: Union[int, Literal[\"\"], None]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.base.BaseEdxModel","title":"<code> BaseEdxModel            (BaseModelWithConfig)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for core statement.</p> <p>WARNING: it does not define the <code>event</code>, <code>event_type</code> and <code>event_source</code> fields.</p> <p>Attributes:</p> Name Type Description <code>username</code> <code>str</code> <p>Consists of the unique username identifying the logged in user. Retrieved with:     <code>request.user.username</code> querying the <code>auth_user</code> table. Note:     Is an empty string when the user is not logged in.     If an exception is raised when retrieving the username from the table     then the value is <code>anonymous</code>.     Usernames are made of 2-30 ASCII letters / numbers / underscores (_) /     hyphens (-)</p> <code>ip</code> <code>IPv4Address or str</code> <p>Consists of the public IPv4 address of the user. Retrieved with:     <code>get_ip(request)</code> cf. https://github.com/un33k/django-ipware/tree/1.1.0 Note:     Can be an empty string if the IP address is not found.</p> <code>agent</code> <code>str</code> <p>Consists of the <code>User-Agent</code> HTTP request header. Retrieved with:     <code>request.META[HTTP_USER_AGENT]</code> Note:     Can be an empty string if the header is not present in the request.     Contains information about:         Browser name and version         Operating system name and version         Default language</p> <code>host</code> <code>str</code> <p>Consists of the hostname of the server. Retrieved with:     <code>request.META[SERVER_NAME]</code></p> <code>referer</code> <code>Path</code> <p>Consists of the <code>Referer</code> HTTP request header. Retrieved with:     <code>request.META[HTTP_REFERER]</code> Note:     Can be an empty string if the header is not present in the request.     Contains the referring URL (previous URL visited by the user).</p> <code>accept_language</code> <code>str</code> <p>Consists of the <code>Accept-Language</code> HTTP request header. Retrieved with:     <code>request.META[HTTP_ACCEPT_LANGUAGE]</code> Note:     Can be an empty string if the header is not present in the request.     Contains the default language settings of the user.</p> <code>context</code> <code>BaseContextField</code> <p>see BaseContextField.</p> <code>time</code> <code>datetime</code> <p>Consists of the UTC time in ISO format at which the event was emitted. Retrieved with:     <code>datetime.datetime.utcnow()</code></p> <code>page</code> <code>None</code> <p>Consists of the value <code>None</code> Note:     In JSON the value is <code>null</code> instead of <code>None</code>.</p> Source code in <code>ralph/models/edx/base.py</code> <pre><code>class BaseEdxModel(BaseModelWithConfig):\n\"\"\"Pydantic model for core statement.\n\n    WARNING: it does not define the `event`, `event_type` and `event_source` fields.\n\n    Attributes:\n        username (str): Consists of the unique username identifying the logged in user.\n            Retrieved with:\n                `request.user.username` querying the `auth_user` table.\n            Note:\n                Is an empty string when the user is not logged in.\n                If an exception is raised when retrieving the username from the table\n                then the value is `anonymous`.\n                Usernames are made of 2-30 ASCII letters / numbers / underscores (_) /\n                hyphens (-)\n        ip (IPv4Address or str): Consists of the public IPv4 address of the user.\n            Retrieved with:\n                `get_ip(request)` cf. https://github.com/un33k/django-ipware/tree/1.1.0\n            Note:\n                Can be an empty string if the IP address is not found.\n        agent (str): Consists of the `User-Agent` HTTP request header.\n            Retrieved with:\n                `request.META[HTTP_USER_AGENT]`\n            Note:\n                Can be an empty string if the header is not present in the request.\n                Contains information about:\n                    Browser name and version\n                    Operating system name and version\n                    Default language\n        host (str): Consists of the hostname of the server.\n            Retrieved with:\n                `request.META[SERVER_NAME]`\n        referer (Path): Consists of the `Referer` HTTP request header.\n            Retrieved with:\n                `request.META[HTTP_REFERER]`\n            Note:\n                Can be an empty string if the header is not present in the request.\n                Contains the referring URL (previous URL visited by the user).\n        accept_language (str): Consists of the `Accept-Language` HTTP request header.\n            Retrieved with:\n                `request.META[HTTP_ACCEPT_LANGUAGE]`\n            Note:\n                Can be an empty string if the header is not present in the request.\n                Contains the default language settings of the user.\n        context (BaseContextField): see BaseContextField.\n        time (datetime): Consists of the UTC time in ISO format at which the event was\n            emitted.\n            Retrieved with:\n                `datetime.datetime.utcnow()`\n        page (None): Consists of the value `None`\n            Note:\n                In JSON the value is `null` instead of `None`.\n    \"\"\"\n\n    username: Union[constr(min_length=2, max_length=30), Literal[\"\"]]\n    ip: Union[IPv4Address, Literal[\"\"]]\n    agent: str\n    host: str\n    referer: Union[AnyHttpUrl, Literal[\"\"]]\n    accept_language: str\n    context: BaseContextField\n    time: datetime\n    page: None\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.base.BaseModelWithConfig","title":"<code> BaseModelWithConfig            (BaseModel)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for base configuration shared among all models.</p> Source code in <code>ralph/models/edx/base.py</code> <pre><code>class BaseModelWithConfig(BaseModel):\n\"\"\"Pydantic model for base configuration shared among all models.\"\"\"\n\n    class Config:  # pylint: disable=missing-class-docstring # noqa: D106\n        extra = \"forbid\"\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.base.ContextModuleField","title":"<code> ContextModuleField            (BaseModelWithConfig)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>context</code>.<code>module</code> field.</p> <p>Attributes:</p> Name Type Description <code>usage_key</code> <code>str</code> <p>Consists of a block ID of the current component.</p> <code>display_name</code> <code>str</code> <p>Consists of a short description or title of the component.</p> Source code in <code>ralph/models/edx/base.py</code> <pre><code>class ContextModuleField(BaseModelWithConfig):\n\"\"\"Pydantic model for `context`.`module` field.\n\n    Attributes:\n        usage_key (str): Consists of a block ID of the current component.\n        display_name (str): Consists of a short description or title of the component.\n    \"\"\"\n\n    usage_key: constr(regex=r\"^block-v1:.+\\+.+\\+.+type@.+@[a-f0-9]{32}$\")  # noqa:F722\n    display_name: str\n    original_usage_key: Optional[\n        constr(\n            regex=r\"^block-v1:.+\\+.+\\+.+type@problem\\+block@[a-f0-9]{32}$\"  # noqa:F722\n        )\n    ]\n    original_usage_version: Optional[str]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.browser","title":"<code>browser</code>","text":"<p>Browser event model definitions.</p>"},{"location":"models/edx/#ralph.models.edx.browser.BaseBrowserModel","title":"<code> BaseBrowserModel            (BaseEdxModel)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for core browser statements.</p> <p>This type of event is triggered on (XHR) POST/GET requests to the <code>/event</code> URL.</p> <p>Attributes:</p> Name Type Description <code>event_source</code> <code>str</code> <p>Consists of the value <code>browser</code>.</p> <code>page</code> <code>AnyUrl</code> <p>Consists of the URL (with hostname) of the visited page. Retrieved with:     <code>window.location.href</code> from the JavaScript front-end.</p> <code>session</code> <code>str</code> <p>Consists of the md5 encrypted Django session key or an empty string.</p> Source code in <code>ralph/models/edx/browser.py</code> <pre><code>class BaseBrowserModel(BaseEdxModel):\n\"\"\"Pydantic model for core browser statements.\n\n    This type of event is triggered on (XHR) POST/GET requests to the `/event` URL.\n\n    Attributes:\n        event_source (str): Consists of the value `browser`.\n        page (AnyUrl): Consists of the URL (with hostname) of the visited page.\n            Retrieved with:\n                `window.location.href` from the JavaScript front-end.\n        session (str): Consists of the md5 encrypted Django session key or an empty\n            string.\n    \"\"\"\n\n    event_source: Literal[\"browser\"]\n    page: AnyUrl\n    session: Union[constr(regex=r\"^[a-f0-9]{32}$\"), Literal[\"\"]]  # noqa: F722\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.converters","title":"<code>converters</code>  <code>special</code>","text":""},{"location":"models/edx/#ralph.models.edx.converters.xapi","title":"<code>xapi</code>  <code>special</code>","text":"<p>edX to xAPI conversion sets.</p>"},{"location":"models/edx/#ralph.models.edx.converters.xapi.base","title":"<code>base</code>","text":"<p>Base xAPI Converter.</p>"},{"location":"models/edx/#ralph.models.edx.converters.xapi.base.BaseXapiConverter","title":"<code> BaseXapiConverter            (BaseConversionSet)         </code>","text":"<p>Base xAPI Converter.</p> <p>WARNING: The converter may not include the following edX fields: - context.org_id: When <code>org_id</code> is an empty string. - context.course_id: When <code>course_id</code> is an empty string.</p> <p>WARNING: The converter should not include the following edX fields as they may contain sensitive data: <code>username</code>, <code>referer</code>, <code>event</code>, <code>event_source</code>, <code>ip</code>, <code>agent</code>, <code>accept_language:</code>, <code>context.course_user_tags</code>.</p> Source code in <code>ralph/models/edx/converters/xapi/base.py</code> <pre><code>class BaseXapiConverter(BaseConversionSet):\n\"\"\"Base xAPI Converter.\n\n    WARNING: The converter may not include the following edX fields:\n    - context.org_id: When `org_id` is an empty string.\n    - context.course_id: When `course_id` is an empty string.\n\n    WARNING: The converter should not include the following edX fields as they may\n    contain sensitive data: `username`, `referer`, `event`, `event_source`, `ip`,\n    `agent`, `accept_language:`, `context.course_user_tags`.\n    \"\"\"\n\n    def __init__(self, uuid_namespace: str, platform_url: str):\n\"\"\"Initializes BaseXapiConverter.\"\"\"\n        self.platform_url = platform_url\n        try:\n            self.uuid_namespace = UUID(uuid_namespace)\n        except (TypeError, ValueError, AttributeError) as err:\n            raise ConfigurationException(\"Invalid UUID namespace\") from err\n        super().__init__()\n\n    def _get_conversion_items(self):\n\"\"\"Returns a set of ConversionItems used for conversion.\"\"\"\n        return {\n            ConversionItem(\n                \"id\",\n                None,\n                lambda event_str: str(uuid5(self.uuid_namespace, event_str)),\n                True,\n            ),\n            ConversionItem(\n                \"actor__account__homePage\", transformers=lambda _: self.platform_url\n            ),\n            ConversionItem(\n                \"actor__account__name\",\n                \"context__user_id\",\n                lambda user_id: str(user_id) if user_id else \"anonymous\",\n            ),\n            ConversionItem(\n                \"object__definition__extensions__\" + EXTENSION_SCHOOL_ID,\n                \"context__org_id\",\n            ),\n            ConversionItem(\n                \"object__definition__extensions__\" + EXTENSION_COURSE_ID,\n                \"context__course_id\",\n                (self.parse_course_id, lambda x: x[\"course\"]),\n            ),\n            ConversionItem(\n                \"object__definition__extensions__\" + EXTENSION_MODULE_ID,\n                \"context__course_id\",\n                (self.parse_course_id, lambda x: x[\"module\"]),\n            ),\n            ConversionItem(\"timestamp\", \"time\"),\n        }\n\n    @staticmethod\n    def parse_course_id(course_id: str):\n\"\"\"Parses edX event's `context`.`course_id`.\n\n        Returns a dictionary with `course` and `module`.\n        \"\"\"\n        match = re.match(r\"^course-v1:.+\\+(.+)\\+(.+)$\", course_id)\n        if not match:\n            return {\"course\": None, \"module\": None}\n        return {\"course\": match.group(1), \"module\": match.group(2)}\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.converters.xapi.base.BaseXapiConverter.__init__","title":"<code>__init__(self, uuid_namespace, platform_url)</code>  <code>special</code>","text":"<p>Initializes BaseXapiConverter.</p> Source code in <code>ralph/models/edx/converters/xapi/base.py</code> <pre><code>def __init__(self, uuid_namespace: str, platform_url: str):\n\"\"\"Initializes BaseXapiConverter.\"\"\"\n    self.platform_url = platform_url\n    try:\n        self.uuid_namespace = UUID(uuid_namespace)\n    except (TypeError, ValueError, AttributeError) as err:\n        raise ConfigurationException(\"Invalid UUID namespace\") from err\n    super().__init__()\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.converters.xapi.base.BaseXapiConverter.parse_course_id","title":"<code>parse_course_id(course_id)</code>  <code>staticmethod</code>","text":"<p>Parses edX event\u2019s <code>context</code>.<code>course_id</code>.</p> <p>Returns a dictionary with <code>course</code> and <code>module</code>.</p> Source code in <code>ralph/models/edx/converters/xapi/base.py</code> <pre><code>@staticmethod\ndef parse_course_id(course_id: str):\n\"\"\"Parses edX event's `context`.`course_id`.\n\n    Returns a dictionary with `course` and `module`.\n    \"\"\"\n    match = re.match(r\"^course-v1:.+\\+(.+)\\+(.+)$\", course_id)\n    if not match:\n        return {\"course\": None, \"module\": None}\n    return {\"course\": match.group(1), \"module\": match.group(2)}\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.converters.xapi.navigational","title":"<code>navigational</code>","text":"<p>Navigational event xAPI Converter.</p>"},{"location":"models/edx/#ralph.models.edx.converters.xapi.navigational.UIPageCloseToPageTerminated","title":"<code> UIPageCloseToPageTerminated            (BaseXapiConverter)         </code>","text":"<p>Converts a common edX <code>page_close</code> event to xAPI.</p> <p>Example Statement: John terminated https://www.fun-mooc.fr/ page.</p> <p>WARNING: The converter does not use the <code>self.platform_url</code> in the <code>object__id</code> because the <code>platform_url</code> is present in the edX\u2019s event <code>page</code> field.</p> Source code in <code>ralph/models/edx/converters/xapi/navigational.py</code> <pre><code>class UIPageCloseToPageTerminated(BaseXapiConverter):\n\"\"\"Converts a common edX `page_close` event to xAPI.\n\n    Example Statement: John terminated https://www.fun-mooc.fr/ page.\n\n    WARNING: The converter does not use the `self.platform_url` in the `object__id`\n    because the `platform_url` is present in the edX's event `page` field.\n    \"\"\"\n\n    __src__ = UIPageClose\n    __dest__ = PageTerminated\n\n    def _get_conversion_items(self):\n\"\"\"Returns a set of ConversionItems used for conversion.\"\"\"\n        conversion_items = super()._get_conversion_items()\n        return conversion_items.union({ConversionItem(\"object__id\", \"page\")})\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.converters.xapi.navigational.UIPageCloseToPageTerminated.__dest__","title":"<code> __dest__            (BaseXapiModel)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for page terminated statement.</p> <p>Example: John terminated the https://www.fun-mooc.fr/ page.</p> <p>Attributes:</p> Name Type Description <code>object</code> <code>PageObjectField</code> <p>See PageObjectField.</p> <code>verb</code> <code>PageTerminatedVerbField</code> <p>See PageTerminatedVerbField.</p> Source code in <code>ralph/models/edx/converters/xapi/navigational.py</code> <pre><code>class PageTerminated(BaseXapiModel):\n\"\"\"Pydantic model for page terminated statement.\n\n    Example: John terminated the https://www.fun-mooc.fr/ page.\n\n    Attributes:\n       object (PageObjectField): See PageObjectField.\n       verb (PageTerminatedVerbField): See PageTerminatedVerbField.\n    \"\"\"\n\n    __selector__ = selector(\n        object__definition__type=\"http://activitystrea.ms/schema/1.0/page\",\n        verb__id=\"http://adlnet.gov/expapi/verbs/terminated\",\n    )\n\n    object: PageObjectField\n    verb: TerminatedVerbField = TerminatedVerbField()\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.converters.xapi.navigational.UIPageCloseToPageTerminated.__src__","title":"<code> __src__            (BaseBrowserModel)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>page_close</code> statement.</p> <p>The browser emits this statement when the user navigates to the next page or closes the browser window (when the JavaScript <code>window.onunload</code> event is called).</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>str</code> <p>Consists of the string value <code>{}</code>.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>page_close</code>.</p> <code>name</code> <code>str</code> <p>Consists of the value <code>page_close</code>.</p> Source code in <code>ralph/models/edx/converters/xapi/navigational.py</code> <pre><code>class UIPageClose(BaseBrowserModel):\n\"\"\"Pydantic model for `page_close` statement.\n\n    The browser emits this statement when the user navigates to the next page\n    or closes the browser window (when the JavaScript `window.onunload` event\n    is called).\n\n    Attributes:\n        event (str): Consists of the string value `{}`.\n        event_type (str): Consists of the value `page_close`.\n        name (str): Consists of the value `page_close`.\n    \"\"\"\n\n    __selector__ = selector(event_source=\"browser\", event_type=\"page_close\")\n\n    # pylint: disable=unsubscriptable-object\n    event: Literal[\"{}\"]\n    event_type: Literal[\"page_close\"]\n    name: Literal[\"page_close\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.converters.xapi.server","title":"<code>server</code>","text":"<p>Server event xAPI Converter.</p>"},{"location":"models/edx/#ralph.models.edx.converters.xapi.server.ServerEventToPageViewed","title":"<code> ServerEventToPageViewed            (BaseXapiConverter)         </code>","text":"<p>Converts a common edX server event to xAPI.</p> <p>Example Statement: John viewed https://www.fun-mooc.fr/ page.</p> Source code in <code>ralph/models/edx/converters/xapi/server.py</code> <pre><code>class ServerEventToPageViewed(BaseXapiConverter):\n\"\"\"Converts a common edX server event to xAPI.\n\n    Example Statement: John viewed https://www.fun-mooc.fr/ page.\n    \"\"\"\n\n    __src__ = Server\n    __dest__ = PageViewed\n\n    def _get_conversion_items(self):\n\"\"\"Returns a set of ConversionItems used for conversion.\"\"\"\n        conversion_items = super()._get_conversion_items()\n        return conversion_items.union(\n            {\n                ConversionItem(\n                    \"object__id\",\n                    \"event_type\",\n                    lambda event_type: self.platform_url + event_type,\n                ),\n            }\n        )\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.converters.xapi.server.ServerEventToPageViewed.__dest__","title":"<code> __dest__            (BaseXapiModel)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for page viewed statement.</p> <p>Example: John viewed the https://www.fun-mooc.fr/ page.</p> <p>Attributes:</p> Name Type Description <code>object</code> <code>PageObjectField</code> <p>See PageObjectField.</p> <code>verb</code> <code>PageViewedVerbField</code> <p>See PageViewedVerbField.</p> Source code in <code>ralph/models/edx/converters/xapi/server.py</code> <pre><code>class PageViewed(BaseXapiModel):\n\"\"\"Pydantic model for page viewed statement.\n\n    Example: John viewed the https://www.fun-mooc.fr/ page.\n\n    Attributes:\n       object (PageObjectField): See PageObjectField.\n       verb (PageViewedVerbField): See PageViewedVerbField.\n    \"\"\"\n\n    __selector__ = selector(\n        object__definition__type=\"http://activitystrea.ms/schema/1.0/page\",\n        verb__id=\"http://id.tincanapi.com/verb/viewed\",\n    )\n\n    object: PageObjectField\n    verb: ViewedVerbField = ViewedVerbField()\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.converters.xapi.server.ServerEventToPageViewed.__src__","title":"<code> __src__            (BaseServerModel)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for common server statement.</p> <p>This type of event is triggered from the django middleware on each request excluding: <code>/event</code>, <code>login</code>, <code>heartbeat</code>, <code>/segmentio/event</code> and <code>/performance</code>.</p> <p>Attributes:</p> Name Type Description <code>event_type</code> <code>str</code> <p>Consist of the relative URL (without the hostname) of the requested page. Retrieved with:     <code>request.META['PATH_INFO']</code></p> <code>event</code> <code>str</code> <p>Consist of a JSON string holding the content of the GET or POST request. Retrieved with:     <code>json.dumps(         {             'GET': dict(request.GET),             'POST': dict(request.POST)         }     )[:512]</code> Note:     Values for [\u2018password\u2019, \u2018newpassword\u2019, \u2018new_password\u2019, \u2018oldpassword\u2019,     \u2018old_password\u2019, \u2018new_password1\u2019, \u2018new_password2\u2019] are replaced by     <code>********</code>.     The JSON string is truncated at 512 characters resulting in invalid     JSON.</p> Source code in <code>ralph/models/edx/converters/xapi/server.py</code> <pre><code>class Server(BaseServerModel):\n\"\"\"Pydantic model for common server statement.\n\n    This type of event is triggered from the django middleware on each request\n    excluding: `/event`, `login`, `heartbeat`, `/segmentio/event` and `/performance`.\n\n    Attributes:\n        event_type (str): Consist of the relative URL (without the hostname) of the\n            requested page.\n            Retrieved with:\n                `request.META['PATH_INFO']`\n        event (str): Consist of a JSON string holding the content of the GET or POST\n            request.\n            Retrieved with:\n                ```json.dumps(\n                    {\n                        'GET': dict(request.GET),\n                        'POST': dict(request.POST)\n                    }\n                )[:512]```\n            Note:\n                Values for ['password', 'newpassword', 'new_password', 'oldpassword',\n                'old_password', 'new_password1', 'new_password2'] are replaced by\n                `********`.\n                The JSON string is truncated at 512 characters resulting in invalid\n                JSON.\n    \"\"\"\n\n    __selector__ = selector(\n        event_source=\"server\", event_type=LazyModelField(\"context__path\")\n    )\n\n    # pylint: disable=unsubscriptable-object\n    event_type: Path\n    event: Union[Json[ServerEventField], ServerEventField]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.converters.xapi.video","title":"<code>video</code>","text":"<p>Video event xAPI Converter.</p>"},{"location":"models/edx/#ralph.models.edx.converters.xapi.video.UILoadVideoToVideoInitialized","title":"<code> UILoadVideoToVideoInitialized            (VideoBaseXapiConverter)         </code>","text":"<p>Converts a common edX <code>load_video</code> event to xAPI.</p> Source code in <code>ralph/models/edx/converters/xapi/video.py</code> <pre><code>class UILoadVideoToVideoInitialized(VideoBaseXapiConverter):\n\"\"\"Converts a common edX `load_video` event to xAPI.\"\"\"\n\n    __src__ = UILoadVideo\n    __dest__ = VideoInitialized\n\n    def _get_conversion_items(self):\n\"\"\"Returns a set of ConversionItems used for conversion.\"\"\"\n        conversion_items = super()._get_conversion_items()\n        return conversion_items.union(\n            {\n                ConversionItem(\n                    \"context__extensions__\" + VIDEO_EXTENSION_LENGTH,\n                    None,\n                    # Set the video length to null by default.\n                    # This information is mandatory in the xAPI template\n                    # and does not exist in the edX `load_video` event model.\n                    lambda _: 0.0,\n                ),\n                ConversionItem(\n                    \"context__extensions__\" + VIDEO_EXTENSION_SESSION_ID,\n                    \"session\",\n                ),\n                ConversionItem(\n                    \"context__extensions__\" + VIDEO_EXTENSION_USER_AGENT, \"agent\"\n                ),\n            },\n        )\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.converters.xapi.video.UILoadVideoToVideoInitialized.__dest__","title":"<code> __dest__            (BaseVideoStatement)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for video initialized statement.</p> <p>Example: A video has been fully initialized.</p> <p>Attributes:</p> Name Type Description <code>verb</code> <code>dict</code> <p>See VideoInitializedVerbField.</p> <code>context</code> <code>dict</code> <p>See VideoInitializedContextField.</p> Source code in <code>ralph/models/edx/converters/xapi/video.py</code> <pre><code>class VideoInitialized(BaseVideoStatement):\n\"\"\"Pydantic model for video initialized statement.\n\n    Example: A video has been fully initialized.\n\n    Attributes:\n        verb (dict): See VideoInitializedVerbField.\n        context (dict): See VideoInitializedContextField.\n    \"\"\"\n\n    __selector__ = selector(\n        object__definition__type=\"https://w3id.org/xapi/video/activity-type/video\",\n        verb__id=\"http://adlnet.gov/expapi/verbs/initialized\",\n    )\n\n    verb: VideoInitializedVerbField = VideoInitializedVerbField()\n    context: VideoInitializedContextField\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.converters.xapi.video.UILoadVideoToVideoInitialized.__src__","title":"<code> __src__            (BaseBrowserModel)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>load_video</code> statement.</p> <p>The browser emits this statement when the video is fully rendered and ready to play.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>VideoBaseEventField</code> <p>See VideoBaseEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>load_video</code>.</p> <code>name</code> <code>str</code> <p>Consists either of the value <code>load_video</code> or <code>edx.video.loaded</code>.</p> Source code in <code>ralph/models/edx/converters/xapi/video.py</code> <pre><code>class UILoadVideo(BaseBrowserModel):\n\"\"\"Pydantic model for `load_video` statement.\n\n    The browser emits this statement when the video is fully rendered and ready to\n    play.\n\n    Attributes:\n        event (VideoBaseEventField): See VideoBaseEventField.\n        event_type (str): Consists of the value `load_video`.\n        name (str): Consists either of the value `load_video` or `edx.video.loaded`.\n    \"\"\"\n\n    __selector__ = selector(event_source=\"browser\", event_type=\"load_video\")\n\n    event: Union[\n        Json[VideoBaseEventField],  # pylint: disable=unsubscriptable-object\n        VideoBaseEventField,\n    ]\n    event_type: Literal[\"load_video\"]\n    name: Literal[\"load_video\", \"edx.video.loaded\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.converters.xapi.video.UIPauseVideoToVideoPaused","title":"<code> UIPauseVideoToVideoPaused            (VideoBaseXapiConverter)         </code>","text":"<p>Converts a common edX <code>pause_video</code> event to xAPI.</p> Source code in <code>ralph/models/edx/converters/xapi/video.py</code> <pre><code>class UIPauseVideoToVideoPaused(VideoBaseXapiConverter):\n\"\"\"Converts a common edX `pause_video` event to xAPI.\"\"\"\n\n    __src__ = UIPauseVideo\n    __dest__ = VideoPaused\n\n    def _get_conversion_items(self):\n\"\"\"Returns a set of ConversionItems used for conversion.\"\"\"\n        conversion_items = super()._get_conversion_items()\n        return conversion_items.union(\n            {\n                ConversionItem(\n                    \"result__extensions__\" + VIDEO_EXTENSION_TIME,\n                    \"event__currentTime\",\n                ),\n                ConversionItem(\n                    \"context__extensions__\" + VIDEO_EXTENSION_LENGTH,\n                    None,\n                    # Set the video length to null by default.\n                    # This information is mandatory in the xAPI template\n                    # and does not exist in the edX `pause_video` event model.\n                    lambda _: 0.0,\n                ),\n                ConversionItem(\n                    \"context__extensions__\" + VIDEO_EXTENSION_SESSION_ID,\n                    \"session\",\n                ),\n            },\n        )\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.converters.xapi.video.UIPauseVideoToVideoPaused.__dest__","title":"<code> __dest__            (BaseVideoStatement)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for video paused statement.</p> <p>Example: John paused the video or clicked the pause button.</p> <p>Attributes:</p> Name Type Description <code>verb</code> <code>dict</code> <p>See VideoPausedVerbField.</p> <code>result</code> <code>dict</code> <p>See VideoPausedResultField.</p> <code>context</code> <code>dict</code> <p>See VideoPausedContextField.</p> Source code in <code>ralph/models/edx/converters/xapi/video.py</code> <pre><code>class VideoPaused(BaseVideoStatement):\n\"\"\"Pydantic model for video paused statement.\n\n    Example: John paused the video or clicked the pause button.\n\n    Attributes:\n        verb (dict): See VideoPausedVerbField.\n        result (dict): See VideoPausedResultField.\n        context (dict): See VideoPausedContextField.\n    \"\"\"\n\n    __selector__ = selector(\n        object__definition__type=\"https://w3id.org/xapi/video/activity-type/video\",\n        verb__id=\"https://w3id.org/xapi/video/verbs/paused\",\n    )\n\n    verb: VideoPausedVerbField = VideoPausedVerbField()\n    result: VideoPausedResultField\n    context: VideoPausedContextField\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.converters.xapi.video.UIPauseVideoToVideoPaused.__src__","title":"<code> __src__            (BaseBrowserModel)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>pause_video</code> statement.</p> <p>The browser emits this statement when a user selects the video player\u2019s pause control.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>PauseVideoEventField</code> <p>See PauseVideoEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>pause_video</code>.</p> <code>name</code> <code>str</code> <p>Consists either of the value <code>pause_video</code> or <code>edx.video.paused</code>.</p> Source code in <code>ralph/models/edx/converters/xapi/video.py</code> <pre><code>class UIPauseVideo(BaseBrowserModel):\n\"\"\"Pydantic model for `pause_video` statement.\n\n    The browser emits this statement when a user selects the video player's pause\n    control.\n\n    Attributes:\n        event (PauseVideoEventField): See PauseVideoEventField.\n        event_type (str): Consists of the value `pause_video`.\n        name (str): Consists either of the value `pause_video` or `edx.video.paused`.\n    \"\"\"\n\n    __selector__ = selector(event_source=\"browser\", event_type=\"pause_video\")\n\n    event: Union[\n        Json[PauseVideoEventField],  # pylint: disable=unsubscriptable-object\n        PauseVideoEventField,\n    ]\n    event_type: Literal[\"pause_video\"]\n    name: Optional[Literal[\"pause_video\", \"edx.video.paused\"]]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.converters.xapi.video.UIPlayVideoToVideoPlayed","title":"<code> UIPlayVideoToVideoPlayed            (VideoBaseXapiConverter)         </code>","text":"<p>Converts a common edX <code>play_video</code> event to xAPI.</p> Source code in <code>ralph/models/edx/converters/xapi/video.py</code> <pre><code>class UIPlayVideoToVideoPlayed(VideoBaseXapiConverter):\n\"\"\"Converts a common edX `play_video` event to xAPI.\"\"\"\n\n    __src__ = UIPlayVideo\n    __dest__ = VideoPlayed\n\n    def _get_conversion_items(self):\n\"\"\"Returns a set of ConversionItems used for conversion.\"\"\"\n        conversion_items = super()._get_conversion_items()\n        return conversion_items.union(\n            {\n                ConversionItem(\n                    \"result__extensions__\" + VIDEO_EXTENSION_TIME,\n                    \"event__currentTime\",\n                ),\n                ConversionItem(\n                    \"context__extensions__\" + VIDEO_EXTENSION_SESSION_ID,\n                    \"session\",\n                ),\n            },\n        )\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.converters.xapi.video.UIPlayVideoToVideoPlayed.__dest__","title":"<code> __dest__            (BaseVideoStatement)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for video played statement.</p> <p>Example: John played the video or clicked the play button.</p> <p>Attributes:</p> Name Type Description <code>verb</code> <code>dict</code> <p>See VideoPlayedVerbField.</p> <code>result</code> <code>dict</code> <p>See VideoPlayedResultField.</p> <code>context</code> <code>dict</code> <p>See VideoPlayedContextField.</p> Source code in <code>ralph/models/edx/converters/xapi/video.py</code> <pre><code>class VideoPlayed(BaseVideoStatement):\n\"\"\"Pydantic model for video played statement.\n\n    Example: John played the video or clicked the play button.\n\n    Attributes:\n        verb (dict): See VideoPlayedVerbField.\n        result (dict): See VideoPlayedResultField.\n        context (dict): See VideoPlayedContextField.\n    \"\"\"\n\n    __selector__ = selector(\n        object__definition__type=\"https://w3id.org/xapi/video/activity-type/video\",\n        verb__id=\"https://w3id.org/xapi/video/verbs/played\",\n    )\n\n    verb: VideoPlayedVerbField = VideoPlayedVerbField()\n    result: VideoPlayedResultField\n    context: Optional[VideoPlayedContextField]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.converters.xapi.video.UIPlayVideoToVideoPlayed.__src__","title":"<code> __src__            (BaseBrowserModel)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>play_video</code> statement.</p> <p>The browser emits this statement when a user selects the video player\u2019s play control.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>PlayVideoEventField</code> <p>See PlayVideoEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>play_video</code>.</p> <code>name</code> <code>str</code> <p>Consists either of the value <code>play_video</code> or <code>edx.video.played</code>.</p> Source code in <code>ralph/models/edx/converters/xapi/video.py</code> <pre><code>class UIPlayVideo(BaseBrowserModel):\n\"\"\"Pydantic model for `play_video` statement.\n\n    The browser emits this statement when a user selects the video player's play\n    control.\n\n    Attributes:\n        event (PlayVideoEventField): See PlayVideoEventField.\n        event_type (str): Consists of the value `play_video`.\n        name (str): Consists either of the value `play_video` or `edx.video.played`.\n    \"\"\"\n\n    __selector__ = selector(event_source=\"browser\", event_type=\"play_video\")\n\n    event: Union[\n        Json[PlayVideoEventField],  # pylint: disable=unsubscriptable-object\n        PlayVideoEventField,\n    ]\n    event_type: Literal[\"play_video\"]\n    name: Optional[Literal[\"play_video\", \"edx.video.played\"]]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.converters.xapi.video.UISeekVideoToVideoSeeked","title":"<code> UISeekVideoToVideoSeeked            (VideoBaseXapiConverter)         </code>","text":"<p>Converts a common edX <code>seek_video</code> event to xAPI.</p> Source code in <code>ralph/models/edx/converters/xapi/video.py</code> <pre><code>class UISeekVideoToVideoSeeked(VideoBaseXapiConverter):\n\"\"\"Converts a common edX `seek_video` event to xAPI.\"\"\"\n\n    __src__ = UISeekVideo\n    __dest__ = VideoSeeked\n\n    def _get_conversion_items(self):\n\"\"\"Returns a set of ConversionItems used for conversion.\"\"\"\n        conversion_items = super()._get_conversion_items()\n        return conversion_items.union(\n            {\n                ConversionItem(\n                    \"result__extensions__\" + VIDEO_EXTENSION_TIME_FROM,\n                    \"event__old_time\",\n                ),\n                ConversionItem(\n                    \"result__extensions__\" + VIDEO_EXTENSION_TIME_TO,\n                    \"event__new_time\",\n                ),\n                ConversionItem(\n                    \"context__extensions__\" + VIDEO_EXTENSION_SESSION_ID,\n                    \"session\",\n                ),\n            },\n        )\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.converters.xapi.video.UISeekVideoToVideoSeeked.__dest__","title":"<code> __dest__            (BaseVideoStatement)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for video seeked statement.</p> <p>!!! example \u201cJohn moved the progress bar forward or backward to a specific time in the\u201d     video.</p> <p>Attributes:</p> Name Type Description <code>verb</code> <code>dict</code> <p>See VideoSeekedVerbField.</p> <code>result</code> <code>dict</code> <p>See VideoSeekedResultField.</p> <code>context</code> <code>dict</code> <p>See VideoSeekedContextField.</p> Source code in <code>ralph/models/edx/converters/xapi/video.py</code> <pre><code>class VideoSeeked(BaseVideoStatement):\n\"\"\"Pydantic model for video seeked statement.\n\n    Example: John moved the progress bar forward or backward to a specific time in the\n        video.\n\n    Attributes:\n        verb (dict): See VideoSeekedVerbField.\n        result (dict): See VideoSeekedResultField.\n        context (dict): See VideoSeekedContextField.\n    \"\"\"\n\n    __selector__ = selector(\n        object__definition__type=\"https://w3id.org/xapi/video/activity-type/video\",\n        verb__id=\"https://w3id.org/xapi/video/verbs/seeked\",\n    )\n\n    verb: VideoSeekedVerbField = VideoSeekedVerbField()\n    result: VideoSeekedResultField\n    context: Optional[VideoSeekedContextField]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.converters.xapi.video.UISeekVideoToVideoSeeked.__src__","title":"<code> __src__            (BaseBrowserModel)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>seek_video</code> statement.</p> <p>The browser emits this statement when a user selects a user interface control to go to a different point in the video file.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>SeekVideoEventField</code> <p>See SeekVideoEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>seek_video</code>.</p> <code>name</code> <code>str</code> <p>Consists either of the value <code>seek_video</code> or <code>edx.video.position.changed</code>.</p> Source code in <code>ralph/models/edx/converters/xapi/video.py</code> <pre><code>class UISeekVideo(BaseBrowserModel):\n\"\"\"Pydantic model for `seek_video` statement.\n\n    The browser emits this statement when a user selects a user interface control to go\n    to a different point in the video file.\n\n    Attributes:\n        event (SeekVideoEventField): See SeekVideoEventField.\n        event_type (str): Consists of the value `seek_video`.\n        name (str): Consists either of the value `seek_video` or\n            `edx.video.position.changed`.\n    \"\"\"\n\n    __selector__ = selector(event_source=\"browser\", event_type=\"seek_video\")\n\n    event: Union[\n        Json[SeekVideoEventField],  # pylint: disable=unsubscriptable-object\n        SeekVideoEventField,\n    ]\n    event_type: Literal[\"seek_video\"]\n    name: Optional[Literal[\"seek_video\", \"edx.video.position.changed\"]]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.converters.xapi.video.UIStopVideoToVideoTerminated","title":"<code> UIStopVideoToVideoTerminated            (VideoBaseXapiConverter)         </code>","text":"<p>Converts a common edX <code>stop_video</code> event to xAPI.</p> Source code in <code>ralph/models/edx/converters/xapi/video.py</code> <pre><code>class UIStopVideoToVideoTerminated(VideoBaseXapiConverter):\n\"\"\"Converts a common edX `stop_video` event to xAPI.\"\"\"\n\n    __src__ = UIStopVideo\n    __dest__ = VideoTerminated\n\n    def _get_conversion_items(self):\n\"\"\"Returns a set of ConversionItems used for conversion.\"\"\"\n        conversion_items = super()._get_conversion_items()\n        return conversion_items.union(\n            {\n                ConversionItem(\n                    \"result__extensions__\" + VIDEO_EXTENSION_TIME,\n                    \"event__currentTime\",\n                ),\n                ConversionItem(\n                    \"result__extensions__\" + VIDEO_EXTENSION_PROGRESS,\n                    None,\n                    # Set the video progress to null by default.\n                    # This information is mandatory in the xAPI template\n                    # and does not exist in the edX `stop_video` event model.\n                    lambda _: 0.0,\n                ),\n                ConversionItem(\n                    \"context__extensions__\" + VIDEO_EXTENSION_LENGTH,\n                    None,\n                    # Set the video length to null by default.\n                    # This information is mandatory in the xAPI template\n                    # and does not exist in the edX `stop_video` event model.\n                    lambda _: 0.0,\n                ),\n                ConversionItem(\n                    \"context__extensions__\" + VIDEO_EXTENSION_SESSION_ID,\n                    \"session\",\n                ),\n            },\n        )\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.converters.xapi.video.UIStopVideoToVideoTerminated.__dest__","title":"<code> __dest__            (BaseVideoStatement)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for video terminated statement.</p> <p>Example: John ended a video (quit the player).</p> <p>Attributes:</p> Name Type Description <code>verb</code> <code>dict</code> <p>See VideoTerminatedVerbField.</p> <code>result</code> <code>dict</code> <p>See VideoTerminatedResultField.</p> <code>context</code> <code>dict</code> <p>See VideoTerminatedContextField.</p> Source code in <code>ralph/models/edx/converters/xapi/video.py</code> <pre><code>class VideoTerminated(BaseVideoStatement):\n\"\"\"Pydantic model for video terminated statement.\n\n    Example: John ended a video (quit the player).\n\n    Attributes:\n        verb (dict): See VideoTerminatedVerbField.\n        result (dict): See VideoTerminatedResultField.\n        context (dict): See VideoTerminatedContextField.\n    \"\"\"\n\n    __selector__ = selector(\n        object__definition__type=\"https://w3id.org/xapi/video/activity-type/video\",\n        verb__id=\"http://adlnet.gov/expapi/verbs/terminated\",\n    )\n\n    verb: VideoTerminatedVerbField = VideoTerminatedVerbField()\n    result: VideoTerminatedResultField\n    context: VideoTerminatedContextField\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.converters.xapi.video.UIStopVideoToVideoTerminated.__src__","title":"<code> __src__            (BaseBrowserModel)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>stop_video</code> statement.</p> <p>The browser emits this statement when the video player reaches the end of the video file and play automatically stops.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>StopVideoEventField</code> <p>See StopVideoEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>stop_video</code>.</p> <code>name</code> <code>str</code> <p>Consists either of the value <code>stop_video</code> or <code>edx.video.stopped</code>.</p> Source code in <code>ralph/models/edx/converters/xapi/video.py</code> <pre><code>class UIStopVideo(BaseBrowserModel):\n\"\"\"Pydantic model for `stop_video` statement.\n\n    The browser emits this statement when the video player reaches the end of the video\n    file and play automatically stops.\n\n    Attributes:\n        event (StopVideoEventField): See StopVideoEventField.\n        event_type (str): Consists of the value `stop_video`.\n        name (str): Consists either of the value `stop_video` or `edx.video.stopped`.\n    \"\"\"\n\n    __selector__ = selector(event_source=\"browser\", event_type=\"stop_video\")\n\n    event: Union[\n        Json[StopVideoEventField],  # pylint: disable=unsubscriptable-object\n        StopVideoEventField,\n    ]\n    event_type: Literal[\"stop_video\"]\n    name: Optional[Literal[\"stop_video\", \"edx.video.stopped\"]]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.converters.xapi.video.VideoBaseXapiConverter","title":"<code> VideoBaseXapiConverter            (BaseXapiConverter)         </code>","text":"<p>Base Video xAPI Converter.</p> Source code in <code>ralph/models/edx/converters/xapi/video.py</code> <pre><code>class VideoBaseXapiConverter(BaseXapiConverter):\n\"\"\"Base Video xAPI Converter.\"\"\"\n\n    def _get_conversion_items(self):\n\"\"\"Returns a set of ConversionItems used for conversion.\"\"\"\n        conversion_items = super()._get_conversion_items()\n        return conversion_items.union(\n            {\n                ConversionItem(\n                    \"object__definition__name\",\n                    \"event__id\",\n                    lambda id: {LANG_EN_US_DISPLAY.__args__[0]: id},\n                ),\n                ConversionItem(\n                    \"object__id\",\n                    None,\n                    lambda event: self.platform_url\n                    + \"/xblock/block-v1:\"\n                    + event[\"context\"][\"course_id\"]\n                    + \"-course-v1:+type@video+block@\"\n                    + event[\"event\"][\"id\"],\n                ),\n                ConversionItem(\n                    \"context__extensions__\" + VIDEO_EXTENSION_SESSION_ID,\n                    \"session\",\n                ),\n            },\n        )\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.enrollment","title":"<code>enrollment</code>  <code>special</code>","text":""},{"location":"models/edx/#ralph.models.edx.enrollment.fields","title":"<code>fields</code>  <code>special</code>","text":""},{"location":"models/edx/#ralph.models.edx.enrollment.fields.contexts","title":"<code>contexts</code>","text":"<p>Enrollment event models context fields definitions.</p>"},{"location":"models/edx/#ralph.models.edx.enrollment.fields.contexts.EdxCourseEnrollmentUpgradeClickedContextField","title":"<code> EdxCourseEnrollmentUpgradeClickedContextField            (BaseContextField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>edx.course.enrollment.upgrade_clicked</code>.<code>context</code> field.</p> <p>In addition to the common context member fields, this statement also comprises the <code>mode</code> context member field.</p> <p>Attributes:</p> Name Type Description <code>mode</code> <code>str</code> <p>Consists of either the <code>audit</code> or <code>honor</code> value. It identifies the enrollment mode when the user clicked Challenge Yourself.</p> Source code in <code>ralph/models/edx/enrollment/fields/contexts.py</code> <pre><code>class EdxCourseEnrollmentUpgradeClickedContextField(BaseContextField):\n\"\"\"Pydantic model for `edx.course.enrollment.upgrade_clicked`.`context` field.\n\n    In addition to the common context member fields, this statement also comprises the\n    `mode` context member field.\n\n    Attributes:\n        mode (str): Consists of either the `audit` or `honor` value. It identifies the\n            enrollment mode when the user clicked &lt;kbd&gt;Challenge Yourself&lt;/kbd&gt;.\n    \"\"\"\n\n    mode: Union[Literal[\"audit\"], Literal[\"honor\"]]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.enrollment.fields.contexts.EdxCourseEnrollmentUpgradeSucceededContextField","title":"<code> EdxCourseEnrollmentUpgradeSucceededContextField            (BaseContextField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>edx.course.enrollment.upgrade.succeeded</code>.<code>context</code> field.</p> <p>In addition to the common context member fields, this statement also comprises the <code>mode</code> context member field.</p> <p>Attributes:</p> Name Type Description <code>mode</code> <code>str</code> <p>Consists of the <code>verified</code> value.</p> Source code in <code>ralph/models/edx/enrollment/fields/contexts.py</code> <pre><code>class EdxCourseEnrollmentUpgradeSucceededContextField(BaseContextField):\n\"\"\"Pydantic model for `edx.course.enrollment.upgrade.succeeded`.`context` field.\n\n    In addition to the common context member fields, this statement also comprises the\n    `mode` context member field.\n\n    Attributes:\n        mode (str): Consists of the `verified` value.\n    \"\"\"\n\n    mode: Literal[\"verified\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.enrollment.fields.events","title":"<code>events</code>","text":"<p>Enrollment models event field definition.</p>"},{"location":"models/edx/#ralph.models.edx.enrollment.fields.events.EnrollmentEventField","title":"<code> EnrollmentEventField            (AbstractBaseEventField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for enrollment <code>event</code> field.</p> <p>Note: Only server enrollment statements require an <code>event</code> field.</p> <p>Attributes:</p> Name Type Description <code>course_id</code> <code>str</code> <p>Consists in the course in which the student was enrolled or unenrolled.</p> <code>mode</code> <code>str</code> <p>Takes either <code>audit</code>, <code>honor</code>, <code>professional</code> or <code>verified</code> value. It identifies the student\u2019s enrollment mode.</p> <code>user_id</code> <code>int</code> <p>Identifies the student who was enrolled or unenrolled.</p> Source code in <code>ralph/models/edx/enrollment/fields/events.py</code> <pre><code>class EnrollmentEventField(AbstractBaseEventField):\n\"\"\"Pydantic model for enrollment `event` field.\n\n    Note: Only server enrollment statements require an `event` field.\n\n    Attributes:\n        course_id (str): Consists in the course in which the student was enrolled or\n            unenrolled.\n        mode (str): Takes either `audit`, `honor`, `professional` or `verified` value.\n            It identifies the student\u2019s enrollment mode.\n        user_id (int): Identifies the student who was enrolled or unenrolled.\n    \"\"\"\n\n    course_id: str\n    mode: Union[\n        Literal[\"audit\"], Literal[\"honor\"], Literal[\"professional\"], Literal[\"verified\"]\n    ]\n    user_id: Union[int, Literal[\"\"], None]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.enrollment.statements","title":"<code>statements</code>","text":"<p>Enrollment event model definitions.</p>"},{"location":"models/edx/#ralph.models.edx.enrollment.statements.EdxCourseEnrollmentActivated","title":"<code> EdxCourseEnrollmentActivated            (BaseServerModel)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>edx.course.enrollment.activated</code> statement.</p> <p>The server emits this statement when a student enrolls in a course.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>EnrollmentEventField</code> <p>See EnrollmentEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>edx.course.enrollment.activated</code>.</p> <code>name</code> <code>str</code> <p>Consists of the value <code>edx.course.enrollment.activated</code>.</p> Source code in <code>ralph/models/edx/enrollment/statements.py</code> <pre><code>class EdxCourseEnrollmentActivated(BaseServerModel):\n\"\"\"Pydantic model for `edx.course.enrollment.activated` statement.\n\n    The server emits this statement when a student enrolls in a course.\n\n    Attributes:\n        event (EnrollmentEventField): See EnrollmentEventField.\n        event_type (str): Consists of the value `edx.course.enrollment.activated`.\n        name (str): Consists of the value `edx.course.enrollment.activated`.\n    \"\"\"\n\n    __selector__ = selector(\n        event_source=\"server\", event_type=\"edx.course.enrollment.activated\"\n    )\n\n    event: Union[\n        Json[EnrollmentEventField],  # pylint: disable=unsubscriptable-object\n        EnrollmentEventField,\n    ]\n    event_type: Literal[\"edx.course.enrollment.activated\"]\n    name: Literal[\"edx.course.enrollment.activated\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.enrollment.statements.EdxCourseEnrollmentDeactivated","title":"<code> EdxCourseEnrollmentDeactivated            (BaseServerModel)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>edx.course.enrollment.deactivated</code> statement.</p> <p>The server emits this statement when a student unenrolls from a course.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>EnrollmentEventField</code> <p>See EnrollmentEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>edx.course.enrollment.deactivated</code>.</p> <code>name</code> <code>str</code> <p>Consists of the value <code>edx.course.enrollment.deactivated</code>.</p> Source code in <code>ralph/models/edx/enrollment/statements.py</code> <pre><code>class EdxCourseEnrollmentDeactivated(BaseServerModel):\n\"\"\"Pydantic model for `edx.course.enrollment.deactivated` statement.\n\n    The server emits this statement when a student unenrolls from a course.\n\n    Attributes:\n        event (EnrollmentEventField): See EnrollmentEventField.\n        event_type (str): Consists of the value `edx.course.enrollment.deactivated`.\n        name (str): Consists of the value `edx.course.enrollment.deactivated`.\n    \"\"\"\n\n    __selector__ = selector(\n        event_source=\"server\", event_type=\"edx.course.enrollment.deactivated\"\n    )\n\n    event: Union[\n        Json[EnrollmentEventField],  # pylint: disable=unsubscriptable-object\n        EnrollmentEventField,\n    ]\n    event_type: Literal[\"edx.course.enrollment.deactivated\"]\n    name: Literal[\"edx.course.enrollment.deactivated\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.enrollment.statements.EdxCourseEnrollmentModeChanged","title":"<code> EdxCourseEnrollmentModeChanged            (BaseServerModel)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>edx.course.enrollment.mode_changed</code> statement.</p> <p>The server emits this statement when the process of changing a student\u2019s student_courseenrollment.mode to a different mode is complete.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>EnrollmentEventField</code> <p>See EnrollmentEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>edx.course.enrollment.mode_changed</code>.</p> <code>name</code> <code>str</code> <p>Consists of the value <code>edx.course.enrollment.mode_changed</code>.</p> Source code in <code>ralph/models/edx/enrollment/statements.py</code> <pre><code>class EdxCourseEnrollmentModeChanged(BaseServerModel):\n\"\"\"Pydantic model for `edx.course.enrollment.mode_changed` statement.\n\n    The server emits this statement when the process of changing a student\u2019s\n    student_courseenrollment.mode to a different mode is complete.\n\n    Attributes:\n        event (EnrollmentEventField): See EnrollmentEventField.\n        event_type (str): Consists of the value `edx.course.enrollment.mode_changed`.\n        name (str): Consists of the value `edx.course.enrollment.mode_changed`.\n    \"\"\"\n\n    __selector__ = selector(\n        event_source=\"server\", event_type=\"edx.course.enrollment.mode_changed\"\n    )\n\n    event: Union[\n        Json[EnrollmentEventField],  # pylint: disable=unsubscriptable-object\n        EnrollmentEventField,\n    ]\n    event_type: Literal[\"edx.course.enrollment.mode_changed\"]\n    name: Literal[\"edx.course.enrollment.mode_changed\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.enrollment.statements.EdxCourseEnrollmentUpgradeSucceeded","title":"<code> EdxCourseEnrollmentUpgradeSucceeded            (BaseServerModel)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>edx.course.enrollment.upgrade.succeeded</code> statement.</p> <p>The server emits this statement when the process of upgrading a student\u2019s student_courseenrollment.mode from <code>audit</code> or <code>honor</code> to <code>verified</code> is complete.</p> <p>Attributes:</p> Name Type Description <code>context</code> <code>EdxCourseEnrollmentUpgradeSucceededContextField</code> <p>See EdxCourseEnrollmentUpgradeSucceededContextField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>edx.course.enrollment.upgrade.succeeded</code>.</p> <code>name</code> <code>str</code> <p>Consists of the value <code>edx.course.enrollment.upgrade.succeeded</code>.</p> Source code in <code>ralph/models/edx/enrollment/statements.py</code> <pre><code>class EdxCourseEnrollmentUpgradeSucceeded(BaseServerModel):\n\"\"\"Pydantic model for `edx.course.enrollment.upgrade.succeeded` statement.\n\n    The server emits this statement when the process of upgrading a student\u2019s\n    student_courseenrollment.mode from `audit` or `honor` to `verified` is complete.\n\n    Attributes:\n        context (EdxCourseEnrollmentUpgradeSucceededContextField):\n            See EdxCourseEnrollmentUpgradeSucceededContextField.\n        event_type (str): Consists of the value\n            `edx.course.enrollment.upgrade.succeeded`.\n        name (str): Consists of the value `edx.course.enrollment.upgrade.succeeded`.\n    \"\"\"\n\n    __selector__ = selector(\n        event_source=\"server\", event_type=\"edx.course.enrollment.upgrade.succeeded\"\n    )\n\n    context: EdxCourseEnrollmentUpgradeSucceededContextField\n    event_type: Literal[\"edx.course.enrollment.upgrade.succeeded\"]\n    name: Literal[\"edx.course.enrollment.upgrade.succeeded\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.enrollment.statements.UIEdxCourseEnrollmentUpgradeClicked","title":"<code> UIEdxCourseEnrollmentUpgradeClicked            (BaseBrowserModel)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>edx.course.enrollment.upgrade_clicked</code> statement.</p> <p>The browser emits this statement when a student clicks ChallengeYourself option, and the process of upgrading the student_courseenrollment.mode for the student to <code>verified</code> begins.</p> <p>Attributes:</p> Name Type Description <code>context</code> <code>EdxCourseEnrollmentUpgradeClickedContextField</code> <p>See EdxCourseEnrollmentUpgradeClickedContextField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>edx.course.enrollment.upgrade_clicked</code>.</p> <code>name</code> <code>str</code> <p>Consists of the value <code>edx.course.enrollment.upgrade_clicked</code>.</p> Source code in <code>ralph/models/edx/enrollment/statements.py</code> <pre><code>class UIEdxCourseEnrollmentUpgradeClicked(BaseBrowserModel):\n\"\"\"Pydantic model for `edx.course.enrollment.upgrade_clicked` statement.\n\n    The browser emits this statement when a student clicks &lt;kbd&gt;ChallengeYourself&lt;/kbd&gt;\n    option, and the process of upgrading the student_courseenrollment.mode for the\n    student to `verified` begins.\n\n    Attributes:\n        context (EdxCourseEnrollmentUpgradeClickedContextField):\n            See EdxCourseEnrollmentUpgradeClickedContextField.\n        event_type (str): Consists of the value `edx.course.enrollment.upgrade_clicked`.\n        name (str): Consists of the value `edx.course.enrollment.upgrade_clicked`.\n    \"\"\"\n\n    __selector__ = selector(\n        event_source=\"browser\", event_type=\"edx.course.enrollment.upgrade_clicked\"\n    )\n\n    context: EdxCourseEnrollmentUpgradeClickedContextField\n    event_type: Literal[\"edx.course.enrollment.upgrade_clicked\"]\n    name: Literal[\"edx.course.enrollment.upgrade_clicked\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.navigational","title":"<code>navigational</code>  <code>special</code>","text":""},{"location":"models/edx/#ralph.models.edx.navigational.fields","title":"<code>fields</code>  <code>special</code>","text":""},{"location":"models/edx/#ralph.models.edx.navigational.fields.events","title":"<code>events</code>","text":"<p>Navigational event field definition.</p>"},{"location":"models/edx/#ralph.models.edx.navigational.fields.events.NavigationalEventField","title":"<code> NavigationalEventField            (AbstractBaseEventField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for navigational <code>event</code> field.</p> <p>Note: All navigational statements are emitted from the browser.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>str</code> <p>Consists of the edX ID of the sequence.</p> <code>old</code> <code>int</code> <p>For <code>seq_goto</code>, it consists of the index of the unit being jumped to. For <code>seq_next</code> and <code>seq_prev</code>, it consists of the index of the unit being navigated to.</p> <code>new</code> <code>int</code> <p>For <code>seq_goto</code>, it consists of the index of the unit being jumped from. For <code>seq_next</code> and <code>seq_prev</code>, it consists of the index of the unit being navigated away from.</p> Source code in <code>ralph/models/edx/navigational/fields/events.py</code> <pre><code>class NavigationalEventField(AbstractBaseEventField):\n\"\"\"Pydantic model for navigational `event` field.\n\n    Note: All navigational statements are emitted from the browser.\n\n    Attributes:\n        id (str): Consists of the edX ID of the sequence.\n        old (int): For `seq_goto`, it consists of the index of the unit being jumped to.\n            For `seq_next` and `seq_prev`, it consists of the index of the unit being\n            navigated to.\n        new (int): For `seq_goto`, it consists of the index of the unit being jumped\n            from. For `seq_next` and `seq_prev`, it consists of the index of the unit\n            being navigated away from.\n    \"\"\"\n\n    id: constr(\n        regex=(\n            r\"^block-v1:[^\\/+]+(\\/|\\+)[^\\/+]+(\\/|\\+)[^\\/?]+type\"  # noqa : F722\n            r\"@sequential\\+block@[a-f0-9]{32}$\"  # noqa : F722\n        )\n    )\n    new: int\n    old: int\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.navigational.statements","title":"<code>statements</code>","text":"<p>Navigational event model definitions.</p>"},{"location":"models/edx/#ralph.models.edx.navigational.statements.UIPageClose","title":"<code> UIPageClose            (BaseBrowserModel)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>page_close</code> statement.</p> <p>The browser emits this statement when the user navigates to the next page or closes the browser window (when the JavaScript <code>window.onunload</code> event is called).</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>str</code> <p>Consists of the string value <code>{}</code>.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>page_close</code>.</p> <code>name</code> <code>str</code> <p>Consists of the value <code>page_close</code>.</p> Source code in <code>ralph/models/edx/navigational/statements.py</code> <pre><code>class UIPageClose(BaseBrowserModel):\n\"\"\"Pydantic model for `page_close` statement.\n\n    The browser emits this statement when the user navigates to the next page\n    or closes the browser window (when the JavaScript `window.onunload` event\n    is called).\n\n    Attributes:\n        event (str): Consists of the string value `{}`.\n        event_type (str): Consists of the value `page_close`.\n        name (str): Consists of the value `page_close`.\n    \"\"\"\n\n    __selector__ = selector(event_source=\"browser\", event_type=\"page_close\")\n\n    # pylint: disable=unsubscriptable-object\n    event: Literal[\"{}\"]\n    event_type: Literal[\"page_close\"]\n    name: Literal[\"page_close\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.navigational.statements.UISeqGoto","title":"<code> UISeqGoto            (BaseBrowserModel)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>seq_goto</code> statement.</p> <p>The browser emits this statement when a user jumps between units in a sequence.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>obj</code> <p>Consists of member fields that identify specifics triggered event.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>seq_goto</code>.</p> <code>name</code> <code>str</code> <p>Consists of the value <code>seq_goto</code>.</p> Source code in <code>ralph/models/edx/navigational/statements.py</code> <pre><code>class UISeqGoto(BaseBrowserModel):\n\"\"\"Pydantic model for `seq_goto` statement.\n\n    The browser emits this statement when a user jumps between units in a sequence.\n\n    Attributes:\n        event (obj): Consists of member fields that identify specifics triggered event.\n        event_type (str): Consists of the value `seq_goto`.\n        name (str): Consists of the value `seq_goto`.\n    \"\"\"\n\n    __selector__ = selector(event_source=\"browser\", event_type=\"seq_goto\")\n\n    # pylint: disable=unsubscriptable-object\n    event: Union[Json[NavigationalEventField], NavigationalEventField]\n    event_type: Literal[\"seq_goto\"]\n    name: Literal[\"seq_goto\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.navigational.statements.UISeqNext","title":"<code> UISeqNext            (BaseBrowserModel)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>seq_next</code> statement.</p> <p>The browser emits this statement when a user navigates to the next unit in a sequence.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>obj</code> <p>Consists of member fields that identify specifics triggered event.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>seq_next</code>.</p> <code>name</code> <code>str</code> <p>Consists of the value <code>seq_next</code>.</p> Source code in <code>ralph/models/edx/navigational/statements.py</code> <pre><code>class UISeqNext(BaseBrowserModel):\n\"\"\"Pydantic model for `seq_next` statement.\n\n    The browser emits this statement when a user navigates to the next unit in a\n    sequence.\n\n    Attributes:\n        event (obj): Consists of member fields that identify specifics triggered event.\n        event_type (str): Consists of the value `seq_next`.\n        name (str): Consists of the value `seq_next`.\n    \"\"\"\n\n    __selector__ = selector(event_source=\"browser\", event_type=\"seq_next\")\n\n    # pylint: disable=unsubscriptable-object\n    event: Union[Json[NavigationalEventField], NavigationalEventField]\n    event_type: Literal[\"seq_next\"]\n    name: Literal[\"seq_next\"]\n\n    @validator(\"event\")\n    @classmethod\n    def validate_next_jump_event_field(cls, value):\n\"\"\"Checks that event.new is equal to event.old + 1.\"\"\"\n        if value.new != value.old + 1:\n            raise ValueError(\"event.new - event.old should be equal to 1\")\n\n        return value\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.navigational.statements.UISeqNext.validate_next_jump_event_field","title":"<code>validate_next_jump_event_field(value)</code>  <code>classmethod</code>","text":"<p>Checks that event.new is equal to event.old + 1.</p> Source code in <code>ralph/models/edx/navigational/statements.py</code> <pre><code>@validator(\"event\")\n@classmethod\ndef validate_next_jump_event_field(cls, value):\n\"\"\"Checks that event.new is equal to event.old + 1.\"\"\"\n    if value.new != value.old + 1:\n        raise ValueError(\"event.new - event.old should be equal to 1\")\n\n    return value\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.navigational.statements.UISeqPrev","title":"<code> UISeqPrev            (BaseBrowserModel)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>seq_prev</code> statement.</p> <p>The browser emits this statement when a user navigates to the previous unit in a sequence.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>obj</code> <p>Consists of member fields that identify specifics triggered event.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>seq_prev</code>.</p> <code>name</code> <code>str</code> <p>Consists of the value <code>seq_prev</code>.</p> Source code in <code>ralph/models/edx/navigational/statements.py</code> <pre><code>class UISeqPrev(BaseBrowserModel):\n\"\"\"Pydantic model for `seq_prev` statement.\n\n    The browser emits this statement when a user navigates to the previous unit in a\n    sequence.\n\n    Attributes:\n        event (obj): Consists of member fields that identify specifics triggered event.\n        event_type (str): Consists of the value `seq_prev`.\n        name (str): Consists of the value `seq_prev`.\n\n    \"\"\"\n\n    __selector__ = selector(event_source=\"browser\", event_type=\"seq_prev\")\n\n    # pylint: disable=unsubscriptable-object\n    event: Union[Json[NavigationalEventField], NavigationalEventField]\n    event_type: Literal[\"seq_prev\"]\n    name: Literal[\"seq_prev\"]\n\n    @validator(\"event\")\n    @classmethod\n    def validate_prev_jump_event_field(cls, value):\n\"\"\"Checks that event.new is equal to event.old - 1.\"\"\"\n        if value.new != value.old - 1:\n            raise ValueError(\"event.old - event.new should be equal to 1\")\n\n        return value\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.navigational.statements.UISeqPrev.validate_prev_jump_event_field","title":"<code>validate_prev_jump_event_field(value)</code>  <code>classmethod</code>","text":"<p>Checks that event.new is equal to event.old - 1.</p> Source code in <code>ralph/models/edx/navigational/statements.py</code> <pre><code>@validator(\"event\")\n@classmethod\ndef validate_prev_jump_event_field(cls, value):\n\"\"\"Checks that event.new is equal to event.old - 1.\"\"\"\n    if value.new != value.old - 1:\n        raise ValueError(\"event.old - event.new should be equal to 1\")\n\n    return value\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.problem_interaction","title":"<code>problem_interaction</code>  <code>special</code>","text":""},{"location":"models/edx/#ralph.models.edx.problem_interaction.fields","title":"<code>fields</code>  <code>special</code>","text":""},{"location":"models/edx/#ralph.models.edx.problem_interaction.fields.events","title":"<code>events</code>","text":"<p>Problem interaction events model event fields definitions.</p>"},{"location":"models/edx/#ralph.models.edx.problem_interaction.fields.events.CorrectMap","title":"<code> CorrectMap            (BaseModelWithConfig)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for problem interaction <code>event</code>.<code>correct_map</code> field.</p> <p>Attributes:</p> Name Type Description <code>answervariable</code> <code>str</code> <p>Consists of the variable chosen in answer in the case of optionresponse provided with variables.</p> <code>correctness</code> <code>str</code> <p>Consists either of the <code>correct</code> or <code>incorrect</code> value.</p> <code>hint</code> <code>str</code> <p>Consists of optional hint.</p> <code>hint_mode</code> <code>str</code> <p>Consists either of the value <code>on_request</code> or <code>always</code> value.</p> <code>msg</code> <code>str</code> <p>Consists of extra message response.</p> <code>npoints</code> <code>int</code> <p>Consists of awarded points.</p> <code>queuestate</code> <code>json</code> <p>see QueueStateField.</p> Source code in <code>ralph/models/edx/problem_interaction/fields/events.py</code> <pre><code>class CorrectMap(BaseModelWithConfig):\n\"\"\"Pydantic model for problem interaction `event`.`correct_map` field.\n\n    Attributes:\n        answervariable (str): Consists of the variable chosen in answer in the case of\n            optionresponse provided with variables.\n        correctness (str): Consists either of the `correct` or `incorrect` value.\n        hint (str): Consists of optional hint.\n        hint_mode (str): Consists either of the value `on_request` or `always` value.\n        msg (str): Consists of extra message response.\n        npoints (int): Consists of awarded points.\n        queuestate (json): see QueueStateField.\n    \"\"\"\n\n    answervariable: Union[Literal[None], None, str]\n    correctness: Union[Literal[\"correct\"], Literal[\"incorrect\"]]\n    hint: Optional[str]\n    hintmode: Optional[Union[Literal[\"on_request\"], Literal[\"always\"]]]\n    msg: str\n    npoints: Optional[int]\n    queuestate: Optional[QueueState]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.problem_interaction.fields.events.EdxProblemHintDemandhintDisplayedEventField","title":"<code> EdxProblemHintDemandhintDisplayedEventField            (AbstractBaseEventField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>edx.problem.hint.demandhint_displayed</code>.<code>event</code> field.</p> <p>Attributes:</p> Name Type Description <code>hint_index</code> <code>int</code> <p>Consists of the identifier for the hint that was displayed to the user.</p> <code>hint_len</code> <code>int</code> <p>Consists of the total number of hints defined for this problem.</p> <code>hint_text</code> <code>str</code> <p>Consists of the text of the hint that was displayed to the user.</p> <code>module_id</code> <code>str</code> <p>Consists of the identifier for the problem component for which the user requested the hint.</p> Source code in <code>ralph/models/edx/problem_interaction/fields/events.py</code> <pre><code>class EdxProblemHintDemandhintDisplayedEventField(AbstractBaseEventField):\n\"\"\"Pydantic model for `edx.problem.hint.demandhint_displayed`.`event` field.\n\n    Attributes:\n        hint_index (int): Consists of the identifier for the hint that was displayed to\n            the user.\n        hint_len (int): Consists of the total number of hints defined for this problem.\n        hint_text (str): Consists of the text of the hint that was displayed to the\n            user.\n        module_id (str): Consists of the identifier for the problem component for which\n            the user requested the hint.\n    \"\"\"\n\n    hint_index: int\n    hint_len: int\n    hint_text: str\n    module_id: str\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.problem_interaction.fields.events.EdxProblemHintFeedbackDisplayedEventField","title":"<code> EdxProblemHintFeedbackDisplayedEventField            (AbstractBaseEventField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>edx.problem.hint.feedback_displayed</code>.<code>event</code> field.</p> <p>Attributes:</p> Name Type Description <code>choice_all</code> <code>list</code> <p>Lists all of the answer choices for problems with multiple possible answers defined.</p> <code>correctness</code> <code>bool</code> <p><code>True</code> if the <code>student_answer</code> value is correct, else <code>False</code>.</p> <code>hint_label</code> <code>str</code> <p>Consists of the feedback message given for the answer correctness.</p> <code>hints</code> <code>list</code> <p>Consists of a text member field with the given feedback string.</p> <code>module_id</code> <code>str</code> <p>Consists of the identifier for the problem component for which the user received the feedback.</p> <code>problem_part_id</code> <code>str</code> <p>Consists of the specific problem for which the user received feedback.</p> <code>question_type</code> <code>str</code> <p>Consists of the XML tag that identifies the problem type.</p> <code>student_answer</code> <code>list</code> <p>Consists of the answer value(s) selected or supplied by the user.</p> <code>trigger_type</code> <code>str</code> <p>Identifies the type of feedback obtained by the <code>student_answer</code> response. Consists either of <code>single</code> or <code>compound</code> value.</p> Source code in <code>ralph/models/edx/problem_interaction/fields/events.py</code> <pre><code>class EdxProblemHintFeedbackDisplayedEventField(AbstractBaseEventField):\n\"\"\"Pydantic model for `edx.problem.hint.feedback_displayed`.`event` field.\n\n    Attributes:\n        choice_all (list): Lists all of the answer choices for problems with multiple\n            possible answers defined.\n        correctness (bool): `True` if the `student_answer` value is correct, else\n            `False`.\n        hint_label (str): Consists of the feedback message given for the answer\n            correctness.\n        hints (list): Consists of a text member field with the given feedback string.\n        module_id (str): Consists of the identifier for the problem component for which\n            the user received the feedback.\n        problem_part_id (str): Consists of the specific problem for which the user\n            received feedback.\n        question_type (str): Consists of the XML tag that identifies the problem type.\n        student_answer (list): Consists of the answer value(s) selected or supplied by\n            the user.\n        trigger_type (str): Identifies the type of feedback obtained by the\n            `student_answer` response. Consists either of `single` or `compound` value.\n    \"\"\"\n\n    choice_all: Optional[List[str]]\n    correctness: bool\n    hint_label: str\n    hints: List[dict]\n    module_id: str\n    problem_part_id: str\n    question_type: Union[\n        Literal[\"stringresponse\"],\n        Literal[\"choiceresponse\"],\n        Literal[\"multiplechoiceresponse\"],\n        Literal[\"numericalresponse\"],\n        Literal[\"optionresponse\"],\n    ]\n    student_answer: List[str]\n    trigger_type: Union[Literal[\"single\"], Literal[\"compound\"]]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.problem_interaction.fields.events.ProblemCheckEventField","title":"<code> ProblemCheckEventField            (AbstractBaseEventField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>problem_check</code>.<code>event</code> field.</p> <p>Attributes:</p> Name Type Description <code>answers</code> <code>dict</code> <p>Consists of a dictionary of problem ID and the corresponding internal answer identifier for each problem.</p> <code>attempts</code> <code>int</code> <p>Consists of the number of times the user attempted to answer the problem.</p> <code>correct_map</code> <code>dict</code> <p>Consists of the evaluation data for each answer.</p> <code>grade</code> <code>int</code> <p>Consists of the current grade value.</p> <code>max_grade</code> <code>int</code> <p>Consists of the maximum possible grade value.</p> <code>problem_id</code> <code>str</code> <p>Consists of the ID of the problem that was checked.</p> <code>state</code> <code>json</code> <p>Consists of the current problem state.</p> <code>submission</code> <code>dict</code> <p>Consists of a dictionnary of data about the given answer.</p> <code>success</code> <code>str</code> <p>Consists of either the <code>correct</code> or <code>incorrect</code> value.</p> Source code in <code>ralph/models/edx/problem_interaction/fields/events.py</code> <pre><code>class ProblemCheckEventField(AbstractBaseEventField):\n\"\"\"Pydantic model for `problem_check`.`event` field.\n\n    Attributes:\n        answers (dict): Consists of a dictionary of problem ID and the corresponding\n            internal answer identifier for each problem.\n        attempts (int): Consists of the number of times the user attempted to answer\n            the problem.\n        correct_map (dict): Consists of the evaluation data for each answer.\n        grade (int): Consists of the current grade value.\n        max_grade (int): Consists of the maximum possible grade value.\n        problem_id (str): Consists of the ID of the problem that was checked.\n        state (json): Consists of the current problem state.\n        submission (dict): Consists of a dictionnary of data about the given answer.\n        success (str): Consists of either the `correct` or `incorrect` value.\n    \"\"\"\n\n    answers: Dict[\n        constr(regex=r\"^[a-f0-9]{32}_[0-9]_[0-9]$\"),  # noqa : F722\n        Union[List[str], str],\n    ]\n    attempts: int\n    correct_map: Dict[\n        constr(regex=r\"^[a-f0-9]{32}_[0-9]_[0-9]$\"),  # noqa : F722\n        CorrectMap,\n    ]\n    grade: int\n    max_grade: int\n    problem_id: constr(\n        regex=r\"^block-v1:[^\\/+]+(\\/|\\+)[^\\/+]+(\\/|\\+)[^\\/?]+\"  # noqa : F722\n        r\"type@problem\\+block@[a-f0-9]{32}$\"  # noqa : F722\n    )\n    state: State\n    submission: Dict[\n        constr(regex=r\"^[a-f0-9]{32}_[0-9]_[0-9]$\"),  # noqa : F722\n        SubmissionAnswerField,\n    ]\n    success: Union[Literal[\"correct\"], Literal[\"incorrect\"]]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.problem_interaction.fields.events.ProblemCheckFailEventField","title":"<code> ProblemCheckFailEventField            (AbstractBaseEventField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>problem_check_fail</code>.<code>event</code> field.</p> <p>Attributes:</p> Name Type Description <code>answers</code> <code>dict</code> <p>Consists of a dictionary of problem ID and the internal answer identifier for each problem.</p> <code>failure</code> <code>str</code> <p>Consists either of the <code>closed</code> or <code>unreset</code> value.</p> <code>problem_id</code> <code>str</code> <p>Consists of the ID of the problem that was checked.</p> <code>state</code> <code>dict</code> <p>Consists of the current problem state.</p> Source code in <code>ralph/models/edx/problem_interaction/fields/events.py</code> <pre><code>class ProblemCheckFailEventField(AbstractBaseEventField):\n\"\"\"Pydantic model for `problem_check_fail`.`event` field.\n\n    Attributes:\n        answers (dict): Consists of a dictionary of problem ID and the internal answer\n            identifier for each problem.\n        failure (str): Consists either of the `closed` or `unreset` value.\n        problem_id (str): Consists of the ID of the problem that was checked.\n        state (dict): Consists of the current problem state.\n    \"\"\"\n\n    answers: Dict[\n        constr(regex=r\"^[a-f0-9]{32}_[0-9]_[0-9]$\"),  # noqa : F722\n        Union[List[str], str],\n    ]\n    failure: Union[Literal[\"closed\"], Literal[\"unreset\"]]\n    problem_id: constr(\n        regex=r\"^block-v1:[^\\/+]+(\\/|\\+)[^\\/+]+(\\/|\\+)[^\\/?]+\"  # noqa : F722\n        r\"type@problem\\+block@[a-f0-9]{32}$\"  # noqa : F722\n    )\n    state: State\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.problem_interaction.fields.events.ProblemRescoreEventField","title":"<code> ProblemRescoreEventField            (AbstractBaseEventField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>problem_rescore</code>.<code>event</code> field.</p> <p>Attributes:</p> Name Type Description <code>attempts</code> <code>int</code> <p>Consists of the number of attempts of rescoring.</p> <code>correct_map</code> <code>json</code> <p>see CorrectMapSubFields.</p> <code>new_score</code> <code>int</code> <p>Consists of the new score obtained after rescoring.</p> <code>new_total</code> <code>int</code> <p>Consists of the new total summed after rescoring.</p> <code>orig_score</code> <code>int</code> <p>Consists of the original scored before rescoring.</p> <code>problem_id</code> <code>str</code> <p>Consists of the ID of the problem being rescored.</p> <code>state</code> <code>json</code> <p>see StateField.</p> <code>success</code> <code>str</code> <p>Consists either of the <code>correct</code> or <code>incorrect</code> value.</p> Source code in <code>ralph/models/edx/problem_interaction/fields/events.py</code> <pre><code>class ProblemRescoreEventField(AbstractBaseEventField):\n\"\"\"Pydantic model for `problem_rescore`.`event` field.\n\n    Attributes:\n        attempts (int): Consists of the number of attempts of rescoring.\n        correct_map (json): see CorrectMapSubFields.\n        new_score (int): Consists of the new score obtained after rescoring.\n        new_total (int): Consists of the new total summed after rescoring.\n        orig_score (int): Consists of the original scored before rescoring.\n        problem_id (str): Consists of the ID of the problem being rescored.\n        state (json): see StateField.\n        success (str): Consists either of the `correct` or `incorrect` value.\n    \"\"\"\n\n    attempts: int\n    correct_map: CorrectMap\n    new_score: int\n    new_total: int\n    orig_score: int\n    orig_total: int\n    problem_id: constr(\n        regex=r\"^block-v1:[^\\/+]+(\\/|\\+)[^\\/+]+(\\/|\\+)[^\\/?]+\"  # noqa : F722\n        r\"type@problem\\+block@[a-f0-9]{32}$\"  # noqa : F722\n    )\n    state: State\n    success: Union[Literal[\"correct\"], Literal[\"incorrect\"]]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.problem_interaction.fields.events.ProblemRescoreFailEventField","title":"<code> ProblemRescoreFailEventField            (AbstractBaseEventField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>problem_rescore_fail</code>.<code>event</code> field.</p> <p>Attributes:</p> Name Type Description <code>failure</code> <code>str</code> <p>Consists either of the <code>closed</code> or <code>unreset</code> value.</p> <code>problem_id</code> <code>str</code> <p>Consists of the ID of the problem being checked.</p> <code>state</code> <code>json</code> <p>see StateField.</p> Source code in <code>ralph/models/edx/problem_interaction/fields/events.py</code> <pre><code>class ProblemRescoreFailEventField(AbstractBaseEventField):\n\"\"\"Pydantic model for `problem_rescore_fail`.`event` field.\n\n    Attributes:\n        failure (str): Consists either of the `closed` or `unreset` value.\n        problem_id (str): Consists of the ID of the problem being checked.\n        state (json): see StateField.\n    \"\"\"\n\n    failure: Union[Literal[\"closed\"], Literal[\"unreset\"]]\n    problem_id: constr(\n        regex=r\"^block-v1:[^\\/+]+(\\/|\\+)[^\\/+]+(\\/|\\+)[^\\/?]+\"  # noqa : F722\n        r\"type@problem\\+block@[a-f0-9]{32}$\"  # noqa : F722\n    )\n    state: State\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.problem_interaction.fields.events.QueueState","title":"<code> QueueState            (BaseModelWithConfig)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for problem interaction <code>event</code>.<code>correct_map</code>.<code>queuestate</code> field.</p> <p>Attributes:</p> Name Type Description <code>key</code> <code>str</code> <p>Consists of a secret string.</p> <code>time</code> <code>str</code> <p>Consists of a string dump of a DateTime object in the format \u2018%Y%m%d%H%M%S\u2019.</p> Source code in <code>ralph/models/edx/problem_interaction/fields/events.py</code> <pre><code>class QueueState(BaseModelWithConfig):\n\"\"\"Pydantic model for problem interaction `event`.`correct_map`.`queuestate` field.\n\n    Attributes:\n        key (str): Consists of a secret string.\n        time (str): Consists of a string dump of a DateTime object in the format\n            '%Y%m%d%H%M%S'.\n    \"\"\"\n\n    key: str\n    time: datetime\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.problem_interaction.fields.events.ResetProblemEventField","title":"<code> ResetProblemEventField            (AbstractBaseEventField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>reset_problem</code>.<code>event</code> field.</p> <p>Attributes:</p> Name Type Description <code>new_state</code> <code>json</code> <p>see StateField.</p> <code>old_state</code> <code>json</code> <p>see StateField.</p> <code>problem_id</code> <code>str</code> <p>Consists of the ID of the problem being reset.</p> Source code in <code>ralph/models/edx/problem_interaction/fields/events.py</code> <pre><code>class ResetProblemEventField(AbstractBaseEventField):\n\"\"\"Pydantic model for `reset_problem`.`event` field.\n\n    Attributes:\n        new_state (json): see StateField.\n        old_state (json): see StateField.\n        problem_id (str): Consists of the ID of the problem being reset.\n    \"\"\"\n\n    new_state: State\n    old_state: State\n    problem_id: constr(\n        regex=r\"^block-v1:[^\\/+]+(\\/|\\+)[^\\/+]+(\\/|\\+)[^\\/?]+\"  # noqa : F722\n        r\"type@problem\\+block@[a-f0-9]{32}$\"  # noqa : F722\n    )\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.problem_interaction.fields.events.ResetProblemFailEventField","title":"<code> ResetProblemFailEventField            (AbstractBaseEventField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>reset_problem_fail</code>.<code>event</code> field.</p> <p>Attributes:</p> Name Type Description <code>failure</code> <code>str</code> <p>Consists either of <code>closed</code> or <code>not_done</code> value.</p> <code>old_state</code> <code>json</code> <p>see StateField.</p> <code>problem_id</code> <code>str</code> <p>Consists of the ID of the problem being reset.</p> Source code in <code>ralph/models/edx/problem_interaction/fields/events.py</code> <pre><code>class ResetProblemFailEventField(AbstractBaseEventField):\n\"\"\"Pydantic model for `reset_problem_fail`.`event` field.\n\n    Attributes:\n        failure (str): Consists either of `closed` or `not_done` value.\n        old_state (json): see StateField.\n        problem_id (str): Consists of the ID of the problem being reset.\n    \"\"\"\n\n    failure: Union[Literal[\"closed\"], Literal[\"not_done\"]]\n    old_state: State\n    problem_id: constr(\n        regex=r\"^block-v1:[^\\/+]+(\\/|\\+)[^\\/+]+(\\/|\\+)[^\\/?]+\"  # noqa : F722\n        r\"type@problem\\+block@[a-f0-9]{32}$\"  # noqa : F722\n    )\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.problem_interaction.fields.events.SaveProblemFailEventField","title":"<code> SaveProblemFailEventField            (AbstractBaseEventField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>save_problem_fail</code>.<code>event</code> field.</p> <p>Attributes:</p> Name Type Description <code>answers</code> <code>dict</code> <p>Consists of a dict of the answer string or a list or a dict of the answer strings if multiple choices are allowed.</p> <code>failure</code> <code>str</code> <p>Consists either of <code>closed</code> or <code>done</code> value.</p> <code>problem_id</code> <code>str</code> <p>Consists of the ID of the problem being saved.</p> <code>state</code> <code>json</code> <p>see StateField.</p> Source code in <code>ralph/models/edx/problem_interaction/fields/events.py</code> <pre><code>class SaveProblemFailEventField(AbstractBaseEventField):\n\"\"\"Pydantic model for `save_problem_fail`.`event` field.\n\n    Attributes:\n        answers (dict): Consists of a dict of the answer string or a list or a dict of\n            the answer strings if multiple choices are allowed.\n        failure (str): Consists either of `closed` or `done` value.\n        problem_id (str): Consists of the ID of the problem being saved.\n        state (json): see StateField.\n    \"\"\"\n\n    answers: Dict[str, Union[int, str, list, dict]]\n    failure: Union[Literal[\"closed\"], Literal[\"done\"]]\n    problem_id: constr(\n        regex=r\"^block-v1:[^\\/+]+(\\/|\\+)[^\\/+]+(\\/|\\+)[^\\/?]+\"  # noqa : F722\n        r\"type@problem\\+block@[a-f0-9]{32}$\"  # noqa : F722\n    )\n    state: State\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.problem_interaction.fields.events.SaveProblemSuccessEventField","title":"<code> SaveProblemSuccessEventField            (AbstractBaseEventField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>save_problem_success</code>.<code>event</code> field.</p> <p>Attributes:</p> Name Type Description <code>answers</code> <code>dict</code> <p>Consists of a dict of the answer string or a list or a dict of the answer strings if multiple choices are allowed.</p> <code>problem_id</code> <code>str</code> <p>Consists of the ID of the problem being saved.</p> <code>state</code> <code>json</code> <p>see StateField.</p> Source code in <code>ralph/models/edx/problem_interaction/fields/events.py</code> <pre><code>class SaveProblemSuccessEventField(AbstractBaseEventField):\n\"\"\"Pydantic model for `save_problem_success`.`event` field.\n\n    Attributes:\n        answers (dict): Consists of a dict of the answer string or a list or a dict of\n            the answer strings if multiple choices are allowed.\n        problem_id (str): Consists of the ID of the problem being saved.\n        state (json): see StateField.\n    \"\"\"\n\n    answers: Dict[str, Union[int, str, list, dict]]\n    problem_id: constr(\n        regex=r\"^block-v1:[^\\/+]+(\\/|\\+)[^\\/+]+(\\/|\\+)[^\\/?]+\"  # noqa : F722\n        r\"type@problem\\+block@[a-f0-9]{32}$\"  # noqa : F722\n    )\n    state: State\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.problem_interaction.fields.events.ShowAnswerEventField","title":"<code> ShowAnswerEventField            (AbstractBaseEventField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>show_answer</code>.<code>event</code> field.</p> <p>Attributes:</p> Name Type Description <code>problem_id</code> <code>str</code> <p>Consists of the ID of the problem being shown.</p> Source code in <code>ralph/models/edx/problem_interaction/fields/events.py</code> <pre><code>class ShowAnswerEventField(AbstractBaseEventField):\n\"\"\"Pydantic model for `show_answer`.`event` field.\n\n    Attributes:\n        problem_id (str): Consists of the ID of the problem being shown.\n    \"\"\"\n\n    problem_id: constr(\n        regex=r\"^block-v1:[^\\/+]+(\\/|\\+)[^\\/+]+(\\/|\\+)[^\\/?]+\"  # noqa : F722\n        r\"type@problem\\+block@[a-f0-9]{32}$\"  # noqa : F722\n    )\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.problem_interaction.fields.events.State","title":"<code> State            (BaseModelWithConfig)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic modelfor problem interaction <code>event</code>.<code>state</code> field.</p> <p>Attributes:</p> Name Type Description <code>correct_map</code> <code>dict</code> <p>see CorrectMapSubFields.</p> <code>done</code> <code>bool</code> <p><code>True</code> if the problem is answered, else <code>False</code>.</p> <code>input_state</code> <code>dict</code> <p>Consists of the state field given before answering.</p> <code>seed</code> <code>int</code> <p>Consists of the seed element for the current state.</p> <code>student_answers</code> <code>dict</code> <p>Consists of the answer(s) given by the user.</p> Source code in <code>ralph/models/edx/problem_interaction/fields/events.py</code> <pre><code>class State(BaseModelWithConfig):\n\"\"\"Pydantic modelfor problem interaction `event`.`state` field.\n\n    Attributes:\n        correct_map (dict): see CorrectMapSubFields.\n        done (bool): `True` if the problem is answered, else `False`.\n        input_state (dict): Consists of the state field given before answering.\n        seed (int): Consists of the seed element for the current state.\n        student_answers (dict): Consists of the answer(s) given by the user.\n    \"\"\"\n\n    correct_map: Dict[\n        constr(regex=r\"^[a-f0-9]{32}_[0-9]_[0-9]$\"),  # noqa : F722\n        CorrectMap,\n    ]\n    done: Optional[bool]\n    input_state: dict\n    seed: int\n    student_answers: dict\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.problem_interaction.fields.events.SubmissionAnswerField","title":"<code> SubmissionAnswerField            (BaseModelWithConfig)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>problem_check</code>.<code>event</code>.<code>submission</code> field.</p> <p>Attributes:</p> Name Type Description <code>answer</code> <code>str, list</code> <p>Consists of the answer string or a list of the answer strings if multiple choices are allorwed.</p> <code>correct</code> <code>bool</code> <p><code>True</code> if the <code>answer</code> value is correct, else <code>False</code>.</p> <code>input_type</code> <code>str</code> <p>Consists of the type of value that the student supplies for the <code>response_type</code>.</p> <code>question</code> <code>str</code> <p>Consists of the question text.</p> <code>response_type</code> <code>str</code> <p>Consists of the type of problem.</p> <code>variant</code> <code>str</code> <p>Consists of the unique ID of the variant that was presented to this user.</p> Source code in <code>ralph/models/edx/problem_interaction/fields/events.py</code> <pre><code>class SubmissionAnswerField(BaseModelWithConfig):\n\"\"\"Pydantic model for `problem_check`.`event`.`submission` field.\n\n    Attributes:\n        answer (str, list): Consists of the answer string or a list of the answer\n            strings if multiple choices are allorwed.\n        correct (bool): `True` if the `answer` value is correct, else `False`.\n        input_type (str): Consists of the type of value that the student supplies for\n            the `response_type`.\n        question (str): Consists of the question text.\n        response_type (str): Consists of the type of problem.\n        variant (str): Consists of the unique ID of the variant that was presented to\n            this user.\n    \"\"\"\n\n    answer: Union[str, List[str]]\n    correct: bool\n    input_type: str\n    question: str\n    response_type: str\n    variant: str\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.problem_interaction.fields.events.UIProblemResetEventField","title":"<code> UIProblemResetEventField            (AbstractBaseEventField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>problem_reset</code>.<code>event</code> field.</p> <p>Attributes:</p> Name Type Description <code>answers</code> <code>str, list</code> <p>Consists of the answer string or a list of the answer strings if multiple choices are allowed.</p> Source code in <code>ralph/models/edx/problem_interaction/fields/events.py</code> <pre><code>class UIProblemResetEventField(AbstractBaseEventField):\n\"\"\"Pydantic model for `problem_reset`.`event` field.\n\n    Attributes:\n        answers (str, list): Consists of the answer string or a list of the answer\n            strings if multiple choices are allowed.\n    \"\"\"\n\n    answers: Union[str, List[str]]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.problem_interaction.fields.events.UIProblemShowEventField","title":"<code> UIProblemShowEventField            (AbstractBaseEventField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>problem_show</code>.<code>event</code> field.</p> <p>Attributes:</p> Name Type Description <code>problem</code> <code>str</code> <p>Consists of the optional name value that the course creators supply or the system-generated hash code for the problem being shown.</p> Source code in <code>ralph/models/edx/problem_interaction/fields/events.py</code> <pre><code>class UIProblemShowEventField(AbstractBaseEventField):\n\"\"\"Pydantic model for `problem_show`.`event` field.\n\n    Attributes:\n        problem (str): Consists of the optional name value that the course creators\n            supply or the system-generated hash code for the problem being shown.\n    \"\"\"\n\n    problem: str\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.problem_interaction.statements","title":"<code>statements</code>","text":"<p>Problem interaction events model definitions.</p>"},{"location":"models/edx/#ralph.models.edx.problem_interaction.statements.EdxProblemHintDemandhintDisplayed","title":"<code> EdxProblemHintDemandhintDisplayed            (BaseServerModel)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>edx.problem.hint.demandhint_displayed</code> statement.</p> <p>The server emits this statement when a user requests a hint for a problem.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>dict</code> <p>See EdxProblemHintDemandhintDisplayedEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>edx.problem.hint.demandhint_displayed</code>.</p> <code>page</code> <code>str</code> <p>Consists of the value <code>x_module</code>.</p> Source code in <code>ralph/models/edx/problem_interaction/statements.py</code> <pre><code>class EdxProblemHintDemandhintDisplayed(BaseServerModel):\n\"\"\"Pydantic model for `edx.problem.hint.demandhint_displayed` statement.\n\n    The server emits this statement when a user requests a hint for a problem.\n\n    Attributes:\n        event (dict): See EdxProblemHintDemandhintDisplayedEventField.\n        event_type (str): Consists of the value `edx.problem.hint.demandhint_displayed`.\n        page (str): Consists of the value `x_module`.\n    \"\"\"\n\n    __selector__ = selector(\n        event_source=\"server\", event_type=\"edx.problem.hint.demandhint_displayed\"\n    )\n\n    event: EdxProblemHintDemandhintDisplayedEventField\n    event_type: Literal[\"edx.problem.hint.demandhint_displayed\"]\n    page: Literal[\"x_module\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.problem_interaction.statements.EdxProblemHintFeedbackDisplayed","title":"<code> EdxProblemHintFeedbackDisplayed            (BaseServerModel)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>edx.problem.hint.feedback_displayed</code> statement.</p> <p>The server emits this event when a user receives a hint after answering a problem.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>dict</code> <p>See EdxProblemHintFeedbackDisplayedEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>edx.problem.hint.feedback_displayed</code>.</p> <code>page</code> <code>str</code> <p>Consists of the value <code>x_module</code>.</p> Source code in <code>ralph/models/edx/problem_interaction/statements.py</code> <pre><code>class EdxProblemHintFeedbackDisplayed(BaseServerModel):\n\"\"\"Pydantic model for `edx.problem.hint.feedback_displayed` statement.\n\n    The server emits this event when a user receives a hint after answering a problem.\n\n    Attributes:\n        event (dict): See EdxProblemHintFeedbackDisplayedEventField.\n        event_type (str): Consists of the value `edx.problem.hint.feedback_displayed`.\n        page (str): Consists of the value `x_module`.\n    \"\"\"\n\n    __selector__ = selector(\n        event_source=\"server\", event_type=\"edx.problem.hint.feedback_displayed\"\n    )\n\n    event: EdxProblemHintFeedbackDisplayedEventField\n    event_type: Literal[\"edx.problem.hint.feedback_displayed\"]\n    page: Literal[\"x_module\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.problem_interaction.statements.ProblemCheck","title":"<code> ProblemCheck            (BaseServerModel)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>problem_check</code> statement.</p> <p>The server emits this event when a user checks a problem.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>dict</code> <p>See ProblemCheckEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>problem_check</code>.</p> <code>page</code> <code>str</code> <p>Consists of the value <code>x_module</code>.</p> Source code in <code>ralph/models/edx/problem_interaction/statements.py</code> <pre><code>class ProblemCheck(BaseServerModel):\n\"\"\"Pydantic model for `problem_check` statement.\n\n    The server emits this event when a user checks a problem.\n\n    Attributes:\n        event (dict): See ProblemCheckEventField.\n        event_type (str): Consists of the value `problem_check`.\n        page (str): Consists of the value `x_module`.\n    \"\"\"\n\n    __selector__ = selector(event_source=\"server\", event_type=\"problem_check\")\n\n    event: ProblemCheckEventField\n    event_type: Literal[\"problem_check\"]\n    page: Literal[\"x_module\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.problem_interaction.statements.ProblemCheckFail","title":"<code> ProblemCheckFail            (BaseServerModel)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>problem_check_fail</code> statement.</p> <p>The server emits this event when a user checks a problem and a failure prevents the problem from being checked successfully.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>dict</code> <p>See ProblemCheckFailEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>problem_check_fail</code>.</p> <code>page</code> <code>str</code> <p>Consists of the value <code>x_module</code>.</p> Source code in <code>ralph/models/edx/problem_interaction/statements.py</code> <pre><code>class ProblemCheckFail(BaseServerModel):\n\"\"\"Pydantic model for `problem_check_fail` statement.\n\n    The server emits this event when a user checks a problem and a failure prevents the\n    problem from being checked successfully.\n\n    Attributes:\n        event (dict): See ProblemCheckFailEventField.\n        event_type (str): Consists of the value `problem_check_fail`.\n        page (str): Consists of the value `x_module`.\n    \"\"\"\n\n    __selector__ = selector(event_source=\"server\", event_type=\"problem_check_fail\")\n\n    event: ProblemCheckFailEventField\n    event_type: Literal[\"problem_check_fail\"]\n    page: Literal[\"x_module\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.problem_interaction.statements.ProblemRescore","title":"<code> ProblemRescore            (BaseServerModel)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>problem_rescore</code> statement.</p> <p>The server emits this statement when a problem is successfully rescored.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>dict</code> <p>See ProblemRescoreEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>problem_rescore</code>.</p> <code>page</code> <code>str</code> <p>Consists of the value <code>x_module</code>.</p> Source code in <code>ralph/models/edx/problem_interaction/statements.py</code> <pre><code>class ProblemRescore(BaseServerModel):\n\"\"\"Pydantic model for `problem_rescore` statement.\n\n    The server emits this statement when a problem is successfully rescored.\n\n    Attributes:\n        event (dict): See ProblemRescoreEventField.\n        event_type (str): Consists of the value `problem_rescore`.\n        page (str): Consists of the value `x_module`.\n    \"\"\"\n\n    __selector__ = selector(event_source=\"server\", event_type=\"problem_rescore\")\n\n    event: ProblemRescoreEventField\n    event_type: Literal[\"problem_rescore\"]\n    page: Literal[\"x_module\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.problem_interaction.statements.ProblemRescoreFail","title":"<code> ProblemRescoreFail            (BaseServerModel)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>problem_rescore_fail</code> statement.</p> <p>The server emits this statement when a problem cannot be successfully rescored.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>dict</code> <p>See ProblemRescoreFailEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>problem_rescore_fail</code>.</p> <code>page</code> <code>str</code> <p>Consists of the value <code>x_module</code>.</p> Source code in <code>ralph/models/edx/problem_interaction/statements.py</code> <pre><code>class ProblemRescoreFail(BaseServerModel):\n\"\"\"Pydantic model for `problem_rescore_fail` statement.\n\n    The server emits this statement when a problem cannot be successfully rescored.\n\n    Attributes:\n        event (dict): See ProblemRescoreFailEventField.\n        event_type (str): Consists of the value `problem_rescore_fail`.\n        page (str): Consists of the value `x_module`.\n    \"\"\"\n\n    __selector__ = selector(event_source=\"server\", event_type=\"problem_rescore_fail\")\n\n    event: ProblemRescoreFailEventField\n    event_type: Literal[\"problem_rescore_fail\"]\n    page: Literal[\"x_module\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.problem_interaction.statements.ResetProblem","title":"<code> ResetProblem            (BaseServerModel)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>reset_problem</code> statement.</p> <p>The server emits this statement when a problem has been reset successfully.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>dict</code> <p>See ResetProblemEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>reset_problem</code>.</p> <code>page</code> <code>str</code> <p>Consists of the value <code>x_module</code>.</p> Source code in <code>ralph/models/edx/problem_interaction/statements.py</code> <pre><code>class ResetProblem(BaseServerModel):\n\"\"\"Pydantic model for `reset_problem` statement.\n\n    The server emits this statement when a problem has been reset successfully.\n\n    Attributes:\n        event (dict): See ResetProblemEventField.\n        event_type (str): Consists of the value `reset_problem`.\n        page (str): Consists of the value `x_module`.\n    \"\"\"\n\n    __selector__ = selector(event_source=\"server\", event_type=\"reset_problem\")\n\n    event: ResetProblemEventField\n    event_type: Literal[\"reset_problem\"]\n    page: Literal[\"x_module\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.problem_interaction.statements.ResetProblemFail","title":"<code> ResetProblemFail            (BaseServerModel)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>reset_problem_fail</code> statement.</p> <p>The server emits this statement when a problem cannot be reset successfully.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>dict</code> <p>See ResetProblemFailEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>reset_problem_fail</code>.</p> <code>page</code> <code>str</code> <p>Consists of the value <code>x_module</code>.</p> Source code in <code>ralph/models/edx/problem_interaction/statements.py</code> <pre><code>class ResetProblemFail(BaseServerModel):\n\"\"\"Pydantic model for `reset_problem_fail` statement.\n\n    The server emits this statement when a problem cannot be reset successfully.\n\n    Attributes:\n        event (dict): See ResetProblemFailEventField.\n        event_type (str): Consists of the value `reset_problem_fail`.\n        page (str): Consists of the value `x_module`.\n    \"\"\"\n\n    __selector__ = selector(event_source=\"server\", event_type=\"reset_problem_fail\")\n\n    event: ResetProblemFailEventField\n    event_type: Literal[\"reset_problem_fail\"]\n    page: Literal[\"x_module\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.problem_interaction.statements.SaveProblemFail","title":"<code> SaveProblemFail            (BaseServerModel)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>save_problem_fail</code> statement.</p> <p>The server emits this statement when a problem cannot be saved successfully.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>dict</code> <p>See SaveProblemFailEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>save_problem_fail</code>.</p> <code>page</code> <code>str</code> <p>Consists of the value <code>x_module</code>.</p> Source code in <code>ralph/models/edx/problem_interaction/statements.py</code> <pre><code>class SaveProblemFail(BaseServerModel):\n\"\"\"Pydantic model for `save_problem_fail` statement.\n\n    The server emits this statement when a problem cannot be saved successfully.\n\n    Attributes:\n        event (dict): See SaveProblemFailEventField.\n        event_type (str): Consists of the value `save_problem_fail`.\n        page (str): Consists of the value `x_module`.\n    \"\"\"\n\n    __selector__ = selector(event_source=\"server\", event_type=\"save_problem_fail\")\n\n    event: SaveProblemFailEventField\n    event_type: Literal[\"save_problem_fail\"]\n    page: Literal[\"x_module\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.problem_interaction.statements.SaveProblemSuccess","title":"<code> SaveProblemSuccess            (BaseServerModel)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>save_problem_success</code> statement.</p> <p>The server emits this statement when a problem is saved successfully.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>dict</code> <p>See SaveProblemSuccessEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>save_problem_success</code>.</p> <code>page</code> <code>str</code> <p>Consists of the value <code>x_module</code>.</p> Source code in <code>ralph/models/edx/problem_interaction/statements.py</code> <pre><code>class SaveProblemSuccess(BaseServerModel):\n\"\"\"Pydantic model for `save_problem_success` statement.\n\n    The server emits this statement when a problem is saved successfully.\n\n    Attributes:\n        event (dict): See SaveProblemSuccessEventField.\n        event_type (str): Consists of the value `save_problem_success`.\n        page (str): Consists of the value `x_module`.\n    \"\"\"\n\n    __selector__ = selector(event_source=\"server\", event_type=\"save_problem_success\")\n\n    event: SaveProblemSuccessEventField\n    event_type: Literal[\"save_problem_success\"]\n    page: Literal[\"x_module\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.problem_interaction.statements.ShowAnswer","title":"<code> ShowAnswer            (BaseServerModel)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>showanswer</code> statement.</p> <p>The server emits this statement when the answer to a problem is shown.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>dict</code> <p>See ShowAnswerEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>showanswer</code>.</p> <code>page</code> <code>str</code> <p>Consists of the value <code>x_module</code>.</p> Source code in <code>ralph/models/edx/problem_interaction/statements.py</code> <pre><code>class ShowAnswer(BaseServerModel):\n\"\"\"Pydantic model for `showanswer` statement.\n\n    The server emits this statement when the answer to a problem is shown.\n\n    Attributes:\n        event (dict): See ShowAnswerEventField.\n        event_type (str): Consists of the value `showanswer`.\n        page (str): Consists of the value `x_module`.\n    \"\"\"\n\n    __selector__ = selector(event_source=\"server\", event_type=\"showanswer\")\n\n    event: ShowAnswerEventField\n    event_type: Literal[\"showanswer\"]\n    page: Literal[\"x_module\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.problem_interaction.statements.UIProblemCheck","title":"<code> UIProblemCheck            (BaseBrowserModel)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>problem_check</code> statement.</p> <p>The browser emits this event when a user checks a problem.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>str</code> <p>Consists of values of problem being checked, styled as <code>GET</code> parameters.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>problem_check</code>.</p> <code>name</code> <code>str</code> <p>Consists of the value <code>problem_check</code>.</p> Source code in <code>ralph/models/edx/problem_interaction/statements.py</code> <pre><code>class UIProblemCheck(BaseBrowserModel):\n\"\"\"Pydantic model for `problem_check` statement.\n\n    The browser emits this event when a user checks a problem.\n\n    Attributes:\n        event (str): Consists of values of problem being checked, styled as `GET`\n            parameters.\n        event_type (str): Consists of the value `problem_check`.\n        name (str): Consists of the value `problem_check`.\n    \"\"\"\n\n    __selector__ = selector(event_source=\"browser\", event_type=\"problem_check\")\n\n    event: str\n    event_type: Literal[\"problem_check\"]\n    name: Literal[\"problem_check\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.problem_interaction.statements.UIProblemGraded","title":"<code> UIProblemGraded            (BaseBrowserModel)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>problem_graded</code> statement.</p> <p>The server emits this statement each time a user clicks Check for a problem and it is graded successfully.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>list</code> <p>See ProblemGradedEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>problem_graded</code>.</p> <code>name</code> <code>str</code> <p>Consists of the value <code>problem_graded</code>.</p> Source code in <code>ralph/models/edx/problem_interaction/statements.py</code> <pre><code>class UIProblemGraded(BaseBrowserModel):\n\"\"\"Pydantic model for `problem_graded` statement.\n\n    The server emits this statement each time a user clicks &lt;kbd&gt;Check&lt;/kbd&gt; for a\n    problem and it is graded successfully.\n\n    Attributes:\n        event (list): See ProblemGradedEventField.\n        event_type (str): Consists of the value `problem_graded`.\n        name (str): Consists of the value `problem_graded`.\n    \"\"\"\n\n    __selector__ = selector(event_source=\"browser\", event_type=\"problem_graded\")\n\n    event: List[Union[str, Literal[None], None]]\n    event_type: Literal[\"problem_graded\"]\n    name: Literal[\"problem_graded\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.problem_interaction.statements.UIProblemReset","title":"<code> UIProblemReset            (BaseBrowserModel)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>problem_reset</code> statement.</p> <p>The browser emits problem_reset events when a user clicks Reset to reset the problem answer.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>json</code> <p>See ProblemResetEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>problem_reset</code>.</p> <code>name</code> <code>str</code> <p>Consists of the value <code>problem_reset</code>.</p> Source code in <code>ralph/models/edx/problem_interaction/statements.py</code> <pre><code>class UIProblemReset(BaseBrowserModel):\n\"\"\"Pydantic model for `problem_reset` statement.\n\n    The browser emits problem_reset events when a user clicks &lt;kbd&gt;Reset&lt;/kbd&gt; to reset\n    the problem answer.\n\n    Attributes:\n        event (json): See ProblemResetEventField.\n        event_type (str): Consists of the value `problem_reset`.\n        name (str): Consists of the value `problem_reset`.\n    \"\"\"\n\n    __selector__ = selector(event_source=\"browser\", event_type=\"problem_reset\")\n\n    event: Union[\n        str,\n        Json[UIProblemResetEventField],  # pylint: disable=unsubscriptable-object\n        UIProblemResetEventField,\n    ]\n    event_type: Literal[\"problem_reset\"]\n    name: Literal[\"problem_reset\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.problem_interaction.statements.UIProblemSave","title":"<code> UIProblemSave            (BaseBrowserModel)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>problem_save</code> statement.</p> <p>The browser emits this statement when a user saves a problem.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>str</code> <p>Consists of all the answers saved for the problem.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>problem_save</code>.</p> <code>name</code> <code>str</code> <p>Consists of the value <code>problem_save</code>.</p> Source code in <code>ralph/models/edx/problem_interaction/statements.py</code> <pre><code>class UIProblemSave(BaseBrowserModel):\n\"\"\"Pydantic model for `problem_save` statement.\n\n    The browser emits this statement when a user saves a problem.\n\n    Attributes:\n        event (str): Consists of all the answers saved for the problem.\n        event_type (str): Consists of the value `problem_save`.\n        name (str): Consists of the value `problem_save`.\n    \"\"\"\n\n    __selector__ = selector(event_source=\"browser\", event_type=\"problem_save\")\n\n    event: str\n    event_type: Literal[\"problem_save\"]\n    name: Literal[\"problem_save\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.problem_interaction.statements.UIProblemShow","title":"<code> UIProblemShow            (BaseBrowserModel)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>problem_show</code> statement.</p> <p>The browser emits this statement when the answer clicks Show Answer to show the problem answer.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>json</code> <p>See ProblemShowEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>problem_save</code>.</p> <code>name</code> <code>str</code> <p>Consists of the value <code>problem_save</code>.</p> Source code in <code>ralph/models/edx/problem_interaction/statements.py</code> <pre><code>class UIProblemShow(BaseBrowserModel):\n\"\"\"Pydantic model for `problem_show` statement.\n\n    The browser emits this statement when the answer clicks &lt;kbd&gt;Show Answer&lt;/kbd&gt; to\n    show the problem answer.\n\n    Attributes:\n        event (json): See ProblemShowEventField.\n        event_type (str): Consists of the value `problem_save`.\n        name (str): Consists of the value `problem_save`.\n    \"\"\"\n\n    __selector__ = selector(event_source=\"browser\", event_type=\"problem_show\")\n\n    event: Union[\n        Json[UIProblemShowEventField],  # pylint: disable=unsubscriptable-object\n        UIProblemShowEventField,\n    ]\n    event_type: Literal[\"problem_show\"]\n    name: Literal[\"problem_show\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.server","title":"<code>server</code>","text":"<p>Server event model definitions.</p>"},{"location":"models/edx/#ralph.models.edx.server.BaseServerModel","title":"<code> BaseServerModel            (BaseEdxModel)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for core server statement.</p> Source code in <code>ralph/models/edx/server.py</code> <pre><code>class BaseServerModel(BaseEdxModel):\n\"\"\"Pydantic model for core server statement.\"\"\"\n\n    event_source: Literal[\"server\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.server.Server","title":"<code> Server            (BaseServerModel)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for common server statement.</p> <p>This type of event is triggered from the django middleware on each request excluding: <code>/event</code>, <code>login</code>, <code>heartbeat</code>, <code>/segmentio/event</code> and <code>/performance</code>.</p> <p>Attributes:</p> Name Type Description <code>event_type</code> <code>str</code> <p>Consist of the relative URL (without the hostname) of the requested page. Retrieved with:     <code>request.META['PATH_INFO']</code></p> <code>event</code> <code>str</code> <p>Consist of a JSON string holding the content of the GET or POST request. Retrieved with:     <code>json.dumps(         {             'GET': dict(request.GET),             'POST': dict(request.POST)         }     )[:512]</code> Note:     Values for [\u2018password\u2019, \u2018newpassword\u2019, \u2018new_password\u2019, \u2018oldpassword\u2019,     \u2018old_password\u2019, \u2018new_password1\u2019, \u2018new_password2\u2019] are replaced by     <code>********</code>.     The JSON string is truncated at 512 characters resulting in invalid     JSON.</p> Source code in <code>ralph/models/edx/server.py</code> <pre><code>class Server(BaseServerModel):\n\"\"\"Pydantic model for common server statement.\n\n    This type of event is triggered from the django middleware on each request\n    excluding: `/event`, `login`, `heartbeat`, `/segmentio/event` and `/performance`.\n\n    Attributes:\n        event_type (str): Consist of the relative URL (without the hostname) of the\n            requested page.\n            Retrieved with:\n                `request.META['PATH_INFO']`\n        event (str): Consist of a JSON string holding the content of the GET or POST\n            request.\n            Retrieved with:\n                ```json.dumps(\n                    {\n                        'GET': dict(request.GET),\n                        'POST': dict(request.POST)\n                    }\n                )[:512]```\n            Note:\n                Values for ['password', 'newpassword', 'new_password', 'oldpassword',\n                'old_password', 'new_password1', 'new_password2'] are replaced by\n                `********`.\n                The JSON string is truncated at 512 characters resulting in invalid\n                JSON.\n    \"\"\"\n\n    __selector__ = selector(\n        event_source=\"server\", event_type=LazyModelField(\"context__path\")\n    )\n\n    # pylint: disable=unsubscriptable-object\n    event_type: Path\n    event: Union[Json[ServerEventField], ServerEventField]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.server.ServerEventField","title":"<code> ServerEventField            (AbstractBaseEventField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for common server <code>event</code> field.</p> Source code in <code>ralph/models/edx/server.py</code> <pre><code>class ServerEventField(AbstractBaseEventField):\n\"\"\"Pydantic model for common server `event` field.\"\"\"\n\n    GET: dict\n    POST: dict\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.textbook_interaction","title":"<code>textbook_interaction</code>  <code>special</code>","text":""},{"location":"models/edx/#ralph.models.edx.textbook_interaction.fields","title":"<code>fields</code>  <code>special</code>","text":""},{"location":"models/edx/#ralph.models.edx.textbook_interaction.fields.events","title":"<code>events</code>","text":"<p>Textbook interaction event fields definitions.</p>"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.fields.events.BookEventField","title":"<code> BookEventField            (AbstractBaseEventField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>book</code>.<code>event</code> field.</p> <p>Attributes:</p> Name Type Description <code>chapter</code> <code>str</code> <p>Consists of the name of the PDF file.</p> <code>name</code> <code>str</code> <p>Consists of <code>textbook.pdf.page.loaded</code> if type is set to <code>gotopage</code>, <code>textbook.pdf.page.navigatednext</code> if type is set to <code>prevpage</code>, <code>textbook.pdf.page.navigatednext</code> if type is set to <code>nextpage</code>.</p> <code>new</code> <code>int</code> <p>Consists of the destination page number.</p> <code>old</code> <code>int</code> <p>Consists of the original page number. It applies to <code>gotopage</code> event types only.</p> <code>type</code> <code>str</code> <p>Consists of <code>gotopage</code> value when a page loads after the student manually enters its number, <code>prevpage</code> value when the next page button is clicked or <code>nextpage</code> value when the previous page button is clicked.</p> Source code in <code>ralph/models/edx/textbook_interaction/fields/events.py</code> <pre><code>class BookEventField(AbstractBaseEventField):\n\"\"\"Pydantic model for `book`.`event` field.\n\n    Attributes:\n        chapter (str): Consists of the name of the PDF file.\n        name (str): Consists of `textbook.pdf.page.loaded` if type is set to\n            `gotopage`,\n            `textbook.pdf.page.navigatednext` if type is set to `prevpage`,\n            `textbook.pdf.page.navigatednext` if type is set to `nextpage`.\n        new (int): Consists of the destination page number.\n        old (int): Consists of the original page number. It applies to `gotopage` event\n            types only.\n        type (str): Consists of `gotopage` value when a page loads after the student\n            manually enters its number, `prevpage` value when the next page button is\n            clicked or `nextpage` value when the previous page button is clicked.\n    \"\"\"\n\n    chapter: constr(\n        regex=(\n            r\"^\\/asset-v1:[^\\/+]+(\\/|\\+)[^\\/+]+(\\/|\\+)[^\\/?]+type@asset\\+block.+$\"  # noqa\n        )\n    )\n    name: Union[\n        Literal[\"textbook.pdf.page.loaded\"], Literal[\"textbook.pdf.page.navigatednext\"]\n    ]\n    new: int\n    old: Optional[int]\n    type: Union[Literal[\"gotopage\"], Literal[\"prevpage\"], Literal[\"nextpage\"]] = Field(\n        alias=\"type\"\n    )\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.fields.events.TextbookInteractionBaseEventField","title":"<code> TextbookInteractionBaseEventField            (AbstractBaseEventField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for textbook interaction core <code>event</code> field.</p> <p>Attributes:</p> Name Type Description <code>chapter</code> <code>str</code> <p>Consists of the name of the PDF file. It begins with the <code>block_id</code> value and ends with the <code>.pdf</code> extension.</p> <code>page</code> <code>int</code> <p>The number of the page that is open when the event is emitted.</p> Source code in <code>ralph/models/edx/textbook_interaction/fields/events.py</code> <pre><code>class TextbookInteractionBaseEventField(AbstractBaseEventField):\n\"\"\"Pydantic model for textbook interaction core `event` field.\n\n    Attributes:\n        chapter (str): Consists of the name of the PDF file.\n            It begins with the `block_id` value and ends with the `.pdf` extension.\n        page (int): The number of the page that is open when the event is emitted.\n    \"\"\"\n\n    page: int\n    chapter: constr(\n        regex=(\n            r\"^\\/asset-v1:[^\\/+]+(\\/|\\+)[^\\/+]+(\\/|\\+)[^\\/?]+type@asset\\+block.+$\"  # noqa\n        )\n    )\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.fields.events.TextbookPdfChapterNavigatedEventField","title":"<code> TextbookPdfChapterNavigatedEventField            (AbstractBaseEventField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>textbook.pdf.chapter.navigated</code>.<code>event</code> field.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Consists of the value <code>textbook.pdf.chapter.navigated</code>.</p> <code>chapter</code> <code>str</code> <p>Consists of the name of the PDF file. It begins with the <code>block_id</code> value and ends with the <code>.pdf</code> extension.</p> Source code in <code>ralph/models/edx/textbook_interaction/fields/events.py</code> <pre><code>class TextbookPdfChapterNavigatedEventField(AbstractBaseEventField):\n\"\"\"Pydantic model for `textbook.pdf.chapter.navigated`.`event` field.\n\n    Attributes:\n        name (str): Consists of the value `textbook.pdf.chapter.navigated`.\n        chapter (str): Consists of the name of the PDF file.\n            It begins with the `block_id` value and ends with the `.pdf` extension.\n    \"\"\"\n\n    name: Literal[\"textbook.pdf.chapter.navigated\"]\n    chapter: constr(\n        regex=(\n            r\"^\\/asset-v1:[^\\/+]+(\\/|\\+)[^\\/+]+(\\/|\\+)[^\\/?]+type@asset\\+block.+$\"  # noqa\n        )\n    )\n    chapter_title: str\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.fields.events.TextbookPdfDisplayScaledEventField","title":"<code> TextbookPdfDisplayScaledEventField            (TextbookInteractionBaseEventField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>textbook.pdf.display.scaled</code>.<code>event</code> field.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Consists of the value <code>textbook.pdf.display.scaled</code>.</p> <code>amount</code> <code>str</code> <p>Consists of a floating point number string value.</p> Source code in <code>ralph/models/edx/textbook_interaction/fields/events.py</code> <pre><code>class TextbookPdfDisplayScaledEventField(TextbookInteractionBaseEventField):\n\"\"\"Pydantic model for `textbook.pdf.display.scaled`.`event` field.\n\n    Attributes:\n        name (str): Consists of the value `textbook.pdf.display.scaled`.\n        amount (str): Consists of a floating point number string value.\n    \"\"\"\n\n    name: Literal[\"textbook.pdf.display.scaled\"]\n    amount: float\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.fields.events.TextbookPdfOutlineToggledEventField","title":"<code> TextbookPdfOutlineToggledEventField            (TextbookInteractionBaseEventField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>textbook.pdf.outline.toggled</code>.<code>event</code> field.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Consists of the value <code>textbook.pdf.outline.toggled</code>.</p> Source code in <code>ralph/models/edx/textbook_interaction/fields/events.py</code> <pre><code>class TextbookPdfOutlineToggledEventField(TextbookInteractionBaseEventField):\n\"\"\"Pydantic model for `textbook.pdf.outline.toggled`.`event` field.\n\n    Attribute:\n        name (str): Consists of the value `textbook.pdf.outline.toggled`.\n    \"\"\"\n\n    name: Literal[\"textbook.pdf.outline.toggled\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.fields.events.TextbookPdfPageNavigatedEventField","title":"<code> TextbookPdfPageNavigatedEventField            (TextbookInteractionBaseEventField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>textbook.pdf.page.navigated</code>.<code>event</code> field.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Consists of the value <code>textbook.pdf.page.navigated</code>.</p> Source code in <code>ralph/models/edx/textbook_interaction/fields/events.py</code> <pre><code>class TextbookPdfPageNavigatedEventField(TextbookInteractionBaseEventField):\n\"\"\"Pydantic model for `textbook.pdf.page.navigated`.`event` field.\n\n    Attribute:\n        name (str): Consists of the value `textbook.pdf.page.navigated`.\n    \"\"\"\n\n    name: Literal[\"textbook.pdf.page.navigated\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.fields.events.TextbookPdfPageScrolledEventField","title":"<code> TextbookPdfPageScrolledEventField            (TextbookInteractionBaseEventField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>textbook.pdf.page.scrolled</code>.<code>event</code> field.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Consists of the value <code>textbook.pdf.page.scrolled</code>.</p> <code>direction</code> <code>str</code> <p>Consists either of the <code>up</code> or <code>down</code> value.</p> Source code in <code>ralph/models/edx/textbook_interaction/fields/events.py</code> <pre><code>class TextbookPdfPageScrolledEventField(TextbookInteractionBaseEventField):\n\"\"\"Pydantic model for `textbook.pdf.page.scrolled`.`event` field.\n\n    Attributes:\n        name (str): Consists of the value `textbook.pdf.page.scrolled`.\n        direction (str): Consists either of the `up` or `down` value.\n    \"\"\"\n\n    name: Literal[\"textbook.pdf.page.scrolled\"]\n    direction: Union[Literal[\"up\"], Literal[\"down\"]]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.fields.events.TextbookPdfSearchCaseSensitivityToggledEventField","title":"<code> TextbookPdfSearchCaseSensitivityToggledEventField            (TextbookInteractionBaseEventField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>textbook.pdf.searchcasesensitivity.toggled</code>.<code>event</code> field.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Consists of the value <code>textbook.pdf.searchcasesensitivity.toggled</code>.</p> <code>caseSensitive</code> <code>bool</code> <p>Consists either of the <code>true</code> value if the case sensitive option is selected or <code>false</code> if this option is not selected.</p> <code>highlightAll</code> <code>bool</code> <p>Consists either of the <code>true</code> value if the option to highlight all matches is selected or <code>false</code> if this option is not selected.</p> <code>query</code> <code>str</code> <p>Consists of the value in the search field.</p> <code>status</code> <code>str</code> <p>Consists either of the value <code>not found</code> for a search string that is unsuccessful or blank for successful search strings.</p> Source code in <code>ralph/models/edx/textbook_interaction/fields/events.py</code> <pre><code>class TextbookPdfSearchCaseSensitivityToggledEventField(\n    TextbookInteractionBaseEventField\n):\n\"\"\"Pydantic model for `textbook.pdf.searchcasesensitivity.toggled`.`event` field.\n\n    Attributes:\n        name (str): Consists of the value `textbook.pdf.searchcasesensitivity.toggled`.\n        caseSensitive (bool): Consists either of the `true` value if the case sensitive\n            option is selected or `false` if this option is not selected.\n        highlightAll (bool): Consists either of the `true` value if the option to\n            highlight all matches is selected or `false` if this option is not selected.\n        query (str): Consists of the value in the search field.\n        status (str): Consists either of the value `not found` for a search string that\n            is unsuccessful or blank for successful search strings.\n    \"\"\"\n\n    name: Literal[\"textbook.pdf.searchcasesensitivity.toggled\"]\n    caseSensitive: bool\n    highlightAll: bool\n    query: str\n    status: str\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.fields.events.TextbookPdfSearchExecutedEventField","title":"<code> TextbookPdfSearchExecutedEventField            (TextbookInteractionBaseEventField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>textbook.pdf.search.executed</code>.<code>event</code> field.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Consists of the value <code>textbook.pdf.search.executed</code>.</p> <code>caseSensitive</code> <code>bool</code> <p>Consists either of the <code>true</code> value if the case sensitive option is selected or <code>false</code> if this option is not selected.</p> <code>highlightAll</code> <code>bool</code> <p>Consists either of the <code>true</code> value if the option to highlight all matches is selected or <code>false</code> if this option is not selected.</p> <code>query</code> <code>str</code> <p>Consists of the value in the search field.</p> <code>status</code> <code>str</code> <p>Consists either of the value <code>not found</code> for a search string that is unsuccessful or blank for successful search strings.</p> Source code in <code>ralph/models/edx/textbook_interaction/fields/events.py</code> <pre><code>class TextbookPdfSearchExecutedEventField(TextbookInteractionBaseEventField):\n\"\"\"Pydantic model for `textbook.pdf.search.executed`.`event` field.\n\n    Attributes:\n        name (str): Consists of the value `textbook.pdf.search.executed`.\n        caseSensitive (bool): Consists either of the `true` value if the case sensitive\n            option is selected or `false` if this option is not selected.\n        highlightAll (bool): Consists either of the `true` value if the option to\n            highlight all matches is selected or `false` if this option is not selected.\n        query (str): Consists of the value in the search field.\n        status (str): Consists either of the value `not found` for a search string that\n            is unsuccessful or blank for successful search strings.\n    \"\"\"\n\n    name: Literal[\"textbook.pdf.search.executed\"]\n    caseSensitive: bool\n    highlightAll: bool\n    query: str\n    status: str\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.fields.events.TextbookPdfSearchHighlightToggledEventField","title":"<code> TextbookPdfSearchHighlightToggledEventField            (TextbookInteractionBaseEventField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>textbook.pdf.search.highlight.toggled</code>.<code>event</code> field.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Consists of the value <code>textbook.pdf.search.highlight.toggled</code>.</p> <code>caseSensitive</code> <code>bool</code> <p>Consists either of the <code>true</code> value if the case sensitive option is selected or <code>false</code> if this option is not selected.</p> <code>highlightAll</code> <code>bool</code> <p>Consists either of the <code>true</code> value if the option to highlight all matches is selected or <code>false</code> if this option is not selected.</p> <code>query</code> <code>str</code> <p>Consists of the value in the search field.</p> <code>status</code> <code>str</code> <p>Consists either of the value <code>not found</code> for a search string that is unsuccessful or blank for successful search strings.</p> Source code in <code>ralph/models/edx/textbook_interaction/fields/events.py</code> <pre><code>class TextbookPdfSearchHighlightToggledEventField(TextbookInteractionBaseEventField):\n\"\"\"Pydantic model for `textbook.pdf.search.highlight.toggled`.`event` field.\n\n    Attributes:\n        name (str): Consists of the value `textbook.pdf.search.highlight.toggled`.\n        caseSensitive (bool): Consists either of the `true` value if the case sensitive\n            option is selected or `false` if this option is not selected.\n        highlightAll (bool): Consists either of the `true` value if the option to\n            highlight all matches is selected or `false` if this option is not selected.\n        query (str): Consists of the value in the search field.\n        status (str): Consists either of the value `not found` for a search string that\n            is unsuccessful or blank for successful search strings.\n    \"\"\"\n\n    name: Literal[\"textbook.pdf.search.highlight.toggled\"]\n    caseSensitive: bool\n    highlightAll: bool\n    query: str\n    status: str\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.fields.events.TextbookPdfSearchNavigatedNextEventField","title":"<code> TextbookPdfSearchNavigatedNextEventField            (TextbookInteractionBaseEventField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>textbook.pdf.search.navigatednext</code>.<code>event</code> field.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Consists of the value <code>textbook.pdf.search.navigatednext</code>.</p> <code>caseSensitive</code> <code>bool</code> <p>Consists either of the <code>true</code> value if the case sensitive option is selected or <code>false</code> if this option is not selected.</p> <code>findPrevious(bool)</code> <p>Consists either of the \u2018true\u2019 value if the user clicks the Find Previous icon or \u2018false\u2019 if the user clicks the Find Next icon.</p> <code>highlightAll</code> <code>bool</code> <p>Consists either of the <code>true</code> value if the option to highlight all matches is selected or <code>false</code> if this option is not selected.</p> <code>query</code> <code>str</code> <p>Consists of the value in the search field.</p> <code>status</code> <code>str</code> <p>Consists either of the value <code>not found</code> for a search string that is unsuccessful or blank for successful search strings.</p> Source code in <code>ralph/models/edx/textbook_interaction/fields/events.py</code> <pre><code>class TextbookPdfSearchNavigatedNextEventField(TextbookInteractionBaseEventField):\n\"\"\"Pydantic model for `textbook.pdf.search.navigatednext`.`event` field.\n\n    Attributes:\n        name (str): Consists of the value `textbook.pdf.search.navigatednext`.\n        caseSensitive (bool): Consists either of the `true` value if the case sensitive\n            option is selected or `false` if this option is not selected.\n        findPrevious(bool): Consists either of the \u2018true\u2019 value if the user clicks the\n            Find Previous icon or \u2018false\u2019 if the user clicks the &lt;kbd&gt;Find Next&lt;/kbd&gt;\n            icon.\n        highlightAll (bool): Consists either of the `true` value if the option to\n            highlight all matches is selected or `false` if this option is not selected.\n        query (str): Consists of the value in the search field.\n        status (str): Consists either of the value `not found` for a search string that\n            is unsuccessful or blank for successful search strings.\n    \"\"\"\n\n    name: Literal[\"textbook.pdf.search.navigatednext\"]\n    caseSensitive: bool\n    findPrevious: bool\n    highlightAll: bool\n    query: str\n    status: str\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.fields.events.TextbookPdfThumbnailNavigatedEventField","title":"<code> TextbookPdfThumbnailNavigatedEventField            (TextbookInteractionBaseEventField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>textbook.pdf.thumbnail.navigated</code>.<code>event</code> field.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Consists of the value <code>textbook.pdf.thumbnail.navigated</code>.</p> <code>thumbnail_title</code> <code>str</code> <p>Consists of the name of the thumbnail.</p> Source code in <code>ralph/models/edx/textbook_interaction/fields/events.py</code> <pre><code>class TextbookPdfThumbnailNavigatedEventField(TextbookInteractionBaseEventField):\n\"\"\"Pydantic model for `textbook.pdf.thumbnail.navigated`.`event` field.\n\n    Attribute:\n        name (str): Consists of the value `textbook.pdf.thumbnail.navigated`.\n        thumbnail_title (str): Consists of the name of the thumbnail.\n    \"\"\"\n\n    name: Literal[\"textbook.pdf.thumbnail.navigated\"]\n    thumbnail_title: str\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.fields.events.TextbookPdfThumbnailsToggledEventField","title":"<code> TextbookPdfThumbnailsToggledEventField            (TextbookInteractionBaseEventField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>textbook.pdf.thumbnails.toggled</code>.<code>event</code> field.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Consists of the value <code>textbook.pdf.thumbnails.toggled</code>.</p> Source code in <code>ralph/models/edx/textbook_interaction/fields/events.py</code> <pre><code>class TextbookPdfThumbnailsToggledEventField(TextbookInteractionBaseEventField):\n\"\"\"Pydantic model for `textbook.pdf.thumbnails.toggled`.`event` field.\n\n    Attribute:\n        name (str): Consists of the value `textbook.pdf.thumbnails.toggled`.\n    \"\"\"\n\n    name: Literal[\"textbook.pdf.thumbnails.toggled\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.fields.events.TextbookPdfZoomButtonsChangedEventField","title":"<code> TextbookPdfZoomButtonsChangedEventField            (TextbookInteractionBaseEventField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>textbook.pdf.zoom.buttons.changed</code>.<code>event</code> field.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Consists of the value <code>textbook.pdf.zoom.buttons.changed</code>.</p> <code>direction</code> <code>str</code> <p>Consists of either the <code>in</code> or <code>out</code> value.</p> Source code in <code>ralph/models/edx/textbook_interaction/fields/events.py</code> <pre><code>class TextbookPdfZoomButtonsChangedEventField(TextbookInteractionBaseEventField):\n\"\"\"Pydantic model for `textbook.pdf.zoom.buttons.changed`.`event` field.\n\n    Attributes:\n        name (str): Consists of the value `textbook.pdf.zoom.buttons.changed`.\n        direction (str): Consists of either the `in` or `out` value.\n    \"\"\"\n\n    name: Literal[\"textbook.pdf.zoom.buttons.changed\"]\n    direction: Union[Literal[\"in\"], Literal[\"out\"]]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.fields.events.TextbookPdfZoomMenuChangedEventField","title":"<code> TextbookPdfZoomMenuChangedEventField            (TextbookInteractionBaseEventField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>textbook.pdf.zoom.menu.changed</code>.<code>event</code> field.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Consists of the value <code>textbook.pdf.zoom.menu.changed</code>.</p> <code>amount</code> <code>str</code> <p>Consists either of the <code>0.5</code>, <code>0.75</code>, <code>1</code>, <code>1.25</code>, <code>1.5</code>, <code>2</code>, <code>3</code>, <code>4</code>, <code>auto</code>, <code>custom</code>, <code>page-actual</code>, <code>page-fit</code>, <code>page-width</code> value.</p> Source code in <code>ralph/models/edx/textbook_interaction/fields/events.py</code> <pre><code>class TextbookPdfZoomMenuChangedEventField(TextbookInteractionBaseEventField):\n\"\"\"Pydantic model for `textbook.pdf.zoom.menu.changed`.`event` field.\n\n    Attributes:\n        name (str): Consists of the value `textbook.pdf.zoom.menu.changed`.\n        amount (str): Consists either of the `0.5`, `0.75`, `1`, `1.25`, `1.5`, `2`,\n            `3`, `4`, `auto`, `custom`, `page-actual`, `page-fit`, `page-width` value.\n    \"\"\"\n\n    name: Literal[\"textbook.pdf.zoom.menu.changed\"]\n    amount: Union[\n        Literal[\"0.5\"],\n        Literal[\"0.75\"],\n        Literal[\"1\"],\n        Literal[\"1.25\"],\n        Literal[\"1.5\"],\n        Literal[\"2\"],\n        Literal[\"3\"],\n        Literal[\"4\"],\n        Literal[\"auto\"],\n        Literal[\"custom\"],\n        Literal[\"page-actual\"],\n        Literal[\"page-fit\"],\n        Literal[\"page-width\"],\n    ]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.statements","title":"<code>statements</code>","text":"<p>Textbook interaction event model definitions.</p>"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.statements.UIBook","title":"<code> UIBook            (BaseBrowserModel)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>book</code> statement.</p> <p>The browser emits this statement when a user navigates within the PDF Viewer or the PNG Viewer.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>BookEventField</code> <p>See BookEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>book</code>.</p> <code>name</code> <code>str</code> <p>Consists of the value <code>book</code>.</p> Source code in <code>ralph/models/edx/textbook_interaction/statements.py</code> <pre><code>class UIBook(BaseBrowserModel):\n\"\"\"Pydantic model for `book` statement.\n\n    The browser emits this statement when a user navigates within the PDF Viewer or the\n    PNG Viewer.\n\n    Attributes:\n        event (BookEventField): See BookEventField.\n        event_type (str): Consists of the value `book`.\n        name (str): Consists of the value `book`.\n    \"\"\"\n\n    __selector__ = selector(event_source=\"browser\", event_type=\"book\")\n\n    event: Union[\n        Json[BookEventField], BookEventField  # pylint: disable=unsubscriptable-object\n    ]\n    event_type: Literal[\"book\"]\n    name: Literal[\"book\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.statements.UITextbookPdfChapterNavigated","title":"<code> UITextbookPdfChapterNavigated            (BaseBrowserModel)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>textbook.pdf.chapter.navigated</code> statement.</p> <p>The browser emits this statement when a user clicks on a link in the outline to navigate to a chapter.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>json</code> <p>See TextbookPdfChapterNavigatedEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>textbook.pdf.chapter.navigated</code>.</p> <code>name</code> <code>str</code> <p>Consists of the value <code>textbook.pdf.chapter.navigated</code>.</p> Source code in <code>ralph/models/edx/textbook_interaction/statements.py</code> <pre><code>class UITextbookPdfChapterNavigated(BaseBrowserModel):\n\"\"\"Pydantic model for `textbook.pdf.chapter.navigated` statement.\n\n    The browser emits this statement when a user clicks on a link in the outline to\n    navigate to a chapter.\n\n    Attributes:\n        event (json): See TextbookPdfChapterNavigatedEventField.\n        event_type (str): Consists of the value `textbook.pdf.chapter.navigated`.\n        name (str): Consists of the value `textbook.pdf.chapter.navigated`.\n    \"\"\"\n\n    __selector__ = selector(\n        event_source=\"browser\", event_type=\"textbook.pdf.chapter.navigated\"\n    )\n\n    event: Union[\n        Json[  # pylint: disable=unsubscriptable-object\n            TextbookPdfChapterNavigatedEventField\n        ],\n        TextbookPdfChapterNavigatedEventField,\n    ]\n    event_type: Literal[\"textbook.pdf.chapter.navigated\"]\n    name: Literal[\"textbook.pdf.chapter.navigated\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.statements.UITextbookPdfDisplayScaled","title":"<code> UITextbookPdfDisplayScaled            (BaseBrowserModel)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>textbook.pdf.display.scaled</code> statement.</p> <p>The browser emits this statement when the display magnification changes or the first page is shown.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>json</code> <p>See TextbookPdfDisplayScaledEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>textbook.pdf.display.scaled</code>.</p> <code>name</code> <code>str</code> <p>Consists of the value <code>textbook.pdf.display.scaled</code>.</p> Source code in <code>ralph/models/edx/textbook_interaction/statements.py</code> <pre><code>class UITextbookPdfDisplayScaled(BaseBrowserModel):\n\"\"\"Pydantic model for `textbook.pdf.display.scaled` statement.\n\n    The browser emits this statement when the display magnification changes or the\n    first page is shown.\n\n    Attributes:\n        event (json): See TextbookPdfDisplayScaledEventField.\n        event_type (str): Consists of the value `textbook.pdf.display.scaled`.\n        name (str): Consists of the value `textbook.pdf.display.scaled`.\n    \"\"\"\n\n    __selector__ = selector(\n        event_source=\"browser\", event_type=\"textbook.pdf.display.scaled\"\n    )\n\n    event: Union[\n        Json[  # pylint: disable=unsubscriptable-object\n            TextbookPdfDisplayScaledEventField\n        ],\n        TextbookPdfDisplayScaledEventField,\n    ]\n    event_type: Literal[\"textbook.pdf.display.scaled\"]\n    name: Literal[\"textbook.pdf.display.scaled\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.statements.UITextbookPdfOutlineToggled","title":"<code> UITextbookPdfOutlineToggled            (BaseBrowserModel)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>textbook.pdf.outline.toggled</code> statement.</p> <p>The browser emits this statement when a user clicks the outline icon to show or hide a list of the book\u2019s chapters.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>json</code> <p>See TextbookPdfOutlineToggledEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>textbook.pdf.outline.toggled</code>.</p> <code>name</code> <code>str</code> <p>Consists of the value <code>textbook.pdf.outline.toggled</code>.</p> Source code in <code>ralph/models/edx/textbook_interaction/statements.py</code> <pre><code>class UITextbookPdfOutlineToggled(BaseBrowserModel):\n\"\"\"Pydantic model for `textbook.pdf.outline.toggled` statement.\n\n    The browser emits this statement when a user clicks the outline icon to show or\n    hide a list of the book\u2019s chapters.\n\n    Attributes:\n        event (json): See TextbookPdfOutlineToggledEventField.\n        event_type (str): Consists of the value `textbook.pdf.outline.toggled`.\n        name (str): Consists of the value `textbook.pdf.outline.toggled`.\n    \"\"\"\n\n    __selector__ = selector(\n        event_source=\"browser\", event_type=\"textbook.pdf.outline.toggled\"\n    )\n\n    event: Union[\n        Json[  # pylint: disable=unsubscriptable-object\n            TextbookPdfOutlineToggledEventField\n        ],\n        TextbookPdfOutlineToggledEventField,\n    ]\n    event_type: Literal[\"textbook.pdf.outline.toggled\"]\n    name: Literal[\"textbook.pdf.outline.toggled\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.statements.UITextbookPdfPageNavigated","title":"<code> UITextbookPdfPageNavigated            (BaseBrowserModel)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>textbook.pdf.page.navigated</code> statement.</p> <p>The browser emits this statement when a user manually enters a page number.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>json</code> <p>See TextbookPdfPageNavigatedEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>textbook.pdf.page.navigated</code>.</p> <code>name</code> <code>str</code> <p>Consists of the value <code>textbook.pdf.page.navigated</code>.</p> Source code in <code>ralph/models/edx/textbook_interaction/statements.py</code> <pre><code>class UITextbookPdfPageNavigated(BaseBrowserModel):\n\"\"\"Pydantic model for `textbook.pdf.page.navigated` statement.\n\n    The browser emits this statement when a user manually enters a page number.\n\n    Attributes:\n        event (json): See TextbookPdfPageNavigatedEventField.\n        event_type (str): Consists of the value `textbook.pdf.page.navigated`.\n        name (str): Consists of the value `textbook.pdf.page.navigated`.\n    \"\"\"\n\n    __selector__ = selector(\n        event_source=\"browser\", event_type=\"textbook.pdf.page.navigated\"\n    )\n\n    event: Union[\n        Json[  # pylint: disable=unsubscriptable-object\n            TextbookPdfPageNavigatedEventField\n        ],\n        TextbookPdfPageNavigatedEventField,\n    ]\n    event_type: Literal[\"textbook.pdf.page.navigated\"]\n    name: Literal[\"textbook.pdf.page.navigated\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.statements.UITextbookPdfPageScrolled","title":"<code> UITextbookPdfPageScrolled            (BaseBrowserModel)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>textbook.pdf.page.scrolled</code> statement.</p> <p>The browser emits this statement when the user scrolls to the next or previous page and the transition takes less than 50 milliseconds.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>json</code> <p>See TextbookPdfPageScrolledEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>textbook.pdf.page.scrolled</code>.</p> <code>name</code> <code>str</code> <p>Consists of the value <code>textbook.pdf.page.scrolled</code>.</p> Source code in <code>ralph/models/edx/textbook_interaction/statements.py</code> <pre><code>class UITextbookPdfPageScrolled(BaseBrowserModel):\n\"\"\"Pydantic model for `textbook.pdf.page.scrolled` statement.\n\n    The browser emits this statement when the user scrolls to the next or previous page\n    and the transition takes less than 50 milliseconds.\n\n    Attributes:\n        event (json): See TextbookPdfPageScrolledEventField.\n        event_type (str): Consists of the value `textbook.pdf.page.scrolled`.\n        name (str): Consists of the value `textbook.pdf.page.scrolled`.\n    \"\"\"\n\n    __selector__ = selector(\n        event_source=\"browser\", event_type=\"textbook.pdf.page.scrolled\"\n    )\n\n    event: Union[\n        Json[  # pylint: disable=unsubscriptable-object\n            TextbookPdfPageScrolledEventField\n        ],\n        TextbookPdfPageScrolledEventField,\n    ]\n    event_type: Literal[\"textbook.pdf.page.scrolled\"]\n    name: Literal[\"textbook.pdf.page.scrolled\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.statements.UITextbookPdfSearchCaseSensitivityToggled","title":"<code> UITextbookPdfSearchCaseSensitivityToggled            (BaseBrowserModel)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>textbook.pdf.searchcasesensitivity.toggled</code> statement.</p> <p>The browser emits this statement when a user selects or clears the Match Case option.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>json</code> <p>See TextbookPdfSearchCaseSensitivityToggledEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>textbook.pdf.searchcasesensitivity.toggled</code>.</p> <code>name</code> <code>str</code> <p>Consists of the value <code>textbook.pdf.searchcasesensitivity.toggled</code>.</p> Source code in <code>ralph/models/edx/textbook_interaction/statements.py</code> <pre><code>class UITextbookPdfSearchCaseSensitivityToggled(BaseBrowserModel):\n\"\"\"Pydantic model for `textbook.pdf.searchcasesensitivity.toggled` statement.\n\n    The browser emits this statement when a user selects or clears the\n    &lt;kbd&gt;Match Case&lt;/kbd&gt; option.\n\n    Attributes:\n        event (json): See TextbookPdfSearchCaseSensitivityToggledEventField.\n        event_type (str): Consists of the value\n            `textbook.pdf.searchcasesensitivity.toggled`.\n        name (str): Consists of the value `textbook.pdf.searchcasesensitivity.toggled`.\n    \"\"\"\n\n    __selector__ = selector(\n        event_source=\"browser\", event_type=\"textbook.pdf.searchcasesensitivity.toggled\"\n    )\n\n    event: Union[\n        Json[  # pylint: disable=unsubscriptable-object\n            TextbookPdfSearchCaseSensitivityToggledEventField\n        ],\n        TextbookPdfSearchCaseSensitivityToggledEventField,\n    ]\n    event_type: Literal[\"textbook.pdf.searchcasesensitivity.toggled\"]\n    name: Literal[\"textbook.pdf.searchcasesensitivity.toggled\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.statements.UITextbookPdfSearchExecuted","title":"<code> UITextbookPdfSearchExecuted            (BaseBrowserModel)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>textbook.pdf.search.executed</code> statement.</p> <p>The browser emits this statement when a user searches for a text value in the file.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>json</code> <p>See TextbookPdfSearchExecutedEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>textbook.pdf.search.executed</code>.</p> <code>name</code> <code>str</code> <p>Consists of the value <code>textbook.pdf.search.executed</code>.</p> Source code in <code>ralph/models/edx/textbook_interaction/statements.py</code> <pre><code>class UITextbookPdfSearchExecuted(BaseBrowserModel):\n\"\"\"Pydantic model for `textbook.pdf.search.executed` statement.\n\n    The browser emits this statement when a user searches for a text value in the file.\n\n    Attributes:\n        event (json): See TextbookPdfSearchExecutedEventField.\n        event_type (str): Consists of the value `textbook.pdf.search.executed`.\n        name (str): Consists of the value `textbook.pdf.search.executed`.\n    \"\"\"\n\n    __selector__ = selector(\n        event_source=\"browser\", event_type=\"textbook.pdf.search.executed\"\n    )\n\n    event: Union[\n        Json[  # pylint: disable=unsubscriptable-object\n            TextbookPdfSearchExecutedEventField\n        ],\n        TextbookPdfSearchExecutedEventField,\n    ]\n    event_type: Literal[\"textbook.pdf.search.executed\"]\n    name: Literal[\"textbook.pdf.search.executed\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.statements.UITextbookPdfSearchHighlightToggled","title":"<code> UITextbookPdfSearchHighlightToggled            (BaseBrowserModel)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>textbook.pdf.search.highlight.toggled</code> statement.</p> <p>The browser emits this statement when a user selects or clears the Highlight All option.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>json</code> <p>See TextbookPdfSearchHighlightToggledEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>textbook.pdf.search.highlight.toggled</code>.</p> <code>name</code> <code>str</code> <p>Consists of the value <code>textbook.pdf.search.highlight.toggled</code>.</p> Source code in <code>ralph/models/edx/textbook_interaction/statements.py</code> <pre><code>class UITextbookPdfSearchHighlightToggled(BaseBrowserModel):\n\"\"\"Pydantic model for `textbook.pdf.search.highlight.toggled` statement.\n\n    The browser emits this statement when a user selects or clears the\n    &lt;kbd&gt;Highlight All&lt;/kbd&gt; option.\n\n    Attributes:\n        event (json): See TextbookPdfSearchHighlightToggledEventField.\n        event_type (str): Consists of the value `textbook.pdf.search.highlight.toggled`.\n        name (str): Consists of the value `textbook.pdf.search.highlight.toggled`.\n    \"\"\"\n\n    __selector__ = selector(\n        event_source=\"browser\", event_type=\"textbook.pdf.search.highlight.toggled\"\n    )\n\n    event: Union[\n        Json[  # pylint: disable=unsubscriptable-object\n            TextbookPdfSearchHighlightToggledEventField\n        ],\n        TextbookPdfSearchHighlightToggledEventField,\n    ]\n    event_type: Literal[\"textbook.pdf.search.highlight.toggled\"]\n    name: Literal[\"textbook.pdf.search.highlight.toggled\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.statements.UITextbookPdfSearchNavigatedNext","title":"<code> UITextbookPdfSearchNavigatedNext            (BaseBrowserModel)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>textbook.pdf.search.navigatednext</code> statement.</p> <p>The browser emits this statement when a user clicks on the Find Next or Find Previous icons for an entered search string.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>json</code> <p>See TextbookPdfSearchNavigatedNextEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>textbook.pdf.search.navigatednext</code>.</p> <code>name</code> <code>str</code> <p>Consists of the value <code>textbook.pdf.search.navigatednext</code>.</p> Source code in <code>ralph/models/edx/textbook_interaction/statements.py</code> <pre><code>class UITextbookPdfSearchNavigatedNext(BaseBrowserModel):\n\"\"\"Pydantic model for `textbook.pdf.search.navigatednext` statement.\n\n    The browser emits this statement when a user clicks on the &lt;kbd&gt;Find Next&lt;/kbd&gt; or\n    &lt;kbd&gt;Find Previous&lt;/kbd&gt; icons for an entered search string.\n\n    Attributes:\n        event (json): See TextbookPdfSearchNavigatedNextEventField.\n        event_type (str): Consists of the value `textbook.pdf.search.navigatednext`.\n        name (str): Consists of the value `textbook.pdf.search.navigatednext`.\n    \"\"\"\n\n    __selector__ = selector(\n        event_source=\"browser\", event_type=\"textbook.pdf.search.navigatednext\"\n    )\n\n    event: Union[\n        Json[  # pylint: disable=unsubscriptable-object\n            TextbookPdfSearchNavigatedNextEventField\n        ],\n        TextbookPdfSearchNavigatedNextEventField,\n    ]\n    event_type: Literal[\"textbook.pdf.search.navigatednext\"]\n    name: Literal[\"textbook.pdf.search.navigatednext\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.statements.UITextbookPdfThumbnailNavigated","title":"<code> UITextbookPdfThumbnailNavigated            (BaseBrowserModel)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>textbook.pdf.thumbnail.navigated</code> statement.</p> <p>The browser emits this statement when a user clicks on a thumbnail image to navigate to a page.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>json</code> <p>See TextbookPdfThumbnailNavigatedEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>textbook.pdf.thumbnail.navigated</code>.</p> <code>name</code> <code>str</code> <p>Consists of the value <code>textbook.pdf.thumbnail.navigated</code>.</p> Source code in <code>ralph/models/edx/textbook_interaction/statements.py</code> <pre><code>class UITextbookPdfThumbnailNavigated(BaseBrowserModel):\n\"\"\"Pydantic model for `textbook.pdf.thumbnail.navigated` statement.\n\n    The browser emits this statement when a user clicks on a thumbnail image to\n    navigate to a page.\n\n    Attributes:\n        event (json): See TextbookPdfThumbnailNavigatedEventField.\n        event_type (str): Consists of the value `textbook.pdf.thumbnail.navigated`.\n        name (str): Consists of the value `textbook.pdf.thumbnail.navigated`.\n    \"\"\"\n\n    __selector__ = selector(\n        event_source=\"browser\", event_type=\"textbook.pdf.thumbnail.navigated\"\n    )\n\n    event: Union[\n        Json[  # pylint: disable=unsubscriptable-object\n            TextbookPdfThumbnailNavigatedEventField\n        ],\n        TextbookPdfThumbnailNavigatedEventField,\n    ]\n    event_type: Literal[\"textbook.pdf.thumbnail.navigated\"]\n    name: Literal[\"textbook.pdf.thumbnail.navigated\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.statements.UITextbookPdfThumbnailsToggled","title":"<code> UITextbookPdfThumbnailsToggled            (BaseBrowserModel)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>textbook.pdf.thumbnails.toggled</code> statement.</p> <p>The browser emits this statement when a user clicks on the icon to show or hide page thumbnails.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>json</code> <p>See TextbookPdfThumbnailsToggledEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>textbook.pdf.thumbnails.toggled</code>.</p> <code>name</code> <code>str</code> <p>Consists of the value <code>textbook.pdf.thumbnails.toggled</code>.</p> Source code in <code>ralph/models/edx/textbook_interaction/statements.py</code> <pre><code>class UITextbookPdfThumbnailsToggled(BaseBrowserModel):\n\"\"\"Pydantic model for `textbook.pdf.thumbnails.toggled` statement.\n\n    The browser emits this statement when a user clicks on the icon to show or hide\n    page thumbnails.\n\n    Attributes:\n        event (json): See TextbookPdfThumbnailsToggledEventField.\n        event_type (str): Consists of the value `textbook.pdf.thumbnails.toggled`.\n        name (str): Consists of the value `textbook.pdf.thumbnails.toggled`.\n    \"\"\"\n\n    __selector__ = selector(\n        event_source=\"browser\", event_type=\"textbook.pdf.thumbnails.toggled\"\n    )\n\n    event: Union[\n        Json[  # pylint: disable=unsubscriptable-object\n            TextbookPdfThumbnailsToggledEventField\n        ],\n        TextbookPdfThumbnailsToggledEventField,\n    ]\n    event_type: Literal[\"textbook.pdf.thumbnails.toggled\"]\n    name: Literal[\"textbook.pdf.thumbnails.toggled\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.statements.UITextbookPdfZoomButtonsChanged","title":"<code> UITextbookPdfZoomButtonsChanged            (BaseBrowserModel)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>textbook.pdf.zoom.buttons.changed</code> statement.</p> <p>The browser emits this statement when a user clicks either the Zoom In or Zoom Out icon.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>json</code> <p>See TextbookPdfZoomButtonsChangedEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>textbook.pdf.zoom.buttons.changed</code>.</p> <code>name</code> <code>str</code> <p>Consists of the value <code>textbook.pdf.zoom.buttons.changed</code>.</p> Source code in <code>ralph/models/edx/textbook_interaction/statements.py</code> <pre><code>class UITextbookPdfZoomButtonsChanged(BaseBrowserModel):\n\"\"\"Pydantic model for `textbook.pdf.zoom.buttons.changed` statement.\n\n    The browser emits this statement when a user clicks either the &lt;kbd&gt;Zoom In&lt;/kbd&gt;\n    or &lt;kbd&gt;Zoom Out&lt;/kbd&gt; icon.\n\n    Attributes:\n        event (json): See TextbookPdfZoomButtonsChangedEventField.\n        event_type (str): Consists of the value `textbook.pdf.zoom.buttons.changed`.\n        name (str): Consists of the value `textbook.pdf.zoom.buttons.changed`.\n    \"\"\"\n\n    __selector__ = selector(\n        event_source=\"browser\", event_type=\"textbook.pdf.zoom.buttons.changed\"\n    )\n\n    event: Union[\n        Json[  # pylint: disable=unsubscriptable-object\n            TextbookPdfZoomButtonsChangedEventField\n        ],\n        TextbookPdfZoomButtonsChangedEventField,\n    ]\n    event_type: Literal[\"textbook.pdf.zoom.buttons.changed\"]\n    name: Literal[\"textbook.pdf.zoom.buttons.changed\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.statements.UITextbookPdfZoomMenuChanged","title":"<code> UITextbookPdfZoomMenuChanged            (BaseBrowserModel)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>textbook.pdf.zoom.menu.changed</code> statement.</p> <p>The browser emits this statement when a user selects a magnification setting.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>json</code> <p>See TextbookPdfZoomMenuChangedEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>textbook.pdf.zoom.menu.changed</code>.</p> <code>name</code> <code>str</code> <p>Consists of the value <code>textbook.pdf.zoom.menu.changed</code>.</p> Source code in <code>ralph/models/edx/textbook_interaction/statements.py</code> <pre><code>class UITextbookPdfZoomMenuChanged(BaseBrowserModel):\n\"\"\"Pydantic model for `textbook.pdf.zoom.menu.changed` statement.\n\n    The browser emits this statement when a user selects a magnification setting.\n\n    Attributes:\n        event (json): See TextbookPdfZoomMenuChangedEventField.\n        event_type (str): Consists of the value `textbook.pdf.zoom.menu.changed`.\n        name (str): Consists of the value `textbook.pdf.zoom.menu.changed`.\n    \"\"\"\n\n    __selector__ = selector(\n        event_source=\"browser\", event_type=\"textbook.pdf.zoom.menu.changed\"\n    )\n\n    event: Union[\n        Json[  # pylint: disable=unsubscriptable-object\n            TextbookPdfZoomMenuChangedEventField\n        ],\n        TextbookPdfZoomMenuChangedEventField,\n    ]\n    event_type: Literal[\"textbook.pdf.zoom.menu.changed\"]\n    name: Literal[\"textbook.pdf.zoom.menu.changed\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.video","title":"<code>video</code>  <code>special</code>","text":""},{"location":"models/edx/#ralph.models.edx.video.fields","title":"<code>fields</code>  <code>special</code>","text":""},{"location":"models/edx/#ralph.models.edx.video.fields.events","title":"<code>events</code>","text":"<p>Video event fields definitions.</p>"},{"location":"models/edx/#ralph.models.edx.video.fields.events.PauseVideoEventField","title":"<code> PauseVideoEventField            (VideoBaseEventField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>pause_video</code>.<code>event</code>.</p> <p>Attributes:</p> Name Type Description <code>currentTime</code> <code>float</code> <p>Consists of the time in the video at which the statement was emitted.</p> Source code in <code>ralph/models/edx/video/fields/events.py</code> <pre><code>class PauseVideoEventField(VideoBaseEventField):\n\"\"\"Pydantic model for `pause_video`.`event`.\n\n    Attributes:\n        currentTime (float): Consists of the time in the video at which\n            the statement was emitted.\n    \"\"\"\n\n    currentTime: float\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.video.fields.events.PlayVideoEventField","title":"<code> PlayVideoEventField            (VideoBaseEventField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>play_video</code>.<code>event</code> field.</p> <p>Attributes:</p> Name Type Description <code>currentTime</code> <code>float</code> <p>Consists of the time in the video at which the statement was emitted.</p> Source code in <code>ralph/models/edx/video/fields/events.py</code> <pre><code>class PlayVideoEventField(VideoBaseEventField):\n\"\"\"Pydantic model for `play_video`.`event` field.\n\n    Attributes:\n        currentTime (float): Consists of the time in the video at which\n            the statement was emitted.\n    \"\"\"\n\n    currentTime: float\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.video.fields.events.SeekVideoEventField","title":"<code> SeekVideoEventField            (VideoBaseEventField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>seek_video</code>.<code>event</code> field.</p> <p>Attributes:</p> Name Type Description <code>new_time</code> <code>float</code> <p>Consists of the point in time the actor changed to in a media object during a seek operation.</p> <code>old_time</code> <code>float</code> <p>Consists of the point in time the actor changed from in a media object during a seek operation.</p> <code>type</code> <code>str</code> <p>Consists of the navigational method used to change position within the video, either <code>onCaptionSeek</code> or <code>onSlideSeek</code> value.</p> Source code in <code>ralph/models/edx/video/fields/events.py</code> <pre><code>class SeekVideoEventField(VideoBaseEventField):\n\"\"\"Pydantic model for `seek_video`.`event` field.\n\n    Attributes:\n        new_time (float): Consists of the point in time the actor changed to in a media\n            object during a seek operation.\n        old_time (float): Consists of the point in time the actor changed from in a\n            media object during a seek operation.\n        type (str): Consists of the navigational method used to change position\n            within the video, either `onCaptionSeek` or `onSlideSeek` value.\n    \"\"\"\n\n    new_time: float\n    old_time: float\n    type: str\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.video.fields.events.SpeedChangeVideoEventField","title":"<code> SpeedChangeVideoEventField            (VideoBaseEventField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>speed_change_video</code>.<code>event</code> field.</p> <p>Attributes:</p> Name Type Description <code>currentTime</code> <code>float</code> <p>Consists of the time in the video at which the statement was emitted.</p> Source code in <code>ralph/models/edx/video/fields/events.py</code> <pre><code>class SpeedChangeVideoEventField(VideoBaseEventField):\n\"\"\"Pydantic model for `speed_change_video`.`event` field.\n\n    Attributes:\n        currentTime (float): Consists of the time in the video at which\n            the statement was emitted.\n    \"\"\"\n\n    currentTime: float\n    new_speed: Literal[\"0.75\", \"1.0\", \"1.25\", \"1.50\", \"2.0\"]\n    old_speed: Literal[\"0.75\", \"1.0\", \"1.25\", \"1.50\", \"2.0\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.video.fields.events.StopVideoEventField","title":"<code> StopVideoEventField            (VideoBaseEventField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>stop_video</code>.<code>event</code> field.</p> <p>Attributes:</p> Name Type Description <code>currentTime</code> <code>float</code> <p>Consists of the time in the video at which the statement was emitted.</p> Source code in <code>ralph/models/edx/video/fields/events.py</code> <pre><code>class StopVideoEventField(VideoBaseEventField):\n\"\"\"Pydantic model for `stop_video`.`event` field.\n\n    Attributes:\n        currentTime (float): Consists of the time in the video at which\n            the statement was emitted.\n    \"\"\"\n\n    currentTime: float\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.video.fields.events.VideoBaseEventField","title":"<code> VideoBaseEventField            (AbstractBaseEventField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for video core <code>event</code> field.</p> <p>Attributes:</p> Name Type Description <code>code</code> <code>str</code> <p>Consists of the <code>html5</code> value for browser-played videos.</p> <code>id</code> <code>str</code> <p>Consists of the additional videos name if given by the course creators, or the system-generated hash code otherwise.</p> Source code in <code>ralph/models/edx/video/fields/events.py</code> <pre><code>class VideoBaseEventField(AbstractBaseEventField):\n\"\"\"Pydantic model for video core `event` field.\n\n    Attributes:\n        code (str): Consists of the `html5` value for browser-played\n            videos.\n        id (str): Consists of the additional videos name if given by the\n            course creators, or the system-generated hash code otherwise.\n    \"\"\"\n\n    class Config:  # pylint: disable=missing-class-docstring # noqa: D106\n        extra = \"allow\"\n\n    code: str\n    id: str\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.video.fields.events.VideoHideTranscriptEventField","title":"<code> VideoHideTranscriptEventField            (VideoBaseEventField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>hide_transcript</code>.<code>event</code> field.</p> <p>Attributes:</p> Name Type Description <code>current_time</code> <code>float</code> <p>Consists of the time in the video at which the statement was emitted.</p> Source code in <code>ralph/models/edx/video/fields/events.py</code> <pre><code>class VideoHideTranscriptEventField(VideoBaseEventField):\n\"\"\"Pydantic model for `hide_transcript`.`event` field.\n\n    Attributes:\n        current_time (float): Consists of the time in the video at which\n            the statement was emitted.\n    \"\"\"\n\n    current_time: float\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.video.fields.events.VideoShowTranscriptEventField","title":"<code> VideoShowTranscriptEventField            (VideoBaseEventField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>show_transcript</code>.<code>event</code> field.</p> <p>Attributes:</p> Name Type Description <code>current_time</code> <code>float</code> <p>Consists of the time in the video at which the statement was emitted.</p> Source code in <code>ralph/models/edx/video/fields/events.py</code> <pre><code>class VideoShowTranscriptEventField(VideoBaseEventField):\n\"\"\"Pydantic model for `show_transcript`.`event` field.\n\n    Attributes:\n        current_time (float): Consists of the time in the video at which\n            the statement was emitted.\n    \"\"\"\n\n    current_time: float\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.video.statements","title":"<code>statements</code>","text":"<p>Video event model definitions.</p>"},{"location":"models/edx/#ralph.models.edx.video.statements.UIHideTranscript","title":"<code> UIHideTranscript            (BaseBrowserModel)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>hide_transcript</code> statement.</p> <p>The browser emits this statement when a user selects CC to suppress display of the video transcript.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>VideoTranscriptEventField</code> <p>See VideoTranscriptEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>hide_transcript</code>.</p> <code>name</code> <code>str</code> <p>Consists either of the value <code>hide_transcript</code> or <code>edx.video.transcript.hidden</code>.</p> Source code in <code>ralph/models/edx/video/statements.py</code> <pre><code>class UIHideTranscript(BaseBrowserModel):\n\"\"\"Pydantic model for `hide_transcript` statement.\n\n    The browser emits this statement when a user selects &lt;kbd&gt;CC&lt;/kbd&gt; to suppress\n    display of the video transcript.\n\n    Attributes:\n        event (VideoTranscriptEventField): See VideoTranscriptEventField.\n        event_type (str): Consists of the value `hide_transcript`.\n        name (str): Consists either of the value `hide_transcript` or\n            `edx.video.transcript.hidden`.\n    \"\"\"\n\n    __selector__ = selector(event_source=\"browser\", event_type=\"hide_transcript\")\n\n    event: Union[\n        Json[VideoHideTranscriptEventField],  # pylint: disable=unsubscriptable-object\n        VideoHideTranscriptEventField,\n    ]\n    event_type: Literal[\"hide_transcript\"]\n    name: Literal[\"hide_transcript\", \"edx.video.transcript.hidden\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.video.statements.UILoadVideo","title":"<code> UILoadVideo            (BaseBrowserModel)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>load_video</code> statement.</p> <p>The browser emits this statement when the video is fully rendered and ready to play.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>VideoBaseEventField</code> <p>See VideoBaseEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>load_video</code>.</p> <code>name</code> <code>str</code> <p>Consists either of the value <code>load_video</code> or <code>edx.video.loaded</code>.</p> Source code in <code>ralph/models/edx/video/statements.py</code> <pre><code>class UILoadVideo(BaseBrowserModel):\n\"\"\"Pydantic model for `load_video` statement.\n\n    The browser emits this statement when the video is fully rendered and ready to\n    play.\n\n    Attributes:\n        event (VideoBaseEventField): See VideoBaseEventField.\n        event_type (str): Consists of the value `load_video`.\n        name (str): Consists either of the value `load_video` or `edx.video.loaded`.\n    \"\"\"\n\n    __selector__ = selector(event_source=\"browser\", event_type=\"load_video\")\n\n    event: Union[\n        Json[VideoBaseEventField],  # pylint: disable=unsubscriptable-object\n        VideoBaseEventField,\n    ]\n    event_type: Literal[\"load_video\"]\n    name: Literal[\"load_video\", \"edx.video.loaded\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.video.statements.UIPauseVideo","title":"<code> UIPauseVideo            (BaseBrowserModel)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>pause_video</code> statement.</p> <p>The browser emits this statement when a user selects the video player\u2019s pause control.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>PauseVideoEventField</code> <p>See PauseVideoEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>pause_video</code>.</p> <code>name</code> <code>str</code> <p>Consists either of the value <code>pause_video</code> or <code>edx.video.paused</code>.</p> Source code in <code>ralph/models/edx/video/statements.py</code> <pre><code>class UIPauseVideo(BaseBrowserModel):\n\"\"\"Pydantic model for `pause_video` statement.\n\n    The browser emits this statement when a user selects the video player's pause\n    control.\n\n    Attributes:\n        event (PauseVideoEventField): See PauseVideoEventField.\n        event_type (str): Consists of the value `pause_video`.\n        name (str): Consists either of the value `pause_video` or `edx.video.paused`.\n    \"\"\"\n\n    __selector__ = selector(event_source=\"browser\", event_type=\"pause_video\")\n\n    event: Union[\n        Json[PauseVideoEventField],  # pylint: disable=unsubscriptable-object\n        PauseVideoEventField,\n    ]\n    event_type: Literal[\"pause_video\"]\n    name: Optional[Literal[\"pause_video\", \"edx.video.paused\"]]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.video.statements.UIPlayVideo","title":"<code> UIPlayVideo            (BaseBrowserModel)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>play_video</code> statement.</p> <p>The browser emits this statement when a user selects the video player\u2019s play control.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>PlayVideoEventField</code> <p>See PlayVideoEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>play_video</code>.</p> <code>name</code> <code>str</code> <p>Consists either of the value <code>play_video</code> or <code>edx.video.played</code>.</p> Source code in <code>ralph/models/edx/video/statements.py</code> <pre><code>class UIPlayVideo(BaseBrowserModel):\n\"\"\"Pydantic model for `play_video` statement.\n\n    The browser emits this statement when a user selects the video player's play\n    control.\n\n    Attributes:\n        event (PlayVideoEventField): See PlayVideoEventField.\n        event_type (str): Consists of the value `play_video`.\n        name (str): Consists either of the value `play_video` or `edx.video.played`.\n    \"\"\"\n\n    __selector__ = selector(event_source=\"browser\", event_type=\"play_video\")\n\n    event: Union[\n        Json[PlayVideoEventField],  # pylint: disable=unsubscriptable-object\n        PlayVideoEventField,\n    ]\n    event_type: Literal[\"play_video\"]\n    name: Optional[Literal[\"play_video\", \"edx.video.played\"]]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.video.statements.UISeekVideo","title":"<code> UISeekVideo            (BaseBrowserModel)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>seek_video</code> statement.</p> <p>The browser emits this statement when a user selects a user interface control to go to a different point in the video file.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>SeekVideoEventField</code> <p>See SeekVideoEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>seek_video</code>.</p> <code>name</code> <code>str</code> <p>Consists either of the value <code>seek_video</code> or <code>edx.video.position.changed</code>.</p> Source code in <code>ralph/models/edx/video/statements.py</code> <pre><code>class UISeekVideo(BaseBrowserModel):\n\"\"\"Pydantic model for `seek_video` statement.\n\n    The browser emits this statement when a user selects a user interface control to go\n    to a different point in the video file.\n\n    Attributes:\n        event (SeekVideoEventField): See SeekVideoEventField.\n        event_type (str): Consists of the value `seek_video`.\n        name (str): Consists either of the value `seek_video` or\n            `edx.video.position.changed`.\n    \"\"\"\n\n    __selector__ = selector(event_source=\"browser\", event_type=\"seek_video\")\n\n    event: Union[\n        Json[SeekVideoEventField],  # pylint: disable=unsubscriptable-object\n        SeekVideoEventField,\n    ]\n    event_type: Literal[\"seek_video\"]\n    name: Optional[Literal[\"seek_video\", \"edx.video.position.changed\"]]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.video.statements.UIShowTranscript","title":"<code> UIShowTranscript            (BaseBrowserModel)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>show_transcript</code> statement.</p> <p>The browser emits this statement when a user selects CC to display the video transcript.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>VideoTranscriptEventField</code> <p>See VideoTranscriptEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>show_transcript</code>.</p> <code>name</code> <code>str</code> <p>Consists either of the value <code>show_transcript</code> or <code>edx.video.transcript.shown</code>.</p> Source code in <code>ralph/models/edx/video/statements.py</code> <pre><code>class UIShowTranscript(BaseBrowserModel):\n\"\"\"Pydantic model for `show_transcript` statement.\n\n    The browser emits this statement when a user selects &lt;kbd&gt;CC&lt;/kbd&gt; to display the\n    video transcript.\n\n    Attributes:\n        event (VideoTranscriptEventField): See VideoTranscriptEventField.\n        event_type (str): Consists of the value `show_transcript`.\n        name (str): Consists either of the value `show_transcript` or\n            `edx.video.transcript.shown`.\n    \"\"\"\n\n    __selector__ = selector(event_source=\"browser\", event_type=\"show_transcript\")\n\n    event: Union[\n        Json[VideoShowTranscriptEventField],  # pylint: disable=unsubscriptable-object\n        VideoShowTranscriptEventField,\n    ]\n    event_type: Literal[\"show_transcript\"]\n    name: Literal[\"show_transcript\", \"edx.video.transcript.shown\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.video.statements.UISpeedChangeVideo","title":"<code> UISpeedChangeVideo            (BaseBrowserModel)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>speed_change_video</code> statement.</p> <p>The browser emits this statement when a user selects a different playing speed for the video.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>SpeedChangeVideoEventField</code> <p>See SpeedChangeVideoEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>speed_change_video</code>.</p> Source code in <code>ralph/models/edx/video/statements.py</code> <pre><code>class UISpeedChangeVideo(BaseBrowserModel):\n\"\"\"Pydantic model for `speed_change_video` statement.\n\n    The browser emits this statement when a user selects a different playing speed for\n    the video.\n\n    Attributes:\n        event (SpeedChangeVideoEventField): See SpeedChangeVideoEventField.\n        event_type (str): Consists of the value `speed_change_video`.\n    \"\"\"\n\n    __selector__ = selector(event_source=\"browser\", event_type=\"speed_change_video\")\n\n    event: Union[\n        Json[SpeedChangeVideoEventField],  # pylint: disable=unsubscriptable-object\n        SpeedChangeVideoEventField,\n    ]\n    event_type: Literal[\"speed_change_video\"]\n    name: Optional[Literal[\"speed_change_video\"]]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.video.statements.UIStopVideo","title":"<code> UIStopVideo            (BaseBrowserModel)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>stop_video</code> statement.</p> <p>The browser emits this statement when the video player reaches the end of the video file and play automatically stops.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>StopVideoEventField</code> <p>See StopVideoEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>stop_video</code>.</p> <code>name</code> <code>str</code> <p>Consists either of the value <code>stop_video</code> or <code>edx.video.stopped</code>.</p> Source code in <code>ralph/models/edx/video/statements.py</code> <pre><code>class UIStopVideo(BaseBrowserModel):\n\"\"\"Pydantic model for `stop_video` statement.\n\n    The browser emits this statement when the video player reaches the end of the video\n    file and play automatically stops.\n\n    Attributes:\n        event (StopVideoEventField): See StopVideoEventField.\n        event_type (str): Consists of the value `stop_video`.\n        name (str): Consists either of the value `stop_video` or `edx.video.stopped`.\n    \"\"\"\n\n    __selector__ = selector(event_source=\"browser\", event_type=\"stop_video\")\n\n    event: Union[\n        Json[StopVideoEventField],  # pylint: disable=unsubscriptable-object\n        StopVideoEventField,\n    ]\n    event_type: Literal[\"stop_video\"]\n    name: Optional[Literal[\"stop_video\", \"edx.video.stopped\"]]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.video.statements.UIVideoHideCCMenu","title":"<code> UIVideoHideCCMenu            (BaseBrowserModel)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>video_hide_cc_menu</code> statement.</p> <p>The browser emits this statement when a user selects a language from the CC menu for a video that has transcripts in multiple languages</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>VideoBaseEventField</code> <p>See VideoBaseEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>video_hide_cc_menu</code>.</p> Source code in <code>ralph/models/edx/video/statements.py</code> <pre><code>class UIVideoHideCCMenu(BaseBrowserModel):\n\"\"\"Pydantic model for `video_hide_cc_menu` statement.\n\n    The browser emits this statement when a user selects a language from the CC menu\n    for a video that has transcripts in multiple languages\n\n    Attributes:\n        event (VideoBaseEventField): See VideoBaseEventField.\n        event_type (str): Consists of the value `video_hide_cc_menu`.\n    \"\"\"\n\n    __selector__ = selector(event_source=\"browser\", event_type=\"video_hide_cc_menu\")\n\n    event: Union[\n        Json[VideoBaseEventField],  # pylint: disable=unsubscriptable-object\n        VideoBaseEventField,\n    ]\n    event_type: Literal[\"video_hide_cc_menu\"]\n    name: Optional[Literal[\"video_hide_cc_menu\"]]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.video.statements.UIVideoShowCCMenu","title":"<code> UIVideoShowCCMenu            (BaseBrowserModel)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>video_show_cc_menu</code> statement.</p> <p>The browser emits this statement when a user selects CC for a video that has transcripts in multiple languages.</p> <p>Note: This statement is emitted in addition to the show_transcript event.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>VideoBaseEventField</code> <p>See VideoBaseEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>video_show_cc_menu</code>.</p> Source code in <code>ralph/models/edx/video/statements.py</code> <pre><code>class UIVideoShowCCMenu(BaseBrowserModel):\n\"\"\"Pydantic model for `video_show_cc_menu` statement.\n\n    The browser emits this statement when a user selects CC for a video that has\n    transcripts in multiple languages.\n\n    Note: This statement is emitted in addition to the show_transcript event.\n\n    Attributes:\n        event (VideoBaseEventField): See VideoBaseEventField.\n        event_type (str): Consists of the value `video_show_cc_menu`.\n    \"\"\"\n\n    __selector__ = selector(event_source=\"browser\", event_type=\"video_show_cc_menu\")\n\n    event: Union[\n        Json[VideoBaseEventField],  # pylint: disable=unsubscriptable-object\n        VideoBaseEventField,\n    ]\n    event_type: Literal[\"video_show_cc_menu\"]\n    name: Optional[Literal[\"video_show_cc_menu\"]]\n</code></pre>"},{"location":"models/xapi/","title":"xAPI events","text":"<p>xAPI pydantic models.</p>"},{"location":"models/xapi/#ralph.models.xapi.base","title":"<code>base</code>","text":"<p>Base xAPI model definition.</p>"},{"location":"models/xapi/#ralph.models.xapi.base.BaseXapiModel","title":"<code> BaseXapiModel            (BaseModelWithConfig)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for base statements.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>UUID</code> <p>Consists of a generated UUID string from the source event string.</p> <code>actor</code> <code>ActorField</code> <p>Consists of a definition of who performed the action.</p> <code>verb</code> <code>VerbField</code> <p>Consists of the action between an Actor and an Activity.</p> <code>object</code> <code>ObjectField</code> <p>Consists of a definition of the thing that was acted on.</p> <code>result</code> <code>ResultField</code> <p>Consists of the outcome related to the Statement.</p> <code>context</code> <code>ContextField</code> <p>Consists of contextual information for the Statement.</p> <code>timestamp</code> <code>datetime</code> <p>Consists of the timestamp of when the event occurred.</p> <code>stored</code> <code>datetime</code> <p>Consists of the timestamp of when the event was recorded.</p> <code>authority</code> <code>ActorField</code> <p>Consists of the Actor asserting this Statement is true.</p> <code>version</code> <code>str</code> <p>Consists of the associated xAPI version of the Statement.</p> <code>attachments</code> <code>List</code> <p>Consists of a list of Attachments.</p> Source code in <code>ralph/models/xapi/base.py</code> <pre><code>class BaseXapiModel(BaseModelWithConfig):\n\"\"\"Pydantic model for base statements.\n\n    Attributes:\n        id (UUID): Consists of a generated UUID string from the source event string.\n        actor (ActorField): Consists of a definition of who performed the action.\n        verb (VerbField): Consists of the action between an Actor and an Activity.\n        object (ObjectField): Consists of a definition of the thing that was acted on.\n        result (ResultField): Consists of the outcome related to the Statement.\n        context (ContextField): Consists of contextual information for the Statement.\n        timestamp (datetime): Consists of the timestamp of when the event occurred.\n        stored (datetime): Consists of the timestamp of when the event was recorded.\n        authority (ActorField): Consists of the Actor asserting this Statement is true.\n        version (str): Consists of the associated xAPI version of the Statement.\n        attachments (List): Consists of a list of Attachments.\n    \"\"\"\n\n    id: Optional[UUID]\n    actor: ActorField\n    verb: VerbField\n    object: ObjectField\n    result: Optional[ResultField]\n    context: Optional[ContextField]\n    timestamp: Optional[datetime]\n    stored: Optional[datetime]\n    authority: Optional[ActorField]\n    version: constr(regex=r\"^1\\.0\\.[0-9]+$\") = \"1.0.0\"  # noqa:F722\n    attachments: Optional[List[AttachmentField]]\n\n    @root_validator(pre=True)\n    @classmethod\n    def check_abscence_of_empty_and_invalid_values(cls, values):\n\"\"\"Checks the model for empty and invalid values.\n\n        Checks that the `context` field contains `platform` and `revision` fields\n        only if the `object.objectType` property is equal to `Activity`.\n        \"\"\"\n        for field, value in list(values.items()):\n            if value in [None, \"\", {}]:\n                raise ValueError(f\"{field}: invalid empty value\")\n            if isinstance(value, dict) and field != \"extensions\":\n                cls.check_abscence_of_empty_and_invalid_values(value)\n\n        context = dict(values.get(\"context\", {}))\n        if context:\n            platform = context.get(\"platform\", {})\n            revision = context.get(\"revision\", {})\n            object_type = dict(values[\"object\"]).get(\"objectType\", \"Activity\")\n            if (platform or revision) and object_type != \"Activity\":\n                raise ValueError(\n                    \"revision and platform properties can only be used if the \"\n                    \"Statement's Object is an Activity\"\n                )\n        return values\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.base.BaseXapiModel.check_abscence_of_empty_and_invalid_values","title":"<code>check_abscence_of_empty_and_invalid_values(values)</code>  <code>classmethod</code>","text":"<p>Checks the model for empty and invalid values.</p> <p>Checks that the <code>context</code> field contains <code>platform</code> and <code>revision</code> fields only if the <code>object.objectType</code> property is equal to <code>Activity</code>.</p> Source code in <code>ralph/models/xapi/base.py</code> <pre><code>@root_validator(pre=True)\n@classmethod\ndef check_abscence_of_empty_and_invalid_values(cls, values):\n\"\"\"Checks the model for empty and invalid values.\n\n    Checks that the `context` field contains `platform` and `revision` fields\n    only if the `object.objectType` property is equal to `Activity`.\n    \"\"\"\n    for field, value in list(values.items()):\n        if value in [None, \"\", {}]:\n            raise ValueError(f\"{field}: invalid empty value\")\n        if isinstance(value, dict) and field != \"extensions\":\n            cls.check_abscence_of_empty_and_invalid_values(value)\n\n    context = dict(values.get(\"context\", {}))\n    if context:\n        platform = context.get(\"platform\", {})\n        revision = context.get(\"revision\", {})\n        object_type = dict(values[\"object\"]).get(\"objectType\", \"Activity\")\n        if (platform or revision) and object_type != \"Activity\":\n            raise ValueError(\n                \"revision and platform properties can only be used if the \"\n                \"Statement's Object is an Activity\"\n            )\n    return values\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.config","title":"<code>config</code>","text":"<p>Base xAPI model configuration.</p>"},{"location":"models/xapi/#ralph.models.xapi.config.BaseExtensionModelWithConfig","title":"<code> BaseExtensionModelWithConfig            (BaseModel)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for extension configuration shared among all models.</p> Source code in <code>ralph/models/xapi/config.py</code> <pre><code>class BaseExtensionModelWithConfig(BaseModel):\n\"\"\"Pydantic model for extension configuration shared among all models.\"\"\"\n\n    class Config:  # pylint: disable=missing-class-docstring # noqa: D106\n        extra = Extra.allow\n        min_anystr_length = 0\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.config.BaseModelWithConfig","title":"<code> BaseModelWithConfig            (BaseModel)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for base configuration shared among all models.</p> Source code in <code>ralph/models/xapi/config.py</code> <pre><code>class BaseModelWithConfig(BaseModel):\n\"\"\"Pydantic model for base configuration shared among all models.\"\"\"\n\n    class Config:  # pylint: disable=missing-class-docstring # noqa: D106\n        extra = Extra.forbid\n        min_anystr_length = 1\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.constants","title":"<code>constants</code>","text":"<p>Constants for xAPI specifications.</p>"},{"location":"models/xapi/#ralph.models.xapi.fields","title":"<code>fields</code>  <code>special</code>","text":""},{"location":"models/xapi/#ralph.models.xapi.fields.actors","title":"<code>actors</code>","text":"<p>Common xAPI actor field definitions.</p>"},{"location":"models/xapi/#ralph.models.xapi.fields.actors.AccountActorAccountField","title":"<code> AccountActorAccountField            (BaseModelWithConfig)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>actor.account</code> field.</p> <p>Attributes:</p> Name Type Description <code>homePage</code> <code>IRI</code> <p>Consists of the home page of the account\u2019s service provider.</p> <code>name</code> <code>str</code> <p>Consists of the unique id or name of the Actor\u2019s account.</p> Source code in <code>ralph/models/xapi/fields/actors.py</code> <pre><code>class AccountActorAccountField(BaseModelWithConfig):\n\"\"\"Pydantic model for `actor.account` field.\n\n    Attributes:\n        homePage (IRI): Consists of the home page of the account's service provider.\n        name (str): Consists of the unique id or name of the Actor's account.\n    \"\"\"\n\n    homePage: IRI\n    name: StrictStr\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.fields.actors.AccountActorField","title":"<code> AccountActorField            (BaseActorField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>actor</code> field.</p> <p>It defines an account Inverse Functional Identifier.</p> <p>Attributes:</p> Name Type Description <code>account</code> <code>dict</code> <p>See AccountActorAccountField.</p> Source code in <code>ralph/models/xapi/fields/actors.py</code> <pre><code>class AccountActorField(BaseActorField):\n\"\"\"Pydantic model for `actor` field.\n\n    It defines an account Inverse Functional Identifier.\n\n    Attributes:\n        account (dict): See AccountActorAccountField.\n    \"\"\"\n\n    account: AccountActorAccountField\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.fields.actors.AccountGroupActorField","title":"<code> AccountGroupActorField            (BaseIdentifiedGroupActorField, AccountActorField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>actor</code> field.</p> <p>It is defined for group type with an account IFI.</p> Source code in <code>ralph/models/xapi/fields/actors.py</code> <pre><code>class AccountGroupActorField(BaseIdentifiedGroupActorField, AccountActorField):\n\"\"\"Pydantic model for `actor` field.\n\n    It is defined for group type with an account IFI.\n    \"\"\"\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.fields.actors.AnonymousGroupActorField","title":"<code> AnonymousGroupActorField            (BaseActorField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>actor</code> field.</p> <p>It is defined for Anonymous Group type.</p> <p>Attributes:</p> Name Type Description <code>objectType</code> <code>str</code> <p>Consists of the value <code>Group</code>.</p> <code>member</code> <code>list</code> <p>Consist of a list of the members of this Group.</p> Source code in <code>ralph/models/xapi/fields/actors.py</code> <pre><code>class AnonymousGroupActorField(BaseActorField):\n\"\"\"Pydantic model for `actor` field.\n\n    It is defined for Anonymous Group type.\n\n    Attributes:\n        objectType (str): Consists of the value `Group`.\n        member (list): Consist of a list of the members of this Group.\n    \"\"\"\n\n    objectType: Literal[\"Group\"]\n    member: List[AgentActorField]\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.fields.actors.BaseActorField","title":"<code> BaseActorField            (BaseModelWithConfig)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for core <code>actor</code> field.</p> <p>It defines who performed the action.</p> <p>Attributes:</p> Name Type Description <code>objectType</code> <code>str</code> <p>Consists of the value <code>Agent</code>.</p> <code>name</code> <code>str</code> <p>Consists of the full name of the Agent.</p> Source code in <code>ralph/models/xapi/fields/actors.py</code> <pre><code>class BaseActorField(BaseModelWithConfig):\n\"\"\"Pydantic model for core `actor` field.\n\n    It defines who performed the action.\n\n    Attributes:\n        objectType (str): Consists of the value `Agent`.\n        name (str): Consists of the full name of the Agent.\n    \"\"\"\n\n    objectType: Optional[Literal[\"Agent\"]]\n    name: Optional[StrictStr]\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.fields.actors.BaseIdentifiedGroupActorField","title":"<code> BaseIdentifiedGroupActorField            (AnonymousGroupActorField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>actor</code> field.</p> <p>It is defined for Identified Group type.</p> <p>Attributes:</p> Name Type Description <code>member</code> <code>list</code> <p>Consist of a list of the members of this Group.</p> Source code in <code>ralph/models/xapi/fields/actors.py</code> <pre><code>class BaseIdentifiedGroupActorField(AnonymousGroupActorField):\n\"\"\"Pydantic model for `actor` field.\n\n    It is defined for Identified Group type.\n\n    Attributes:\n        member (list): Consist of a list of the members of this Group.\n    \"\"\"\n\n    member: Optional[List[AgentActorField]]\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.fields.actors.MboxActorField","title":"<code> MboxActorField            (BaseActorField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>actor</code> field.</p> <p>It defines a mailto Inverse Functional Identifier.</p> <p>Attributes:</p> Name Type Description <code>mbox</code> <code>MailtoEmail</code> <p>Consists of the Agent\u2019s email address.</p> Source code in <code>ralph/models/xapi/fields/actors.py</code> <pre><code>class MboxActorField(BaseActorField):\n\"\"\"Pydantic model for `actor` field.\n\n    It defines a mailto Inverse Functional Identifier.\n\n    Attributes:\n        mbox (MailtoEmail): Consists of the Agent's email address.\n    \"\"\"\n\n    mbox: MailtoEmail\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.fields.actors.MboxGroupActorField","title":"<code> MboxGroupActorField            (BaseIdentifiedGroupActorField, MboxActorField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>actor</code> field.</p> <p>It is defined for group type with a mailto IFI.</p> Source code in <code>ralph/models/xapi/fields/actors.py</code> <pre><code>class MboxGroupActorField(BaseIdentifiedGroupActorField, MboxActorField):\n\"\"\"Pydantic model for `actor` field.\n\n    It is defined for group type with a mailto IFI.\n    \"\"\"\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.fields.actors.MboxSha1SumActorField","title":"<code> MboxSha1SumActorField            (BaseActorField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>actor</code> field.</p> <p>It defines a hash Inverse Functional Identifier.</p> <p>Attributes:</p> Name Type Description <code>mbox_sha1sum</code> <code>str</code> <p>Consists of the SHA1 hash of the Agent\u2019s email address.</p> Source code in <code>ralph/models/xapi/fields/actors.py</code> <pre><code>class MboxSha1SumActorField(BaseActorField):\n\"\"\"Pydantic model for `actor` field.\n\n    It defines a hash Inverse Functional Identifier.\n\n    Attributes:\n        mbox_sha1sum (str): Consists of the SHA1 hash of the Agent's email address.\n    \"\"\"\n\n    mbox_sha1sum: constr(regex=r\"^[0-9a-f]{40}$\")  # noqa:F722\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.fields.actors.MboxSha1SumGroupActorField","title":"<code> MboxSha1SumGroupActorField            (BaseIdentifiedGroupActorField, MboxSha1SumActorField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>actor</code> field.</p> <p>It is defined for group type with a hash IFI.</p> Source code in <code>ralph/models/xapi/fields/actors.py</code> <pre><code>class MboxSha1SumGroupActorField(BaseIdentifiedGroupActorField, MboxSha1SumActorField):\n\"\"\"Pydantic model for `actor` field.\n\n    It is defined for group type with a hash IFI.\n    \"\"\"\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.fields.actors.OpenIdActorField","title":"<code> OpenIdActorField            (BaseActorField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>actor</code> field.</p> <p>It defines an OpenID Inverse Functional Identifier.</p> <p>Attributes:</p> Name Type Description <code>openid</code> <code>URI</code> <p>Consists of an openID that uniquely identifies the Agent.</p> Source code in <code>ralph/models/xapi/fields/actors.py</code> <pre><code>class OpenIdActorField(BaseActorField):\n\"\"\"Pydantic model for `actor` field.\n\n    It defines an OpenID Inverse Functional Identifier.\n\n    Attributes:\n        openid (URI): Consists of an openID that uniquely identifies the Agent.\n    \"\"\"\n\n    openid: AnyUrl\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.fields.actors.OpenIdGroupActorField","title":"<code> OpenIdGroupActorField            (BaseIdentifiedGroupActorField, OpenIdActorField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>actor</code> field.</p> <p>It is defined for group type with an openID IFI.</p> Source code in <code>ralph/models/xapi/fields/actors.py</code> <pre><code>class OpenIdGroupActorField(BaseIdentifiedGroupActorField, OpenIdActorField):\n\"\"\"Pydantic model for `actor` field.\n\n    It is defined for group type with an openID IFI.\n    \"\"\"\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.fields.attachments","title":"<code>attachments</code>","text":"<p>Common xAPI attachments field definitions.</p>"},{"location":"models/xapi/#ralph.models.xapi.fields.attachments.AttachmentField","title":"<code> AttachmentField            (BaseModelWithConfig)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>attachment</code> field.</p> <p>Attributes:</p> Name Type Description <code>usageType</code> <code>IRI</code> <p>Identifies the usage of this Attachment.</p> <code>display</code> <code>LanguageMap</code> <p>Consists of the Attachment\u2019s title.</p> <code>description</code> <code>LanguageMap</code> <p>Consists of the Attachment\u2019s description.</p> <code>contentType</code> <code>str</code> <p>Consists of the Attachment\u2019s content type.</p> <code>length</code> <code>int</code> <p>Consists of the length of the Attachment\u2019s data in octets.</p> <code>sha2</code> <code>str</code> <p>Consists of the SHA-2 hash of the Attachment data.</p> <code>fileUrl</code> <code>URL</code> <p>Consists of the URL from which the Attachment can be retrieved.</p> Source code in <code>ralph/models/xapi/fields/attachments.py</code> <pre><code>class AttachmentField(BaseModelWithConfig):\n\"\"\"Pydantic model for `attachment` field.\n\n    Attributes:\n        usageType (IRI): Identifies the usage of this Attachment.\n        display (LanguageMap): Consists of the Attachment's title.\n        description (LanguageMap): Consists of the Attachment's description.\n        contentType (str): Consists of the Attachment's content type.\n        length (int): Consists of the length of the Attachment's data in octets.\n        sha2 (str): Consists of the SHA-2 hash of the Attachment data.\n        fileUrl (URL): Consists of the URL from which the Attachment can be retrieved.\n    \"\"\"\n\n    usageType: IRI\n    display: LanguageMap\n    description: Optional[LanguageMap]\n    contentType: str\n    length: int\n    sha2: str\n    fileUrl: Optional[AnyUrl]\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.fields.common","title":"<code>common</code>","text":"<p>Common xAPI field definitions.</p>"},{"location":"models/xapi/#ralph.models.xapi.fields.common.IRI","title":"<code> IRI            (str)         </code>","text":"<p>Pydantic custom data type validating RFC 3987 IRIs.</p> Source code in <code>ralph/models/xapi/fields/common.py</code> <pre><code>class IRI(str):\n\"\"\"Pydantic custom data type validating RFC 3987 IRIs.\"\"\"\n\n    @classmethod\n    def __get_validators__(cls):  # noqa: D105\n        def validate(iri: str):\n\"\"\"Checks whether the provided IRI is a valid RFC 3987 IRI.\"\"\"\n            parse(iri, rule=\"IRI\")\n            return cls(iri)\n\n        yield validate\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.fields.common.LanguageTag","title":"<code> LanguageTag            (str)         </code>","text":"<p>Pydantic custom data type validating RFC 5646 Language tags.</p> Source code in <code>ralph/models/xapi/fields/common.py</code> <pre><code>class LanguageTag(str):\n\"\"\"Pydantic custom data type validating RFC 5646 Language tags.\"\"\"\n\n    @classmethod\n    def __get_validators__(cls):  # noqa: D105\n        def validate(tag: str):\n\"\"\"Checks whether the provided tag is a valid RFC 5646 Language tag.\"\"\"\n            if not tag_is_valid(tag):\n                raise TypeError(\"Invalid RFC 5646 Language tag\")\n            return cls(tag)\n\n        yield validate\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.fields.common.MailtoEmail","title":"<code> MailtoEmail            (str)         </code>","text":"<p>Pydantic custom data type validating <code>mailto:email</code> format.</p> Source code in <code>ralph/models/xapi/fields/common.py</code> <pre><code>class MailtoEmail(str):\n\"\"\"Pydantic custom data type validating `mailto:email` format.\"\"\"\n\n    @classmethod\n    def __get_validators__(cls):  # noqa: D105\n        def validate(mailto: str):\n\"\"\"Checks whether the provided value follows the `mailto:email` format.\"\"\"\n            if not mailto.startswith(\"mailto:\"):\n                raise TypeError(\"Invalid `mailto:email` value\")\n            valid = validate_email(mailto[7:])\n            return cls(f\"mailto:{valid[1]}\")\n\n        yield validate\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.fields.contexts","title":"<code>contexts</code>","text":"<p>Common xAPI context field definitions.</p>"},{"location":"models/xapi/#ralph.models.xapi.fields.contexts.ContextActivitiesContextField","title":"<code> ContextActivitiesContextField            (BaseModelWithConfig)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>context.contextActivities</code> field.</p> <p>Attributes:</p> Name Type Description <code>parent</code> <code>List</code> <p>An Activity with a direct relation to the statement\u2019s Activity.</p> <code>grouping</code> <code>List</code> <p>An Activity with an indirect relation to the statement\u2019s Activity.</p> <code>category</code> <code>List</code> <p>An Activity used to categorize the Statement.</p> <code>other</code> <code>List</code> <p>A contextActivity that doesn\u2019t fit one of the other properties.</p> Source code in <code>ralph/models/xapi/fields/contexts.py</code> <pre><code>class ContextActivitiesContextField(BaseModelWithConfig):\n\"\"\"Pydantic model for `context.contextActivities` field.\n\n    Attributes:\n        parent (List): An Activity with a direct relation to the statement's Activity.\n        grouping (List): An Activity with an indirect relation to the statement's\n            Activity.\n        category (List): An Activity used to categorize the Statement.\n        other (List): A contextActivity that doesn't fit one of the other properties.\n    \"\"\"\n\n    parent: Optional[Union[ActivityObjectField, List[ActivityObjectField]]]\n    grouping: Optional[Union[ActivityObjectField, List[ActivityObjectField]]]\n    category: Optional[Union[ActivityObjectField, List[ActivityObjectField]]]\n    other: Optional[Union[ActivityObjectField, List[ActivityObjectField]]]\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.fields.contexts.ContextField","title":"<code> ContextField            (BaseModelWithConfig)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>context</code> field.</p> <p>Attributes:</p> Name Type Description <code>registration</code> <code>UUID</code> <p>The registration that the Statement is associated with.</p> <code>instructor</code> <code>ActorField</code> <p>The instructor that the Statement relates to.</p> <code>team</code> <code>GroupActorField</code> <p>The team that this Statement relates to.</p> <code>contextActivities</code> <code>dict</code> <p>See ContextActivitiesContextField.</p> <code>revision</code> <code>str</code> <p>The revision of the activity associated with this Statement.</p> <code>platform</code> <code>str</code> <p>The platform where the learning activity took place.</p> <code>language</code> <code>LanguageTag</code> <p>The language in which the experience occurred.</p> <code>statement</code> <code>StatementRef</code> <p>Another Statement giving context for this Statement.</p> <code>extensions</code> <code>dict</code> <p>Consists of an dictionary of other properties as needed.</p> Source code in <code>ralph/models/xapi/fields/contexts.py</code> <pre><code>class ContextField(BaseModelWithConfig):\n\"\"\"Pydantic model for `context` field.\n\n    Attributes:\n        registration (UUID): The registration that the Statement is associated with.\n        instructor (ActorField): The instructor that the Statement relates to.\n        team (GroupActorField): The team that this Statement relates to.\n        contextActivities (dict): See ContextActivitiesContextField.\n        revision (str): The revision of the activity associated with this Statement.\n        platform (str): The platform where the learning activity took place.\n        language (LanguageTag): The language in which the experience occurred.\n        statement (StatementRef): Another Statement giving context for this Statement.\n        extensions (dict): Consists of an dictionary of other properties as needed.\n    \"\"\"\n\n    registration: Optional[UUID]\n    instructor: Optional[ActorField]\n    team: Optional[GroupActorField]\n    contextActivities: Optional[ContextActivitiesContextField]\n    revision: Optional[StrictStr]\n    platform: Optional[StrictStr]\n    language: Optional[LanguageTag]\n    statement: Optional[StatementRefObjectField]\n    extensions: Optional[Dict[IRI, Union[str, int, bool, list, dict, None]]]\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.fields.objects","title":"<code>objects</code>","text":"<p>Common xAPI object field definitions.</p>"},{"location":"models/xapi/#ralph.models.xapi.fields.objects.ObjectDefinitionExtensionsField","title":"<code> ObjectDefinitionExtensionsField            (BaseExtensionModelWithConfig)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>object.definition.extensions</code> field.</p> <p>Attributes:</p> Name Type Description <code>school</code> <code>str</code> <p>Consists of the name of the school.</p> <code>course</code> <code>str</code> <p>Consists of the name of the course.</p> <code>module</code> <code>str</code> <p>Consists of the name of the module.</p> Source code in <code>ralph/models/xapi/fields/objects.py</code> <pre><code>class ObjectDefinitionExtensionsField(BaseExtensionModelWithConfig):\n\"\"\"Pydantic model for `object.definition.extensions` field.\n\n    Attributes:\n        school (str): Consists of the name of the school.\n        course (str): Consists of the name of the course.\n        module (str): Consists of the name of the module.\n    \"\"\"\n\n    school: Optional[str] = Field(alias=EXTENSION_SCHOOL_ID)\n    course: Optional[str] = Field(alias=EXTENSION_COURSE_ID)\n    module: Optional[str] = Field(alias=EXTENSION_MODULE_ID)\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.fields.objects.SubStatementObjectField","title":"<code> SubStatementObjectField            (BaseModelWithConfig)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>object</code> field.</p> <p>It is defined for SubStatement tyoe.</p> <p>Attributes:</p> Name Type Description <code>actor</code> <code>ActorField</code> <p>See ActorField.</p> <code>verb</code> <code>VerbField</code> <p>See VerbField.</p> <code>object</code> <code>UnnestedObjectField</code> <p>See UnnestedObjectField.</p> Source code in <code>ralph/models/xapi/fields/objects.py</code> <pre><code>class SubStatementObjectField(BaseModelWithConfig):\n\"\"\"Pydantic model for `object` field.\n\n    It is defined for SubStatement tyoe.\n\n    Attributes:\n        actor (ActorField): See ActorField.\n        verb (VerbField): See VerbField.\n        object (UnnestedObjectField): See UnnestedObjectField.\n    \"\"\"\n\n    actor: ActorField\n    verb: VerbField\n    object: UnnestedObjectField\n    objectType: Literal[\"SubStatement\"]\n    result: Optional[ResultField]\n    context: Optional[ContextField]\n    timestamp: Optional[datetime]\n    attachments: Optional[List[AttachmentField]]\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.fields.results","title":"<code>results</code>","text":"<p>Common xAPI result field definitions.</p>"},{"location":"models/xapi/#ralph.models.xapi.fields.results.ResultField","title":"<code> ResultField            (BaseModelWithConfig)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>result</code> field.</p> <p>Attributes:</p> Name Type Description <code>score</code> <code>ScoreResultField</code> <p>See ScoreResultField.</p> <code>success</code> <code>bool</code> <p>Indicates whether the attempt on the Activity was successful.</p> <code>completion</code> <code>bool</code> <p>Indicates whether the Activity was completed.</p> <code>response</code> <code>str</code> <p>Consists of the response for the given Activity.</p> <code>duration</code> <code>str</code> <p>Consists of the duration over which the Statement occurred.</p> <code>extensions</code> <code>dict</code> <p>Consists of a dictionary of other properties as needed.</p> Source code in <code>ralph/models/xapi/fields/results.py</code> <pre><code>class ResultField(BaseModelWithConfig):\n\"\"\"Pydantic model for `result` field.\n\n    Attributes:\n        score (ScoreResultField): See ScoreResultField.\n        success (bool): Indicates whether the attempt on the Activity was successful.\n        completion (bool): Indicates whether the Activity was completed.\n        response (str): Consists of the response for the given Activity.\n        duration (str): Consists of the duration over which the Statement occurred.\n        extensions (dict): Consists of a dictionary of other properties as needed.\n    \"\"\"\n\n    score: Optional[ScoreResultField]\n    success: Optional[StrictBool]\n    completion: Optional[StrictBool]\n    response: Optional[StrictStr]\n    duration: Optional[timedelta]\n    extensions: Optional[Dict[IRI, Union[str, int, bool, list, dict, None]]]\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.fields.results.ScoreResultField","title":"<code> ScoreResultField            (BaseModelWithConfig)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>results.score</code> field.</p> <p>Attributes:</p> Name Type Description <code>scaled</code> <code>int</code> <p>Consists of the normalized score related to the experience.</p> <code>raw</code> <code>Decimal</code> <p>Consists of the non-normalized score achieved by the Actor.</p> <code>min</code> <code>Decimal</code> <p>Consists of lowest possible score.</p> <code>max</code> <code>Decimal</code> <p>Consists of highest possible score.</p> Source code in <code>ralph/models/xapi/fields/results.py</code> <pre><code>class ScoreResultField(BaseModelWithConfig):\n\"\"\"Pydantic model for `results.score` field.\n\n    Attributes:\n        scaled (int): Consists of the normalized score related to the experience.\n        raw (Decimal): Consists of the non-normalized score achieved by the Actor.\n        min (Decimal): Consists of lowest possible score.\n        max (Decimal): Consists of highest possible score.\n    \"\"\"\n\n    scaled: Optional[conint(ge=-1, le=1)]\n    raw: Optional[Decimal]\n    min: Optional[Decimal]\n    max: Optional[Decimal]\n\n    @root_validator\n    @classmethod\n    def check_raw_min_max_relation(cls, values):\n\"\"\"Checks the relationship `min &lt; raw &lt; max`.\"\"\"\n        raw_value = values.get(\"raw\", None)\n        min_value = values.get(\"min\", None)\n        max_value = values.get(\"max\", None)\n\n        if min_value:\n            if max_value and min_value &gt; max_value:\n                raise ValueError(\"min cannot be greater than max\")\n            if raw_value and min_value &gt; raw_value:\n                raise ValueError(\"min cannot be greater than raw\")\n        if max_value:\n            if raw_value and raw_value &gt; max_value:\n                raise ValueError(\"raw cannot be greater than max\")\n\n        return values\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.fields.results.ScoreResultField.check_raw_min_max_relation","title":"<code>check_raw_min_max_relation(values)</code>  <code>classmethod</code>","text":"<p>Checks the relationship <code>min &lt; raw &lt; max</code>.</p> Source code in <code>ralph/models/xapi/fields/results.py</code> <pre><code>@root_validator\n@classmethod\ndef check_raw_min_max_relation(cls, values):\n\"\"\"Checks the relationship `min &lt; raw &lt; max`.\"\"\"\n    raw_value = values.get(\"raw\", None)\n    min_value = values.get(\"min\", None)\n    max_value = values.get(\"max\", None)\n\n    if min_value:\n        if max_value and min_value &gt; max_value:\n            raise ValueError(\"min cannot be greater than max\")\n        if raw_value and min_value &gt; raw_value:\n            raise ValueError(\"min cannot be greater than raw\")\n    if max_value:\n        if raw_value and raw_value &gt; max_value:\n            raise ValueError(\"raw cannot be greater than max\")\n\n    return values\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.fields.unnested_objects","title":"<code>unnested_objects</code>","text":"<p>Common xAPI object field definitions.</p>"},{"location":"models/xapi/#ralph.models.xapi.fields.unnested_objects.ActivityObjectField","title":"<code> ActivityObjectField            (BaseModelWithConfig)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>object</code> field.</p> <p>It is defined for Activity type.</p> <p>Attributes:</p> Name Type Description <code>objectType</code> <code>str</code> <p>Consists of the value <code>Activity</code>.</p> <code>id</code> <code>IRI</code> <p>Consists of an identifier for a single unique Activity.</p> <code>definition</code> <code>dict</code> <p>See ObjectDefinitionField.</p> Source code in <code>ralph/models/xapi/fields/unnested_objects.py</code> <pre><code>class ActivityObjectField(BaseModelWithConfig):\n\"\"\"Pydantic model for `object` field.\n\n    It is defined for Activity type.\n\n    Attributes:\n        objectType (str): Consists of the value `Activity`.\n        id (IRI): Consists of an identifier for a single unique Activity.\n        definition (dict): See ObjectDefinitionField.\n    \"\"\"\n\n    id: IRI\n    objectType: Optional[Literal[\"Activity\"]]\n    definition: Optional[Union[ObjectDefinitionField, InteractionObjectDefinitionField]]\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.fields.unnested_objects.InteractionComponent","title":"<code> InteractionComponent            (BaseModelWithConfig)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for an interaction component.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>str</code> <p>Consists of an identifier of the interaction component.</p> <code>description</code> <code>LanguageMap</code> <p>Consists of the description of the interaction.</p> Source code in <code>ralph/models/xapi/fields/unnested_objects.py</code> <pre><code>class InteractionComponent(BaseModelWithConfig):\n\"\"\"Pydantic model for an interaction component.\n\n    Attributes:\n        id (str): Consists of an identifier of the interaction component.\n        description (LanguageMap): Consists of the description of the interaction.\n    \"\"\"\n\n    id: constr(regex=r\"^[^\\s]+$\")  # noqa:F722\n    description: Optional[LanguageMap]\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.fields.unnested_objects.InteractionObjectDefinitionField","title":"<code> InteractionObjectDefinitionField            (ObjectDefinitionField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>object.definition</code> field.</p> <p>It is defined for field with interaction properties.</p> <p>Attributes:</p> Name Type Description <code>interactionType</code> <code>str</code> <p>Consists of the type of the interaction.</p> <code>correctResponsesPattern</code> <code>list</code> <p>Consists of a pattern for the correct response.</p> <code>choices</code> <code>list</code> <p>Consists of a list of selectable choices.</p> <code>scale</code> <code>list</code> <p>Consists of a list of the options on the <code>likert</code> scale.</p> <code>source</code> <code>list</code> <p>Consists of a list of sources to be matched.</p> <code>target</code> <code>list</code> <p>Consists of a list of targets to be matched.</p> <code>steps</code> <code>list</code> <p>Consists of a list of the elements making up the interaction.</p> Source code in <code>ralph/models/xapi/fields/unnested_objects.py</code> <pre><code>class InteractionObjectDefinitionField(ObjectDefinitionField):\n\"\"\"Pydantic model for `object.definition` field.\n\n    It is defined for field with interaction properties.\n\n    Attributes:\n        interactionType (str): Consists of the type of the interaction.\n        correctResponsesPattern (list): Consists of a pattern for the correct response.\n        choices (list): Consists of a list of selectable choices.\n        scale (list): Consists of a list of the options on the `likert` scale.\n        source (list): Consists of a list of sources to be matched.\n        target (list): Consists of a list of targets to be matched.\n        steps (list): Consists of a list of the elements making up the interaction.\n    \"\"\"\n\n    interactionType: Literal[\n        \"true-false\",\n        \"choice\",\n        \"fill-in\",\n        \"long-fill-in\",\n        \"matching\",\n        \"performance\",\n        \"sequencing\",\n        \"likert\",\n        \"numeric\",\n        \"other\",\n    ]\n    correctResponsesPattern: Optional[List[StrictStr]]\n    choices: Optional[List[InteractionComponent]]\n    scale: Optional[List[InteractionComponent]]\n    source: Optional[List[InteractionComponent]]\n    target: Optional[List[InteractionComponent]]\n    steps: Optional[List[InteractionComponent]]\n\n    @validator(\"choices\", \"scale\", \"source\", \"target\", \"steps\")\n    @classmethod\n    def check_unique_ids(cls, value):\n\"\"\"Checks the uniqueness of interaction components IDs.\"\"\"\n        if len(value) != len({x.id for x in value}):\n            raise ValueError(\"Duplicate InteractionComponents are not valid\")\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.fields.unnested_objects.InteractionObjectDefinitionField.check_unique_ids","title":"<code>check_unique_ids(value)</code>  <code>classmethod</code>","text":"<p>Checks the uniqueness of interaction components IDs.</p> Source code in <code>ralph/models/xapi/fields/unnested_objects.py</code> <pre><code>@validator(\"choices\", \"scale\", \"source\", \"target\", \"steps\")\n@classmethod\ndef check_unique_ids(cls, value):\n\"\"\"Checks the uniqueness of interaction components IDs.\"\"\"\n    if len(value) != len({x.id for x in value}):\n        raise ValueError(\"Duplicate InteractionComponents are not valid\")\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.fields.unnested_objects.ObjectDefinitionField","title":"<code> ObjectDefinitionField            (BaseModelWithConfig)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>object.definition</code> field.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>LanguageMap</code> <p>Consists of the human readable/visual name of the Activity.</p> <code>description</code> <code>LanguageMap</code> <p>Consists of a description of the Activity.</p> <code>type</code> <code>IRI</code> <p>Consists of the type of the Activity.</p> <code>moreInfo</code> <code>URL</code> <p>Consists of an URL to a document about the Activity.</p> <code>extensions</code> <code>Dict</code> <p>Consists of a dictionary of other properties as needed.</p> Source code in <code>ralph/models/xapi/fields/unnested_objects.py</code> <pre><code>class ObjectDefinitionField(BaseModelWithConfig):\n\"\"\"Pydantic model for `object.definition` field.\n\n    Attributes:\n        name (LanguageMap): Consists of the human readable/visual name of the Activity.\n        description (LanguageMap): Consists of a description of the Activity.\n        type (IRI): Consists of the type of the Activity.\n        moreInfo (URL): Consists of an URL to a document about the Activity.\n        extensions (Dict): Consists of a dictionary of other properties as needed.\n    \"\"\"\n\n    name: Optional[LanguageMap]\n    description: Optional[LanguageMap]\n    type: Optional[IRI]\n    moreInfo: Optional[AnyUrl]\n    extensions: Optional[Dict[IRI, Union[str, int, bool, list, dict, None]]]\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.fields.unnested_objects.StatementRefObjectField","title":"<code> StatementRefObjectField            (BaseModelWithConfig)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for <code>object</code> field.</p> <p>It is defined for StatementRef type.</p> <p>Attributes:</p> Name Type Description <code>objectType</code> <code>str</code> <p>Consists of the value <code>StatementRef</code>.</p> <code>id</code> <code>UUID</code> <p>Consists of the UUID of the referenced statement.</p> Source code in <code>ralph/models/xapi/fields/unnested_objects.py</code> <pre><code>class StatementRefObjectField(BaseModelWithConfig):\n\"\"\"Pydantic model for `object` field.\n\n    It is defined for StatementRef type.\n\n    Attributes:\n        objectType (str): Consists of the value `StatementRef`.\n        id (UUID): Consists of the UUID of the referenced statement.\n    \"\"\"\n\n    id: UUID\n    objectType: Literal[\"StatementRef\"]\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.fields.verbs","title":"<code>verbs</code>","text":"<p>Common xAPI verb field definitions.</p>"},{"location":"models/xapi/#ralph.models.xapi.fields.verbs.TerminatedVerbField","title":"<code> TerminatedVerbField            (VerbField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for terminated <code>verb</code> field.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>str</code> <p>Consists of the value <code>http://adlnet.gov/expapi/verbs/terminated</code>.</p> <code>display</code> <code>dict</code> <p>Consists of the dictionary <code>{\"en-US\": \"terminated\"}</code>.</p> Source code in <code>ralph/models/xapi/fields/verbs.py</code> <pre><code>class TerminatedVerbField(VerbField):\n\"\"\"Pydantic model for terminated `verb` field.\n\n    Attributes:\n        id (str): Consists of the value `http://adlnet.gov/expapi/verbs/terminated`.\n        display (dict): Consists of the dictionary `{\"en-US\": \"terminated\"}`.\n    \"\"\"\n\n    id: VERB_TERMINATED_ID = VERB_TERMINATED_ID.__args__[0]\n    display: Dict[LANG_EN_US_DISPLAY, VERB_TERMINATED_DISPLAY] = {\n        LANG_EN_US_DISPLAY.__args__[0]: VERB_TERMINATED_DISPLAY.__args__[0]\n    }\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.fields.verbs.VerbField","title":"<code> VerbField            (BaseModelWithConfig)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for core <code>verb</code> field.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>IRI</code> <p>Consists of an identifier for the verb.</p> <code>display</code> <code>LanguageMap</code> <p>Consists of a human readable representation of the verb.</p> Source code in <code>ralph/models/xapi/fields/verbs.py</code> <pre><code>class VerbField(BaseModelWithConfig):\n\"\"\"Pydantic model for core `verb` field.\n\n    Attributes:\n        id (IRI): Consists of an identifier for the verb.\n        display (LanguageMap): Consists of a human readable representation of the verb.\n    \"\"\"\n\n    id: IRI\n    display: Optional[LanguageMap]\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.fields.verbs.ViewedVerbField","title":"<code> ViewedVerbField            (VerbField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for viewed <code>verb</code> field.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>str</code> <p>Consists of the value <code>http://id.tincanapi.com/verb/viewed</code>.</p> <code>display</code> <code>dict</code> <p>Consists of the dictionary <code>{\"en-US\": \"viewed\"}</code>.</p> Source code in <code>ralph/models/xapi/fields/verbs.py</code> <pre><code>class ViewedVerbField(VerbField):\n\"\"\"Pydantic model for viewed `verb` field.\n\n    Attributes:\n        id (str): Consists of the value `http://id.tincanapi.com/verb/viewed`.\n        display (dict): Consists of the dictionary `{\"en-US\": \"viewed\"}`.\n    \"\"\"\n\n    id: VERB_VIEWED_ID = VERB_VIEWED_ID.__args__[0]\n    display: Dict[LANG_EN_US_DISPLAY, VERB_VIEWED_DISPLAY] = {\n        LANG_EN_US_DISPLAY.__args__[0]: VERB_VIEWED_DISPLAY.__args__[0]\n    }\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.navigation","title":"<code>navigation</code>  <code>special</code>","text":""},{"location":"models/xapi/#ralph.models.xapi.navigation.fields","title":"<code>fields</code>  <code>special</code>","text":""},{"location":"models/xapi/#ralph.models.xapi.navigation.fields.objects","title":"<code>objects</code>","text":"<p>Navigation xAPI events object fields definitions.</p>"},{"location":"models/xapi/#ralph.models.xapi.navigation.fields.objects.PageObjectDefinitionField","title":"<code> PageObjectDefinitionField            (ObjectDefinitionField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for page viewed <code>object</code>.<code>definition</code> field.</p> <p>Attributes:</p> Name Type Description <code>type</code> <code>str</code> <p>Consists of the value <code>http://activitystrea.ms/schema/1.0/page</code>.</p> <code>name</code> <code>dict</code> <p>Consists of the dictionary <code>{\"en-US\": \"page\"}</code>.</p> <code>extensions</code> <code>dict</code> <p>See ObjectDefinitionExtensionsField.</p> Source code in <code>ralph/models/xapi/navigation/fields/objects.py</code> <pre><code>class PageObjectDefinitionField(ObjectDefinitionField):\n\"\"\"Pydantic model for page viewed `object`.`definition` field.\n\n    Attributes:\n       type (str): Consists of the value `http://activitystrea.ms/schema/1.0/page`.\n       name (dict): Consists of the dictionary `{\"en-US\": \"page\"}`.\n       extensions (dict): See ObjectDefinitionExtensionsField.\n    \"\"\"\n\n    name: Dict[LANG_EN_US_DISPLAY, ACTIVITY_PAGE_DISPLAY] = {\n        LANG_EN_US_DISPLAY.__args__[0]: ACTIVITY_PAGE_DISPLAY.__args__[0]\n    }\n    type: ACTIVITY_PAGE_ID = ACTIVITY_PAGE_ID.__args__[0]\n    extensions: Optional[ObjectDefinitionExtensionsField]\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.navigation.fields.objects.PageObjectField","title":"<code> PageObjectField            (ActivityObjectField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for page viewed <code>object</code> field.</p> <p>Attributes:</p> Name Type Description <code>definition</code> <code>dict</code> <p>See PageObjectDefinitionField.</p> Source code in <code>ralph/models/xapi/navigation/fields/objects.py</code> <pre><code>class PageObjectField(ActivityObjectField):\n\"\"\"Pydantic model for page viewed `object` field.\n\n    Attributes:\n        definition (dict): See PageObjectDefinitionField.\n    \"\"\"\n\n    definition: PageObjectDefinitionField = PageObjectDefinitionField()\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.navigation.statements","title":"<code>statements</code>","text":"<p>Navigation xAPI event definitions.</p>"},{"location":"models/xapi/#ralph.models.xapi.navigation.statements.PageTerminated","title":"<code> PageTerminated            (BaseXapiModel)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for page terminated statement.</p> <p>Example: John terminated the https://www.fun-mooc.fr/ page.</p> <p>Attributes:</p> Name Type Description <code>object</code> <code>PageObjectField</code> <p>See PageObjectField.</p> <code>verb</code> <code>PageTerminatedVerbField</code> <p>See PageTerminatedVerbField.</p> Source code in <code>ralph/models/xapi/navigation/statements.py</code> <pre><code>class PageTerminated(BaseXapiModel):\n\"\"\"Pydantic model for page terminated statement.\n\n    Example: John terminated the https://www.fun-mooc.fr/ page.\n\n    Attributes:\n       object (PageObjectField): See PageObjectField.\n       verb (PageTerminatedVerbField): See PageTerminatedVerbField.\n    \"\"\"\n\n    __selector__ = selector(\n        object__definition__type=\"http://activitystrea.ms/schema/1.0/page\",\n        verb__id=\"http://adlnet.gov/expapi/verbs/terminated\",\n    )\n\n    object: PageObjectField\n    verb: TerminatedVerbField = TerminatedVerbField()\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.navigation.statements.PageViewed","title":"<code> PageViewed            (BaseXapiModel)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for page viewed statement.</p> <p>Example: John viewed the https://www.fun-mooc.fr/ page.</p> <p>Attributes:</p> Name Type Description <code>object</code> <code>PageObjectField</code> <p>See PageObjectField.</p> <code>verb</code> <code>PageViewedVerbField</code> <p>See PageViewedVerbField.</p> Source code in <code>ralph/models/xapi/navigation/statements.py</code> <pre><code>class PageViewed(BaseXapiModel):\n\"\"\"Pydantic model for page viewed statement.\n\n    Example: John viewed the https://www.fun-mooc.fr/ page.\n\n    Attributes:\n       object (PageObjectField): See PageObjectField.\n       verb (PageViewedVerbField): See PageViewedVerbField.\n    \"\"\"\n\n    __selector__ = selector(\n        object__definition__type=\"http://activitystrea.ms/schema/1.0/page\",\n        verb__id=\"http://id.tincanapi.com/verb/viewed\",\n    )\n\n    object: PageObjectField\n    verb: ViewedVerbField = ViewedVerbField()\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.video","title":"<code>video</code>  <code>special</code>","text":""},{"location":"models/xapi/#ralph.models.xapi.video.constants","title":"<code>constants</code>","text":"<p>Constants for xAPI video specifications.</p>"},{"location":"models/xapi/#ralph.models.xapi.video.fields","title":"<code>fields</code>  <code>special</code>","text":""},{"location":"models/xapi/#ralph.models.xapi.video.fields.contexts","title":"<code>contexts</code>","text":"<p>Video xAPI events context fields definitions.</p>"},{"location":"models/xapi/#ralph.models.xapi.video.fields.contexts.BaseVideoContextField","title":"<code> BaseVideoContextField            (ContextField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for video core <code>context</code> field.</p> <p>Attributes:</p> Name Type Description <code>contextActivities</code> <code>dict</code> <p>see VideoContextActivitiesField.</p> Source code in <code>ralph/models/xapi/video/fields/contexts.py</code> <pre><code>class BaseVideoContextField(ContextField):\n\"\"\"Pydantic model for video core `context` field.\n\n    Attributes:\n        contextActivities (dict): see VideoContextActivitiesField.\n    \"\"\"\n\n    contextActivities: Optional[VideoContextActivitiesField]\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.video.fields.contexts.VideoBrowsingContextExtensionsField","title":"<code> VideoBrowsingContextExtensionsField            (VideoContextExtensionsField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for video browsing <code>context</code>.<code>extensions</code> field.</p> <p>Such field is used in <code>paused</code>, <code>completed</code> and <code>terminated</code> events.</p> <p>Attributes:</p> Name Type Description <code>completionThreshold</code> <code>float</code> <p>Consists of the percentage of media that should be consumed to trigger a completion.</p> <code>length</code> <code>float</code> <p>Consists of the length of the video.</p> Source code in <code>ralph/models/xapi/video/fields/contexts.py</code> <pre><code>class VideoBrowsingContextExtensionsField(VideoContextExtensionsField):\n\"\"\"Pydantic model for video browsing `context`.`extensions` field.\n\n    Such field is used in `paused`, `completed` and `terminated` events.\n\n    Attributes:\n        completionThreshold (float): Consists of the percentage of media that should\n            be consumed to trigger a completion.\n        length (float): Consists of the length of the video.\n    \"\"\"\n\n    length: NonNegativeFloat = Field(alias=VIDEO_EXTENSION_LENGTH)\n    completionThreshold: Optional[float] = Field(\n        alias=VIDEO_EXTENSION_COMPLETION_THRESHOLD\n    )\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.video.fields.contexts.VideoCompletedContextField","title":"<code> VideoCompletedContextField            (BaseVideoContextField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for video completed <code>context</code> field.</p> <p>Attributes:</p> Name Type Description <code>extensions</code> <code>dict</code> <p>See VideoBrowsingContextExtensionsField.</p> Source code in <code>ralph/models/xapi/video/fields/contexts.py</code> <pre><code>class VideoCompletedContextField(BaseVideoContextField):\n\"\"\"Pydantic model for video completed `context` field.\n\n    Attributes:\n        extensions (dict): See VideoBrowsingContextExtensionsField.\n    \"\"\"\n\n    extensions: VideoBrowsingContextExtensionsField\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.video.fields.contexts.VideoContextActivitiesField","title":"<code> VideoContextActivitiesField            (ContextActivitiesContextField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for video <code>contextActivities</code> field.</p> <p>Attributes:</p> Name Type Description <code>category</code> <code>List</code> <p>Consists of a list containing the dictionary {\u201cid\u201d: \u201chttps://w3id.org/xapi/video\u201d}.</p> Source code in <code>ralph/models/xapi/video/fields/contexts.py</code> <pre><code>class VideoContextActivitiesField(ContextActivitiesContextField):\n\"\"\"Pydantic model for video `contextActivities` field.\n\n    Attributes:\n        category (List): Consists of a list containing the dictionary\n            {\"id\": \"https://w3id.org/xapi/video\"}.\n    \"\"\"\n\n    category: List[Dict[Literal[\"id\"], VIDEO_CONTEXT_CATEGORY]] = [\n        {\"id\": VIDEO_CONTEXT_CATEGORY.__args__[0]}\n    ]\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.video.fields.contexts.VideoContextExtensionsField","title":"<code> VideoContextExtensionsField            (BaseExtensionModelWithConfig)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for video core <code>context</code>.<code>extensions</code> field.</p> <p>Attributes:</p> Name Type Description <code>session</code> <code>uuid</code> <p>Consists of the ID of the active session.</p> Source code in <code>ralph/models/xapi/video/fields/contexts.py</code> <pre><code>class VideoContextExtensionsField(BaseExtensionModelWithConfig):\n\"\"\"Pydantic model for video core `context`.`extensions` field.\n\n    Attributes:\n        session (uuid): Consists of the ID of the active session.\n    \"\"\"\n\n    session_id: Optional[UUID] = Field(alias=VIDEO_EXTENSION_SESSION_ID)\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.video.fields.contexts.VideoEnableClosedCaptioningContextExtensionsField","title":"<code> VideoEnableClosedCaptioningContextExtensionsField            (VideoContextExtensionsField)         </code>  <code>pydantic-model</code>","text":"<p>Represents the context.extensions field for video <code>interacted</code> xAPI statement.</p> <p>Attributes:</p> Name Type Description <code>ccSubtitleLanguage</code> <code>str</code> <p>Consists of the language of subtitle or closed captioning.</p> Source code in <code>ralph/models/xapi/video/fields/contexts.py</code> <pre><code>class VideoEnableClosedCaptioningContextExtensionsField(VideoContextExtensionsField):\n\"\"\"Represents the context.extensions field for video `interacted` xAPI statement.\n\n    Attributes:\n        ccSubtitleLanguage (str): Consists of the language of subtitle or closed\n            captioning.\n    \"\"\"\n\n    ccSubtitleLanguage: str = Field(alias=VIDEO_EXTENSION_CC_SUBTITLE_LANG)\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.video.fields.contexts.VideoEnableClosedCaptioningContextField","title":"<code> VideoEnableClosedCaptioningContextField            (BaseVideoContextField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic modle for video enable closed captioning <code>context</code> field.</p> <p>Attributes:</p> Name Type Description <code>extensions</code> <code>dict</code> <p>See VideoEnableClosedCaptioningContextExtensionsField.</p> Source code in <code>ralph/models/xapi/video/fields/contexts.py</code> <pre><code>class VideoEnableClosedCaptioningContextField(BaseVideoContextField):\n\"\"\"Pydantic modle for video enable closed captioning `context` field.\n\n    Attributes:\n        extensions (dict): See VideoEnableClosedCaptioningContextExtensionsField.\n    \"\"\"\n\n    extensions: VideoEnableClosedCaptioningContextExtensionsField\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.video.fields.contexts.VideoInitializedContextExtensionsField","title":"<code> VideoInitializedContextExtensionsField            (VideoContextExtensionsField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for video initialized <code>context</code>.<code>extensions</code> field.</p> <p>Attributes:</p> Name Type Description <code>length</code> <code>float</code> <p>Consists of the length of the video.</p> <code>ccSubtitleEnabled</code> <code>bool</code> <p>Indicates whether subtitle or closed captioning is enabled.</p> <code>ccSubtitleLanguage</code> <code>str</code> <p>Consists of the language of subtitle or closed captioning.</p> <code>fullScreen</code> <code>bool</code> <p>Indicates whether the video is played in full screen mode.</p> <code>screenSize</code> <code>str</code> <p>Consists of the device playback screen size or the maximum available screen size for Video playback.</p> <code>videoPlaybackSize</code> <code>str</code> <p>Consists of the size in Width x Height of the video as viewed by the user.</p> <code>speed</code> <code>str</code> <p>Consists of the play back speed.</p> <code>userAgent</code> <code>str</code> <p>Consists of the User Agent string of the browser, if the video is launched in browser.</p> <code>volume</code> <code>int</code> <p>Consists of the volume of the video.</p> <code>completionThreshold</code> <code>float</code> <p>Consists of the percentage of media that should be consumed to trigger a completion.</p> Source code in <code>ralph/models/xapi/video/fields/contexts.py</code> <pre><code>class VideoInitializedContextExtensionsField(VideoContextExtensionsField):\n\"\"\"Pydantic model for video initialized `context`.`extensions` field.\n\n    Attributes:\n        length (float): Consists of the length of the video.\n        ccSubtitleEnabled (bool): Indicates whether subtitle or closed captioning is\n            enabled.\n        ccSubtitleLanguage (str): Consists of the language of subtitle or closed\n            captioning.\n        fullScreen (bool): Indicates whether the video is played in full screen mode.\n        screenSize (str): Consists of the device playback screen size or the maximum\n            available screen size for Video playback.\n        videoPlaybackSize (str): Consists of the size in Width x Height of the video as\n            viewed by the user.\n        speed (str): Consists of the play back speed.\n        userAgent (str): Consists of the User Agent string of the browser,\n            if the video is launched in browser.\n        volume (int): Consists of the volume of the video.\n        completionThreshold (float): Consists of the percentage of media that should be\n            consumed to trigger a completion.\n    \"\"\"\n\n    length: NonNegativeFloat = Field(alias=VIDEO_EXTENSION_LENGTH)\n    ccSubtitleEnabled: Optional[bool] = Field(alias=VIDEO_EXTENSION_CC_ENABLED)\n    ccSubtitleLang: Optional[str] = Field(alias=VIDEO_EXTENSION_CC_SUBTITLE_LANG)\n    fullScreen: Optional[bool] = Field(alias=VIDEO_EXTENSION_FULL_SCREEN)\n    screenSize: Optional[str] = Field(alias=VIDEO_EXTENSION_SCREEN_SIZE)\n    videoPlaybackSize: Optional[str] = Field(alias=VIDEO_EXTENSION_VIDEO_PLAYBACK_SIZE)\n    speed: Optional[str] = Field(alias=VIDEO_EXTENSION_SPEED)\n    userAgent: Optional[str] = Field(alias=VIDEO_EXTENSION_USER_AGENT)\n    volume: Optional[int] = Field(alias=VIDEO_EXTENSION_VOLUME)\n    completionThreshold: Optional[float] = Field(\n        alias=VIDEO_EXTENSION_COMPLETION_THRESHOLD\n    )\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.video.fields.contexts.VideoInitializedContextField","title":"<code> VideoInitializedContextField            (BaseVideoContextField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for video initialized <code>context</code> field.</p> <p>Attributes:</p> Name Type Description <code>extensions</code> <code>dict</code> <p>See VideoInitializedContextExtensionsField.</p> Source code in <code>ralph/models/xapi/video/fields/contexts.py</code> <pre><code>class VideoInitializedContextField(BaseVideoContextField):\n\"\"\"Pydantic model for video initialized `context` field.\n\n    Attributes:\n        extensions (dict): See VideoInitializedContextExtensionsField.\n    \"\"\"\n\n    extensions: VideoInitializedContextExtensionsField\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.video.fields.contexts.VideoPausedContextField","title":"<code> VideoPausedContextField            (BaseVideoContextField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for video paused <code>context</code> field.</p> <p>Attributes:</p> Name Type Description <code>extensions</code> <code>dict</code> <p>See VideoBrowsingContextExtensionsField.</p> Source code in <code>ralph/models/xapi/video/fields/contexts.py</code> <pre><code>class VideoPausedContextField(BaseVideoContextField):\n\"\"\"Pydantic model for video paused `context` field.\n\n    Attributes:\n        extensions (dict): See VideoBrowsingContextExtensionsField.\n    \"\"\"\n\n    extensions: VideoBrowsingContextExtensionsField\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.video.fields.contexts.VideoPlayedContextField","title":"<code> VideoPlayedContextField            (BaseVideoContextField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for video played <code>context</code> field.</p> <p>Attributes:</p> Name Type Description <code>extensions</code> <code>dict</code> <p>See VideoContextExtensionsField.</p> Source code in <code>ralph/models/xapi/video/fields/contexts.py</code> <pre><code>class VideoPlayedContextField(BaseVideoContextField):\n\"\"\"Pydantic model for video played `context` field.\n\n    Attributes:\n        extensions (dict): See VideoContextExtensionsField.\n    \"\"\"\n\n    extensions: Optional[VideoContextExtensionsField]\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.video.fields.contexts.VideoScreenChangeInteractionContextExtensionsField","title":"<code> VideoScreenChangeInteractionContextExtensionsField            (VideoContextExtensionsField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for video screen change interaction <code>context</code>.<code>extensions</code> field.</p> <p>Attributes:</p> Name Type Description <code>fullScreen</code> <code>bool</code> <p>Indicates whether the video is played in full screen mode.</p> <code>screenSize</code> <code>str</code> <p>Expresses the total available screen size for Video playback.</p> <code>videoPlaybackSize</code> <code>str</code> <p>Consists of the size in Width x Height of the video as viewed by the user.</p> Source code in <code>ralph/models/xapi/video/fields/contexts.py</code> <pre><code>class VideoScreenChangeInteractionContextExtensionsField(VideoContextExtensionsField):\n\"\"\"Pydantic model for video screen change interaction `context`.`extensions` field.\n\n    Attributes:\n        fullScreen (bool): Indicates whether the video is played in full screen mode.\n        screenSize (str): Expresses the total available screen size for Video playback.\n        videoPlaybackSize (str): Consists of the size in Width x Height of the video as\n            viewed by the user.\n    \"\"\"\n\n    fullScreen: bool = Field(alias=VIDEO_EXTENSION_FULL_SCREEN)\n    screenSize: str = Field(alias=VIDEO_EXTENSION_SCREEN_SIZE)\n    videoPlaybackSize: str = Field(alias=VIDEO_EXTENSION_VIDEO_PLAYBACK_SIZE)\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.video.fields.contexts.VideoScreenChangeInteractionContextField","title":"<code> VideoScreenChangeInteractionContextField            (BaseVideoContextField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for video screen change interaction <code>context</code> field.</p> <p>Attributes:</p> Name Type Description <code>extensions</code> <code>dict</code> <p>See VideoScreenChangeInteractionContextExtensionsField.</p> Source code in <code>ralph/models/xapi/video/fields/contexts.py</code> <pre><code>class VideoScreenChangeInteractionContextField(BaseVideoContextField):\n\"\"\"Pydantic model for video screen change interaction `context` field.\n\n    Attributes:\n        extensions (dict): See VideoScreenChangeInteractionContextExtensionsField.\n    \"\"\"\n\n    extensions: VideoScreenChangeInteractionContextExtensionsField\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.video.fields.contexts.VideoSeekedContextField","title":"<code> VideoSeekedContextField            (BaseVideoContextField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for video seeked <code>context</code> field.</p> <p>Attributes:</p> Name Type Description <code>extensions</code> <code>dict</code> <p>See VideoContextExtensionsField.</p> Source code in <code>ralph/models/xapi/video/fields/contexts.py</code> <pre><code>class VideoSeekedContextField(BaseVideoContextField):\n\"\"\"Pydantic model for video seeked `context` field.\n\n    Attributes:\n        extensions (dict): See VideoContextExtensionsField.\n    \"\"\"\n\n    extensions: Optional[VideoContextExtensionsField]\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.video.fields.contexts.VideoTerminatedContextField","title":"<code> VideoTerminatedContextField            (BaseVideoContextField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for video terminated <code>context</code> field.</p> <p>Attributes:</p> Name Type Description <code>extensions</code> <code>dict</code> <p>See VideoBrowsingContextExtensionsField.</p> Source code in <code>ralph/models/xapi/video/fields/contexts.py</code> <pre><code>class VideoTerminatedContextField(BaseVideoContextField):\n\"\"\"Pydantic model for video terminated `context` field.\n\n    Attributes:\n        extensions (dict): See VideoBrowsingContextExtensionsField.\n    \"\"\"\n\n    extensions: VideoBrowsingContextExtensionsField\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.video.fields.contexts.VideoVolumeChangeInteractionContextExtensionsField","title":"<code> VideoVolumeChangeInteractionContextExtensionsField            (VideoContextExtensionsField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for video volume change interaction <code>context</code>.<code>extensions</code> field.</p> <p>Attributes:</p> Name Type Description <code>volume</code> <code>int</code> <p>Consists of the volume of the video.</p> Source code in <code>ralph/models/xapi/video/fields/contexts.py</code> <pre><code>class VideoVolumeChangeInteractionContextExtensionsField(VideoContextExtensionsField):\n\"\"\"Pydantic model for video volume change interaction `context`.`extensions` field.\n\n    Attributes:\n        volume (int): Consists of the volume of the video.\n    \"\"\"\n\n    volume: int = Field(alias=VIDEO_EXTENSION_VOLUME)\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.video.fields.contexts.VideoVolumeChangeInteractionContextField","title":"<code> VideoVolumeChangeInteractionContextField            (BaseVideoContextField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for video volume change interaction <code>context</code> field.</p> <p>Attributes:</p> Name Type Description <code>extensions</code> <code>dict</code> <p>See VideoVolumeChangeInteractionContextExtensionsField.</p> Source code in <code>ralph/models/xapi/video/fields/contexts.py</code> <pre><code>class VideoVolumeChangeInteractionContextField(BaseVideoContextField):\n\"\"\"Pydantic model for video volume change interaction `context` field.\n\n    Attributes:\n        extensions (dict): See VideoVolumeChangeInteractionContextExtensionsField.\n    \"\"\"\n\n    extensions: VideoVolumeChangeInteractionContextExtensionsField\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.video.fields.objects","title":"<code>objects</code>","text":"<p>Video xAPI events object fields definitions.</p>"},{"location":"models/xapi/#ralph.models.xapi.video.fields.objects.VideoObjectDefinitionField","title":"<code> VideoObjectDefinitionField            (ObjectDefinitionField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for video <code>object</code>.<code>definition</code> field.</p> <p>Attributes:</p> Name Type Description <code>type</code> <code>str</code> <p>Consists of the value <code>https://w3id.org/xapi/video/activity-type/video</code>.</p> <code>extensions</code> <code>dict</code> <p>See ObjectDefinitionExtensionsField.</p> Source code in <code>ralph/models/xapi/video/fields/objects.py</code> <pre><code>class VideoObjectDefinitionField(ObjectDefinitionField):\n\"\"\"Pydantic model for video `object`.`definition` field.\n\n    Attributes:\n        type (str): Consists of the value\n            `https://w3id.org/xapi/video/activity-type/video`.\n        extensions (dict): See ObjectDefinitionExtensionsField.\n    \"\"\"\n\n    type: VIDEO_OBJECT_DEFINITION_TYPE = VIDEO_OBJECT_DEFINITION_TYPE.__args__[0]\n    extensions: Optional[ObjectDefinitionExtensionsField]\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.video.fields.objects.VideoObjectField","title":"<code> VideoObjectField            (ActivityObjectField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for video <code>object</code> field.</p> <p>WARNING: Contains an optional name property, this is not a violation of conformity but goes against xAPI specification recommendations.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>dict</code> <p>Consists of the dictionary <code>{\"en-US\": &lt;name of the video&gt;}</code>.</p> <code>definition</code> <code>dict</code> <p>See VideoObjectDefinitionField.</p> Source code in <code>ralph/models/xapi/video/fields/objects.py</code> <pre><code>class VideoObjectField(ActivityObjectField):\n\"\"\"Pydantic model for video `object` field.\n\n    WARNING: Contains an optional name property, this is not a violation of\n    conformity but goes against xAPI specification recommendations.\n\n    Attributes:\n        name (dict): Consists of the dictionary `{\"en-US\": &lt;name of the video&gt;}`.\n        definition (dict): See VideoObjectDefinitionField.\n    \"\"\"\n\n    name: Optional[Dict[LANG_EN_US_DISPLAY, str]]\n    definition: VideoObjectDefinitionField = VideoObjectDefinitionField()\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.video.fields.results","title":"<code>results</code>","text":"<p>Video xAPI events result fields definitions.</p>"},{"location":"models/xapi/#ralph.models.xapi.video.fields.results.VideoCompletedResultExtensionsField","title":"<code> VideoCompletedResultExtensionsField            (VideoResultExtensionsField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for video completed <code>result</code>.<code>extensions</code> field.</p> <p>Attributes:</p> Name Type Description <code>progress</code> <code>float</code> <p>Consists of the percentage of media consumed by the actor.</p> Source code in <code>ralph/models/xapi/video/fields/results.py</code> <pre><code>class VideoCompletedResultExtensionsField(VideoResultExtensionsField):\n\"\"\"Pydantic model for video completed `result`.`extensions` field.\n\n    Attributes:\n        progress (float): Consists of the percentage of media consumed by the actor.\n    \"\"\"\n\n    progress: NonNegativeFloat = Field(alias=VIDEO_EXTENSION_PROGRESS)\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.video.fields.results.VideoCompletedResultField","title":"<code> VideoCompletedResultField            (ResultField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for video completed <code>result</code> field.</p> <p>Attributes:</p> Name Type Description <code>extensions</code> <code>dict</code> <p>See VideoCompletedResultExtensionsField.</p> <code>completion</code> <code>bool</code> <p>Consists of the value <code>True</code>.</p> <code>duration</code> <code>str</code> <p>Consists of the total time spent consuming the video under current registration.</p> Source code in <code>ralph/models/xapi/video/fields/results.py</code> <pre><code>class VideoCompletedResultField(ResultField):\n\"\"\"Pydantic model for video completed `result` field.\n\n    Attributes:\n        extensions (dict): See VideoCompletedResultExtensionsField.\n        completion (bool): Consists of the value `True`.\n        duration (str): Consists of the total time spent consuming the video under\n            current registration.\n    \"\"\"\n\n    extensions: VideoCompletedResultExtensionsField\n    completion: Optional[Literal[True]]\n    duration: Optional[timedelta]\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.video.fields.results.VideoEnableClosedCaptioningResultExtensionsField","title":"<code> VideoEnableClosedCaptioningResultExtensionsField            (VideoResultExtensionsField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for video enable closed captioning <code>result</code>.<code>extensions</code> field.</p> <p>Attributes:</p> Name Type Description <code>ccEnabled</code> <code>bool</code> <p>Indicates whether subtitles are enabled.</p> Source code in <code>ralph/models/xapi/video/fields/results.py</code> <pre><code>class VideoEnableClosedCaptioningResultExtensionsField(VideoResultExtensionsField):\n\"\"\"Pydantic model for video enable closed captioning `result`.`extensions` field.\n\n    Attributes:\n        ccEnabled (bool): Indicates whether subtitles are enabled.\n    \"\"\"\n\n    ccEnabled: bool = Field(alias=VIDEO_EXTENSION_CC_ENABLED)\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.video.fields.results.VideoEnableClosedCaptioningResultField","title":"<code> VideoEnableClosedCaptioningResultField            (ResultField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for video enable closed captioning <code>result</code> field.</p> <p>Attributes:</p> Name Type Description <code>extensions</code> <code>dict</code> <p>See VideoEnableClosedCaptioningResultExtensionsField.</p> Source code in <code>ralph/models/xapi/video/fields/results.py</code> <pre><code>class VideoEnableClosedCaptioningResultField(ResultField):\n\"\"\"Pydantic model for video enable closed captioning `result` field.\n\n    Attributes:\n        extensions (dict): See VideoEnableClosedCaptioningResultExtensionsField.\n    \"\"\"\n\n    extensions: VideoEnableClosedCaptioningResultExtensionsField\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.video.fields.results.VideoPausedResultExtensionsField","title":"<code> VideoPausedResultExtensionsField            (VideoResultExtensionsField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for video paused <code>result</code>.<code>extensions</code> field.</p> <p>Attributes:</p> Name Type Description <code>progress</code> <code>float</code> <p>Consists of the ratio of media consumed by the actor.</p> Source code in <code>ralph/models/xapi/video/fields/results.py</code> <pre><code>class VideoPausedResultExtensionsField(VideoResultExtensionsField):\n\"\"\"Pydantic model for video paused `result`.`extensions` field.\n\n    Attributes:\n        progress (float): Consists of the ratio of media consumed by the actor.\n    \"\"\"\n\n    progress: Optional[NonNegativeFloat] = Field(alias=VIDEO_EXTENSION_PROGRESS)\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.video.fields.results.VideoPausedResultField","title":"<code> VideoPausedResultField            (ResultField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for video paused <code>result</code> field.</p> <p>Attributes:</p> Name Type Description <code>extensions</code> <code>dict</code> <p>See VideoPausedResultExtensionsField.</p> Source code in <code>ralph/models/xapi/video/fields/results.py</code> <pre><code>class VideoPausedResultField(ResultField):\n\"\"\"Pydantic model for video paused `result` field.\n\n    Attributes:\n        extensions (dict): See VideoPausedResultExtensionsField.\n    \"\"\"\n\n    extensions: VideoPausedResultExtensionsField\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.video.fields.results.VideoPlayedResultField","title":"<code> VideoPlayedResultField            (ResultField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for video played <code>result</code> field.</p> <p>Attributes:</p> Name Type Description <code>extensions</code> <code>dict</code> <p>See VideoResultExtensionsField.</p> Source code in <code>ralph/models/xapi/video/fields/results.py</code> <pre><code>class VideoPlayedResultField(ResultField):\n\"\"\"Pydantic model for video played `result` field.\n\n    Attributes:\n        extensions (dict): See VideoResultExtensionsField.\n    \"\"\"\n\n    extensions: VideoResultExtensionsField\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.video.fields.results.VideoResultExtensionsField","title":"<code> VideoResultExtensionsField            (BaseExtensionModelWithConfig)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for video <code>result</code>.<code>extensions</code> field.</p> <p>Attributes:</p> Name Type Description <code>playedSegments</code> <code>str</code> <p>Consists of parts of the video the actor watched during current registration in chronological order (for example, \u201c0[.]5[,]12[.]22[,]15[.]55[,]55[.]99.33[,]99.33\u201d).</p> <code>time</code> <code>float</code> <p>Consists of the video time code when the event was emitted.</p> Source code in <code>ralph/models/xapi/video/fields/results.py</code> <pre><code>class VideoResultExtensionsField(BaseExtensionModelWithConfig):\n\"\"\"Pydantic model for video `result`.`extensions` field.\n\n    Attributes:\n        playedSegments (str): Consists of parts of the video the actor watched during\n            current registration in chronological order (for example,\n            \"0[.]5[,]12[.]22[,]15[.]55[,]55[.]99.33[,]99.33\").\n        time (float): Consists of the video time code when the event was emitted.\n    \"\"\"\n\n    time: NonNegativeFloat = Field(alias=VIDEO_EXTENSION_TIME)\n    playedSegments: Optional[str] = Field(alias=VIDEO_EXTENSION_PLAYED_SEGMENTS)\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.video.fields.results.VideoScreenChangeInteractionResultField","title":"<code> VideoScreenChangeInteractionResultField            (ResultField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for video screen change interaction <code>result</code> field.</p> <p>Attributes:</p> Name Type Description <code>extensions</code> <code>dict</code> <p>See VideoResultExtensionsField.</p> Source code in <code>ralph/models/xapi/video/fields/results.py</code> <pre><code>class VideoScreenChangeInteractionResultField(ResultField):\n\"\"\"Pydantic model for video screen change interaction `result` field.\n\n    Attributes:\n        extensions (dict): See VideoResultExtensionsField.\n    \"\"\"\n\n    extensions: VideoResultExtensionsField\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.video.fields.results.VideoSeekedResultExtensionsField","title":"<code> VideoSeekedResultExtensionsField            (BaseExtensionModelWithConfig)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for video seeked <code>result</code>.<code>extensions</code> field.</p> <p>Attributes:</p> Name Type Description <code>timeFrom</code> <code>float</code> <p>Consists of the point in time the actor changed from in a media object during a seek operation.</p> <code>timeTo</code> <code>float</code> <p>Consists of the point in time the actor changed to in a media object during a seek operation.</p> Source code in <code>ralph/models/xapi/video/fields/results.py</code> <pre><code>class VideoSeekedResultExtensionsField(BaseExtensionModelWithConfig):\n\"\"\"Pydantic model for video seeked `result`.`extensions` field.\n\n    Attributes:\n        timeFrom (float): Consists of the point in time the actor changed from in a\n            media object during a seek operation.\n        timeTo (float): Consists of the point in time the actor changed to in a media\n            object during a seek operation.\n    \"\"\"\n\n    timeFrom: NonNegativeFloat = Field(alias=VIDEO_EXTENSION_TIME_FROM)\n    timeTo: NonNegativeFloat = Field(alias=VIDEO_EXTENSION_TIME_TO)\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.video.fields.results.VideoSeekedResultField","title":"<code> VideoSeekedResultField            (ResultField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for video seeked <code>result</code> field.</p> <p>Attributes:</p> Name Type Description <code>extensions</code> <code>dict</code> <p>See VideoSeekedResultExtensionsField.</p> Source code in <code>ralph/models/xapi/video/fields/results.py</code> <pre><code>class VideoSeekedResultField(ResultField):\n\"\"\"Pydantic model for video seeked `result` field.\n\n    Attributes:\n        extensions (dict): See VideoSeekedResultExtensionsField.\n    \"\"\"\n\n    extensions: VideoSeekedResultExtensionsField\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.video.fields.results.VideoTerminatedResultExtensionsField","title":"<code> VideoTerminatedResultExtensionsField            (VideoResultExtensionsField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for video terminated <code>result</code>.<code>extensions</code> field.</p> <p>Attributes:</p> Name Type Description <code>progress</code> <code>float</code> <p>Consists of the percentage of media consumed by the actor.</p> Source code in <code>ralph/models/xapi/video/fields/results.py</code> <pre><code>class VideoTerminatedResultExtensionsField(VideoResultExtensionsField):\n\"\"\"Pydantic model for video terminated `result`.`extensions` field.\n\n    Attributes:\n        progress (float): Consists of the percentage of media consumed by the actor.\n    \"\"\"\n\n    progress: NonNegativeFloat = Field(alias=VIDEO_EXTENSION_PROGRESS)\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.video.fields.results.VideoTerminatedResultField","title":"<code> VideoTerminatedResultField            (ResultField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for video terminated <code>result</code> field.</p> <p>Attributes:</p> Name Type Description <code>extensions</code> <code>dict</code> <p>See VideoTerminatedResultExtensionsField.</p> Source code in <code>ralph/models/xapi/video/fields/results.py</code> <pre><code>class VideoTerminatedResultField(ResultField):\n\"\"\"Pydantic model for video terminated `result` field.\n\n    Attributes:\n        extensions (dict): See VideoTerminatedResultExtensionsField.\n    \"\"\"\n\n    extensions: VideoTerminatedResultExtensionsField\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.video.fields.results.VideoVolumeChangeInteractionResultField","title":"<code> VideoVolumeChangeInteractionResultField            (ResultField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for video volume change interaction <code>result</code> field.</p> <p>Attributes:</p> Name Type Description <code>extensions</code> <code>dict</code> <p>See VideoResultExtensionsField.</p> Source code in <code>ralph/models/xapi/video/fields/results.py</code> <pre><code>class VideoVolumeChangeInteractionResultField(ResultField):\n\"\"\"Pydantic model for video volume change interaction `result` field.\n\n    Attributes:\n        extensions (dict): See VideoResultExtensionsField.\n    \"\"\"\n\n    extensions: VideoResultExtensionsField\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.video.fields.verbs","title":"<code>verbs</code>","text":"<p>Video xAPI events verb fields definitions.</p>"},{"location":"models/xapi/#ralph.models.xapi.video.fields.verbs.VideoCompletedVerbField","title":"<code> VideoCompletedVerbField            (VerbField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for video completed <code>verb</code> field.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>str</code> <p>Consists of the value <code>http://adlnet.gov/expapi/verbs/completed</code>.</p> <code>display</code> <code>dict</code> <p>Consists of the dictionary <code>{\"en-US\": \"completed\"}</code>.</p> Source code in <code>ralph/models/xapi/video/fields/verbs.py</code> <pre><code>class VideoCompletedVerbField(VerbField):\n\"\"\"Pydantic model for video completed `verb` field.\n\n    Attributes:\n        id (str): Consists of the value `http://adlnet.gov/expapi/verbs/completed`.\n        display (dict): Consists of the dictionary `{\"en-US\": \"completed\"}`.\n    \"\"\"\n\n    id: VERB_COMPLETED_ID = VERB_COMPLETED_ID.__args__[0]\n    display: Dict[LANG_EN_US_DISPLAY, VERB_COMPLETED_DISPLAY] = {\n        LANG_EN_US_DISPLAY.__args__[0]: VERB_COMPLETED_DISPLAY.__args__[0]\n    }\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.video.fields.verbs.VideoInitializedVerbField","title":"<code> VideoInitializedVerbField            (VerbField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for video initialized <code>verb</code> field.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>str</code> <p>Consists of the value <code>http://adlnet.gov/expapi/verbs/initialized</code>.</p> <code>display</code> <code>Dict</code> <p>Consists of the dictionary <code>{\"en-US\": \"initialized\"}</code>.</p> Source code in <code>ralph/models/xapi/video/fields/verbs.py</code> <pre><code>class VideoInitializedVerbField(VerbField):\n\"\"\"Pydantic model for video initialized `verb` field.\n\n    Attributes:\n        id (str): Consists of the value `http://adlnet.gov/expapi/verbs/initialized`.\n        display (Dict): Consists of the dictionary `{\"en-US\": \"initialized\"}`.\n    \"\"\"\n\n    id: VERB_INITIALIZED_ID = VERB_INITIALIZED_ID.__args__[0]\n    display: Dict[LANG_EN_US_DISPLAY, VERB_INITIALIZED_DISPLAY] = {\n        LANG_EN_US_DISPLAY.__args__[0]: VERB_INITIALIZED_DISPLAY.__args__[0]\n    }\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.video.fields.verbs.VideoInteractedVerbField","title":"<code> VideoInteractedVerbField            (VerbField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for video interacted <code>verb</code> field.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>str</code> <p>Consists of the value <code>http://adlnet.gov/expapi/verbs/interacted</code>.</p> <code>display</code> <code>dict</code> <p>Consists of the dictionary <code>{\"en-US\": \"interacted\"}</code>.</p> Source code in <code>ralph/models/xapi/video/fields/verbs.py</code> <pre><code>class VideoInteractedVerbField(VerbField):\n\"\"\"Pydantic model for video interacted `verb` field.\n\n    Attributes:\n        id (str): Consists of the value `http://adlnet.gov/expapi/verbs/interacted`.\n        display (dict): Consists of the dictionary `{\"en-US\": \"interacted\"}`.\n    \"\"\"\n\n    id: VERB_INTERACTED_ID = VERB_INTERACTED_ID.__args__[0]\n    display: Dict[LANG_EN_US_DISPLAY, VERB_INTERACTED_DISPLAY] = {\n        LANG_EN_US_DISPLAY.__args__[0]: VERB_INTERACTED_DISPLAY.__args__[0]\n    }\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.video.fields.verbs.VideoPausedVerbField","title":"<code> VideoPausedVerbField            (VerbField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for video paused <code>verb</code> field.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>str</code> <p>Consists of the value <code>https://w3id.org/xapi/video/verbs/paused</code>.</p> <code>display</code> <code>dict</code> <p>Consists of the dictionary <code>{\"en-US\": \"paused\"}</code>.</p> Source code in <code>ralph/models/xapi/video/fields/verbs.py</code> <pre><code>class VideoPausedVerbField(VerbField):\n\"\"\"Pydantic model for video paused `verb` field.\n\n    Attributes:\n        id (str): Consists of the value `https://w3id.org/xapi/video/verbs/paused`.\n        display (dict): Consists of the dictionary `{\"en-US\": \"paused\"}`.\n    \"\"\"\n\n    id: VERB_VIDEO_PAUSED_ID = VERB_VIDEO_PAUSED_ID.__args__[0]\n    display: Dict[LANG_EN_US_DISPLAY, VERB_PAUSED_DISPLAY] = {\n        LANG_EN_US_DISPLAY.__args__[0]: VERB_PAUSED_DISPLAY.__args__[0]\n    }\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.video.fields.verbs.VideoPlayedVerbField","title":"<code> VideoPlayedVerbField            (VerbField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for video played <code>verb</code> field.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>str</code> <p>Consists of the value <code>https://w3id.org/xapi/video/verbs/played</code>.</p> <code>display</code> <code>dict</code> <p>Consists of the dictionary <code>{\"en-US\": \"played\"}</code>.</p> Source code in <code>ralph/models/xapi/video/fields/verbs.py</code> <pre><code>class VideoPlayedVerbField(VerbField):\n\"\"\"Pydantic model for video played `verb` field.\n\n    Attributes:\n        id (str): Consists of the value `https://w3id.org/xapi/video/verbs/played`.\n        display (dict): Consists of the dictionary `{\"en-US\": \"played\"}`.\n    \"\"\"\n\n    id: VERB_VIDEO_PLAYED_ID = VERB_VIDEO_PLAYED_ID.__args__[0]\n    display: Dict[LANG_EN_US_DISPLAY, VERB_PLAYED_DISPLAY] = {\n        LANG_EN_US_DISPLAY.__args__[0]: VERB_PLAYED_DISPLAY.__args__[0]\n    }\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.video.fields.verbs.VideoSeekedVerbField","title":"<code> VideoSeekedVerbField            (VerbField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for video seeked <code>verb</code> field.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>str</code> <p>Consists of the value <code>https://w3id.org/xapi/video/verbs/seeked</code>.</p> <code>display</code> <code>dict</code> <p>Consists of the dictionary <code>{\"en-US\": \"seeked\"}</code>.</p> Source code in <code>ralph/models/xapi/video/fields/verbs.py</code> <pre><code>class VideoSeekedVerbField(VerbField):\n\"\"\"Pydantic model for video seeked `verb` field.\n\n    Attributes:\n        id (str): Consists of the value `https://w3id.org/xapi/video/verbs/seeked`.\n        display (dict): Consists of the dictionary `{\"en-US\": \"seeked\"}`.\n    \"\"\"\n\n    id: VERB_VIDEO_SEEKED_ID = VERB_VIDEO_SEEKED_ID.__args__[0]\n    display: Dict[LANG_EN_US_DISPLAY, VERB_SEEKED_DISPLAY] = {\n        LANG_EN_US_DISPLAY.__args__[0]: VERB_SEEKED_DISPLAY.__args__[0]\n    }\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.video.fields.verbs.VideoTerminatedVerbField","title":"<code> VideoTerminatedVerbField            (VerbField)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for video termainated <code>verb</code> field.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>str</code> <p>Consists of the value <code>http://adlnet.gov/expapi/verbs/terminated</code>.</p> <code>display</code> <code>dict</code> <p>Consists of the dictionary <code>{\"en-US\": \"terminated\"}</code>.</p> Source code in <code>ralph/models/xapi/video/fields/verbs.py</code> <pre><code>class VideoTerminatedVerbField(VerbField):\n\"\"\"Pydantic model for video termainated `verb` field.\n\n    Attributes:\n        id (str): Consists of the value `http://adlnet.gov/expapi/verbs/terminated`.\n        display (dict): Consists of the dictionary `{\"en-US\": \"terminated\"}`.\n    \"\"\"\n\n    id: VERB_TERMINATED_ID = VERB_TERMINATED_ID.__args__[0]\n    display: Dict[LANG_EN_US_DISPLAY, VERB_TERMINATED_DISPLAY] = {\n        LANG_EN_US_DISPLAY.__args__[0]: VERB_TERMINATED_DISPLAY.__args__[0]\n    }\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.video.statements","title":"<code>statements</code>","text":"<p>Video xAPI event definitions.</p>"},{"location":"models/xapi/#ralph.models.xapi.video.statements.BaseVideoStatement","title":"<code> BaseVideoStatement            (BaseXapiModel)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for video core statements.</p> <p>Attributes:</p> Name Type Description <code>object</code> <code>dict</code> <p>See VideoObjectField.</p> Source code in <code>ralph/models/xapi/video/statements.py</code> <pre><code>class BaseVideoStatement(BaseXapiModel):\n\"\"\"Pydantic model for video core statements.\n\n    Attributes:\n        object (dict): See VideoObjectField.\n    \"\"\"\n\n    object: VideoObjectField\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.video.statements.VideoCompleted","title":"<code> VideoCompleted            (BaseVideoStatement)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for video completed statement.</p> <p>Example: John completed a video by watching major parts of the video at least once.</p> <p>Attributes:</p> Name Type Description <code>verb</code> <code>dict</code> <p>See VideoCompletedVerbField.</p> <code>result</code> <code>dict</code> <p>See VideoCompletedResultField.</p> <code>context</code> <code>dict</code> <p>See VideoCompletedContextField.</p> Source code in <code>ralph/models/xapi/video/statements.py</code> <pre><code>class VideoCompleted(BaseVideoStatement):\n\"\"\"Pydantic model for video completed statement.\n\n    Example: John completed a video by watching major parts of the video at least once.\n\n    Attributes:\n        verb (dict): See VideoCompletedVerbField.\n        result (dict): See VideoCompletedResultField.\n        context (dict): See VideoCompletedContextField.\n    \"\"\"\n\n    __selector__ = selector(\n        object__definition__type=\"https://w3id.org/xapi/video/activity-type/video\",\n        verb__id=\"http://adlnet.gov/expapi/verbs/completed\",\n    )\n\n    verb: VideoCompletedVerbField = VideoCompletedVerbField()\n    result: VideoCompletedResultField\n    context: VideoCompletedContextField\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.video.statements.VideoEnableClosedCaptioning","title":"<code> VideoEnableClosedCaptioning            (BaseVideoStatement)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for video enable closed captioning statement.</p> <p>Example: John interacted with the player to enable closed captioning.</p> <p>Attributes:</p> Name Type Description <code>verb</code> <code>dict</code> <p>See VideoInteractedVerbField.</p> <code>result</code> <code>dict</code> <p>See VideoEnableClosedCaptioningResultField.</p> <code>context</code> <code>dict</code> <p>See VideoEnableClosedCaptioningContextField.</p> Source code in <code>ralph/models/xapi/video/statements.py</code> <pre><code>class VideoEnableClosedCaptioning(BaseVideoStatement):\n\"\"\"Pydantic model for video enable closed captioning statement.\n\n    Example: John interacted with the player to enable closed captioning.\n\n    Attributes:\n        verb (dict): See VideoInteractedVerbField.\n        result (dict): See VideoEnableClosedCaptioningResultField.\n        context (dict): See VideoEnableClosedCaptioningContextField.\n    \"\"\"\n\n    __selector__ = selector(\n        object__definition__type=\"https://w3id.org/xapi/video/activity-type/video\",\n        verb__id=\"http://adlnet.gov/expapi/verbs/interacted\",\n    )\n\n    verb: VideoInteractedVerbField = VideoInteractedVerbField()\n    result: VideoEnableClosedCaptioningResultField\n    context: VideoEnableClosedCaptioningContextField\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.video.statements.VideoInitialized","title":"<code> VideoInitialized            (BaseVideoStatement)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for video initialized statement.</p> <p>Example: A video has been fully initialized.</p> <p>Attributes:</p> Name Type Description <code>verb</code> <code>dict</code> <p>See VideoInitializedVerbField.</p> <code>context</code> <code>dict</code> <p>See VideoInitializedContextField.</p> Source code in <code>ralph/models/xapi/video/statements.py</code> <pre><code>class VideoInitialized(BaseVideoStatement):\n\"\"\"Pydantic model for video initialized statement.\n\n    Example: A video has been fully initialized.\n\n    Attributes:\n        verb (dict): See VideoInitializedVerbField.\n        context (dict): See VideoInitializedContextField.\n    \"\"\"\n\n    __selector__ = selector(\n        object__definition__type=\"https://w3id.org/xapi/video/activity-type/video\",\n        verb__id=\"http://adlnet.gov/expapi/verbs/initialized\",\n    )\n\n    verb: VideoInitializedVerbField = VideoInitializedVerbField()\n    context: VideoInitializedContextField\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.video.statements.VideoPaused","title":"<code> VideoPaused            (BaseVideoStatement)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for video paused statement.</p> <p>Example: John paused the video or clicked the pause button.</p> <p>Attributes:</p> Name Type Description <code>verb</code> <code>dict</code> <p>See VideoPausedVerbField.</p> <code>result</code> <code>dict</code> <p>See VideoPausedResultField.</p> <code>context</code> <code>dict</code> <p>See VideoPausedContextField.</p> Source code in <code>ralph/models/xapi/video/statements.py</code> <pre><code>class VideoPaused(BaseVideoStatement):\n\"\"\"Pydantic model for video paused statement.\n\n    Example: John paused the video or clicked the pause button.\n\n    Attributes:\n        verb (dict): See VideoPausedVerbField.\n        result (dict): See VideoPausedResultField.\n        context (dict): See VideoPausedContextField.\n    \"\"\"\n\n    __selector__ = selector(\n        object__definition__type=\"https://w3id.org/xapi/video/activity-type/video\",\n        verb__id=\"https://w3id.org/xapi/video/verbs/paused\",\n    )\n\n    verb: VideoPausedVerbField = VideoPausedVerbField()\n    result: VideoPausedResultField\n    context: VideoPausedContextField\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.video.statements.VideoPlayed","title":"<code> VideoPlayed            (BaseVideoStatement)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for video played statement.</p> <p>Example: John played the video or clicked the play button.</p> <p>Attributes:</p> Name Type Description <code>verb</code> <code>dict</code> <p>See VideoPlayedVerbField.</p> <code>result</code> <code>dict</code> <p>See VideoPlayedResultField.</p> <code>context</code> <code>dict</code> <p>See VideoPlayedContextField.</p> Source code in <code>ralph/models/xapi/video/statements.py</code> <pre><code>class VideoPlayed(BaseVideoStatement):\n\"\"\"Pydantic model for video played statement.\n\n    Example: John played the video or clicked the play button.\n\n    Attributes:\n        verb (dict): See VideoPlayedVerbField.\n        result (dict): See VideoPlayedResultField.\n        context (dict): See VideoPlayedContextField.\n    \"\"\"\n\n    __selector__ = selector(\n        object__definition__type=\"https://w3id.org/xapi/video/activity-type/video\",\n        verb__id=\"https://w3id.org/xapi/video/verbs/played\",\n    )\n\n    verb: VideoPlayedVerbField = VideoPlayedVerbField()\n    result: VideoPlayedResultField\n    context: Optional[VideoPlayedContextField]\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.video.statements.VideoScreenChangeInteraction","title":"<code> VideoScreenChangeInteraction            (BaseVideoStatement)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for video screen change interaction statement.</p> <p>Example: John interacted with the player to activate or deactivate full screen.</p> <p>Attributes:</p> Name Type Description <code>verb</code> <code>dict</code> <p>See VideoInteractedVerbField.</p> <code>result</code> <code>dict</code> <p>See VideoScreenChangeInteractionResultField.</p> <code>context</code> <code>dict</code> <p>See VideoScreenChangeInteractionContextField.</p> Source code in <code>ralph/models/xapi/video/statements.py</code> <pre><code>class VideoScreenChangeInteraction(BaseVideoStatement):\n\"\"\"Pydantic model for video screen change interaction statement.\n\n    Example: John interacted with the player to activate or deactivate full screen.\n\n    Attributes:\n        verb (dict): See VideoInteractedVerbField.\n        result (dict): See VideoScreenChangeInteractionResultField.\n        context (dict): See VideoScreenChangeInteractionContextField.\n    \"\"\"\n\n    __selector__ = selector(\n        object__definition__type=\"https://w3id.org/xapi/video/activity-type/video\",\n        verb__id=\"http://adlnet.gov/expapi/verbs/interacted\",\n    )\n\n    verb: VideoInteractedVerbField = VideoInteractedVerbField()\n    result: VideoScreenChangeInteractionResultField\n    context: VideoScreenChangeInteractionContextField\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.video.statements.VideoSeeked","title":"<code> VideoSeeked            (BaseVideoStatement)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for video seeked statement.</p> <p>!!! example \u201cJohn moved the progress bar forward or backward to a specific time in the\u201d     video.</p> <p>Attributes:</p> Name Type Description <code>verb</code> <code>dict</code> <p>See VideoSeekedVerbField.</p> <code>result</code> <code>dict</code> <p>See VideoSeekedResultField.</p> <code>context</code> <code>dict</code> <p>See VideoSeekedContextField.</p> Source code in <code>ralph/models/xapi/video/statements.py</code> <pre><code>class VideoSeeked(BaseVideoStatement):\n\"\"\"Pydantic model for video seeked statement.\n\n    Example: John moved the progress bar forward or backward to a specific time in the\n        video.\n\n    Attributes:\n        verb (dict): See VideoSeekedVerbField.\n        result (dict): See VideoSeekedResultField.\n        context (dict): See VideoSeekedContextField.\n    \"\"\"\n\n    __selector__ = selector(\n        object__definition__type=\"https://w3id.org/xapi/video/activity-type/video\",\n        verb__id=\"https://w3id.org/xapi/video/verbs/seeked\",\n    )\n\n    verb: VideoSeekedVerbField = VideoSeekedVerbField()\n    result: VideoSeekedResultField\n    context: Optional[VideoSeekedContextField]\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.video.statements.VideoTerminated","title":"<code> VideoTerminated            (BaseVideoStatement)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for video terminated statement.</p> <p>Example: John ended a video (quit the player).</p> <p>Attributes:</p> Name Type Description <code>verb</code> <code>dict</code> <p>See VideoTerminatedVerbField.</p> <code>result</code> <code>dict</code> <p>See VideoTerminatedResultField.</p> <code>context</code> <code>dict</code> <p>See VideoTerminatedContextField.</p> Source code in <code>ralph/models/xapi/video/statements.py</code> <pre><code>class VideoTerminated(BaseVideoStatement):\n\"\"\"Pydantic model for video terminated statement.\n\n    Example: John ended a video (quit the player).\n\n    Attributes:\n        verb (dict): See VideoTerminatedVerbField.\n        result (dict): See VideoTerminatedResultField.\n        context (dict): See VideoTerminatedContextField.\n    \"\"\"\n\n    __selector__ = selector(\n        object__definition__type=\"https://w3id.org/xapi/video/activity-type/video\",\n        verb__id=\"http://adlnet.gov/expapi/verbs/terminated\",\n    )\n\n    verb: VideoTerminatedVerbField = VideoTerminatedVerbField()\n    result: VideoTerminatedResultField\n    context: VideoTerminatedContextField\n</code></pre>"},{"location":"models/xapi/#ralph.models.xapi.video.statements.VideoVolumeChangeInteraction","title":"<code> VideoVolumeChangeInteraction            (BaseVideoStatement)         </code>  <code>pydantic-model</code>","text":"<p>Pydantic model for video volume change interaction statement.</p> <p>Example: John interacted with the player to change the volume.</p> <p>Attributes:</p> Name Type Description <code>verb</code> <code>dict</code> <p>See VideoInteractedVerbField.</p> <code>result</code> <code>dict</code> <p>See VideoVolumeChangeInteractionResultField.</p> <code>context</code> <code>dict</code> <p>See VideoVolumeChangeInteractionContextField.</p> Source code in <code>ralph/models/xapi/video/statements.py</code> <pre><code>class VideoVolumeChangeInteraction(BaseVideoStatement):\n\"\"\"Pydantic model for video volume change interaction statement.\n\n    Example: John interacted with the player to change the volume.\n\n    Attributes:\n        verb (dict): See VideoInteractedVerbField.\n        result (dict): See VideoVolumeChangeInteractionResultField.\n        context (dict): See VideoVolumeChangeInteractionContextField.\n    \"\"\"\n\n    __selector__ = selector(\n        object__definition__type=\"https://w3id.org/xapi/video/activity-type/video\",\n        verb__id=\"http://adlnet.gov/expapi/verbs/interacted\",\n    )\n\n    verb: VideoInteractedVerbField = VideoInteractedVerbField()\n    result: VideoVolumeChangeInteractionResultField\n    context: VideoVolumeChangeInteractionContextField\n</code></pre>"}]}