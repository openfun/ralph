#
# Ralph package
#
[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[project]
name = "ralph-malph"
description = "Ralph, the ultimate Learning Record Store (and more!) for your learning analytics."
readme = "README.md"
authors = [
    { "name" = "Open FUN (France Université Numérique)", "email" = "fun.dev@fun-mooc.fr" }
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12"
]
requires-python = ">=3.8"
license = { file = "LICENSE.md" }
keywords = ["LRS", "Analytics", "xAPI", "Open edX"]
dependencies = [
    # By default, we only consider core dependencies required to use Ralph as a
    # library (mostly models).
    "langcodes>=3.2.0",
    "pydantic[dotenv,email]>=1.10.0, <2.0",
    "rfc3987>=1.3.0",
]
dynamic = ["version"]

[project.urls]
"Homepage" = "https://openfun.github.io/ralph/"
"Bug Tracker" = "https://github.com/openfun/ralph/issues"
"Changelog" = "https://github.com/openfun/ralph/blob/master/CHANGELOG.md"
"Repository" = "https://github.com/openfun/ralph"

[project.optional-dependencies]
backend-clickhouse = [
    "clickhouse-connect[numpy,pandas]<0.6",
    "python-dateutil>=2.8.2",
]
backend-es = [
    "elasticsearch[async]>=8.0.0",
]
backend-ldp = [
    "ovh>=1.0.0",
    "requests>=2.0.0",
]
backend-lrs = [
    "httpx<0.25.0", # pin as `pytest-httpx<0.23.0` requires `httpx==0.24.*`
]
backend-mongo = [
    "motor[srv]>=3.3.0",
    "pymongo[srv]>=4.0.0",
    "python-dateutil>=2.8.2",
]
backend-s3 = [
    "boto3>=1.24.70",
    "botocore>=1.27.71",
    "requests-toolbelt>=1.0.0",
]
backend-swift = [
    "python-keystoneclient>=5.0.0",
    "python-swiftclient>=4.0.0",
]
backend-ws = [
    "websockets>=10.3",
]
backends = [
    "ralph-malph[backend-clickhouse,backend-es,backend-ldp,backend-lrs,backend-mongo,backend-s3,backend-swift]",
]
ci = [
    "twine==4.0.2",
]
cli = [
    "bcrypt>=4.0.0",
    "click>=8.1.0",
    "click-option-group>=0.5.0",
    "sentry-sdk[fastapi]>=1.9.0",
]
dev = [
    "anyio<4.2.1", # unpin until fastapi supports new major version of anyio
    "black==23.12.0",
    "cryptography==41.0.7",
    "factory-boy==3.3.0",
    "hypothesis<6.92.0", # pin as hypothesis 6.92.0 observability feature seems broken
    "logging-gelf==0.0.31",
    "mike==2.0.0",
    "mkdocs==1.5.3",
    "mkdocs-click==0.8.1",
    "mkdocs-material==9.5.2",
    "mkdocstrings[python-legacy]==0.24.0",
    "moto==4.2.12",
    "mypy==1.7.1",
    "neoteroi-mkdocs==1.0.4",
    "pyfakefs==5.3.2",
    "pymdown-extensions==10.5",
    "pytest==7.4.3",
    "pytest-asyncio==0.23.2",
    "pytest-cov==4.1.0",
    "pytest-httpx<0.23.0", # pin as Python 3.8 is no longer supported from release 0.23.0
    "requests-mock==1.11.0",
    "responses==0.24.1",
    "ruff==0.1.8",
    "types-python-dateutil == 2.8.19.14",
    "types-python-jose == 3.3.4.8",
    "types-requests<2.31.0.11",
    "types-cachetools ==5.3.0.7",
]
lrs = [
    "bcrypt==4.1.2",
    "fastapi==0.105.0",
    "cachetools==5.3.2",
    "httpx<0.25.0", # pin as `pytest-httpx<0.23.0` requires `httpx==0.24.*`
    "sentry_sdk==1.39.1",
    "python-jose==3.3.0",
    "uvicorn[standard]==0.24.0.post1",
]
full = [
    "ralph-malph[backends,cli,lrs]",
]


[project.scripts]
ralph = "ralph.__main__:cli.cli"

[tool.setuptools]
packages = { find = { where = ["src"] } }
zip-safe = true

[tool.setuptools.dynamic]
version = { attr = "ralph.__version__" }

[tool.distutils.bdist_wheel]
universal = true

#
# Third-party packages configuration
#
[tool.ruff]
exclude = [
    ".conda",
    ".git",
    ".venv",
    "build",
    "scripts",
    "venv",
    "__pycache__",
    "node_modules",
    "*/migrations/*",
]
line-length = 88

[tool.ruff.lint]
select = [
    "ARG",  # flake8-unused-arguments
    "B",  # flake8-bugbear
    "BLE",  # flake8-blind-except
    "C4",  # flake8-comprehensions
    "D",  # pydocstyle
    "E",  # pycodestyle error
    "F",  # Pyflakes
    "FIX",  # flake8-fixme
    "I",  # isort
    "PLC",  # Pylint Convention
    "PLE",  # Pylint Error
    "PLR",  # Pylint Refactor
    "PLW",  # Pylint Warning
    "RUF100",  # Ruff unused-noqa
    "S",  # flake8-bandit
    "SLF",  # flake8-self
    "T20",  # flake8-print
    "W",  # pycodestyle warning
]
ignore = [
    "B008",  # function-call-in-default-argument
    "N806",  # non-lowercase-variable-in-function
    "N815",  # mixed-case-variable-in-class-scope
    "N818",  # error-suffix-on-exception-name
]

[tool.ruff.lint.isort]
section-order = ["future", "standard-library", "third-party", "ralph", "first-party", "local-folder"]
[tool.ruff.lint.isort.sections]
ralph = ["ralph"]

[tool.ruff.per-file-ignores]
"tests/*" = [
    "ARG",  # flake8-unused-arguments
    "D",  # pydocstyle
    "S",  # flake8-bandit
    "SLF",  # flake8-self
    "PLR2004",  # Pylint magic-value-comparison
]
"setup.py" = [
    "D" # Pydocstyle rules
]

[tool.ruff.pydocstyle]
# Use Google-style docstrings.
convention = "google"

[tool.mypy]
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
files = "src/ralph/**/*.py"
plugins = "pydantic.mypy"

[[tool.mypy.overrides]]
module = [
    "rfc3987.*",
    "requests_toolbelt.*",
    "botocore.*",
    "boto3.*",
    "clickhouse_connect.*",
    "ovh.*",
    "swiftclient.service.*",
]
ignore_missing_imports = true

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true

[tool.pytest.ini_options]
addopts = "-v --cov-report term-missing --cov-config=.coveragerc --cov=ralph"
python_files = [
    "test_*.py",
    "tests.py",
]
testpaths = "tests"
