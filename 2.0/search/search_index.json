{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Ralph is a command-line tool to fetch, extract, convert and push your tracking logs (aka learning events) from various storage backends to your LRS or any other compatible storage or database backend.</p>"},{"location":"#key_concepts","title":"Key concepts","text":"<p>Ralph has been designed to batch process your logs using base commands and UNIX standard streams (<code>stdin</code>, <code>stdout</code>) to connect them in a pipeline that fits your needs. A base example pipeline may be:</p> <pre><code>$ ralph fetch --backend swift my_archive.gzip | \\\n    gunzip | \\\n    ralph push --backend es\n</code></pre> <p>In this small pipeline, we stream <code>my_archive.gzip</code> content from a Swift container to the standard output (using the <code>fetch</code> command), uncompress the content (using the <code>gunzip</code> command), and bulk insert logs in an ElasticSearch index (using the <code>push</code> command).</p> <p>As UNIX is beautiful, Ralph offers many powerful possibilities by combining its commands with other standard commands or command line tools.</p>"},{"location":"#quick_start_guide","title":"Quick start guide","text":"<p>Ralph is distributed as a python package and a Docker image.</p> <p>If you choose to install <code>ralph</code> in your native environment (without using Docker), please make sure that Python 3.9 is installed (and your default python distribution).</p> <p>Ralph package can be installed from PyPI using the <code>pip</code> tool:</p> <pre><code># Create a new virtualenv (optional)\n$ python3.9 -m venv venv\n$ source venv/bin/activate\n\n# Install the package (in a virtualenv)\n(venv) $ pip install ralph-malph\n\n# Test the ralph command (it should be in your PATH)\n(venv) $ ralph --help\n</code></pre> <p>Alternatively, Docker users can pull the latest ralph image and start playing with it:</p> <pre><code># Pull latest docker image and get usage\n$ docker run --rm -i fundocker/ralph:latest ralph --help\n\n# Pro tip: define an alias to ease your life\n$ alias ralph=\"docker run --rm -i fundocker/ralph:latest ralph\"\n</code></pre> <p>Now that <code>ralph</code> can be run from your system, we invite you to explore available commands.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>This project is intended to be community-driven, so please, do not hesitate to get in touch if you have any questions related to our implementation or design decisions.</p> <p>We try to raise our code quality standards and expect contributors to follow the recommendations from our handbook.</p>"},{"location":"#license","title":"License","text":"<p>This work is released under the MIT License (see LICENSE).</p>"},{"location":"CHANGELOG/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"CHANGELOG/#unreleased","title":"Unreleased","text":""},{"location":"CHANGELOG/#201_-_2021-07-15","title":"2.0.1 - 2021-07-15","text":""},{"location":"CHANGELOG/#changed","title":"Changed","text":"<ul> <li>Upgrade <code>elasticsearch</code> to <code>7.13.3</code></li> </ul>"},{"location":"CHANGELOG/#fixed","title":"Fixed","text":"<ul> <li>Restore elasticsearch backend datastream compatibility for bulk operations</li> </ul>"},{"location":"CHANGELOG/#200_-_2021-07-09","title":"2.0.0 - 2021-07-09","text":""},{"location":"CHANGELOG/#added","title":"Added","text":"<ul> <li>xAPI video <code>interacted</code> pydantic models</li> <li>xAPI video <code>terminated</code> pydantic models</li> <li>xAPI video <code>completed</code> pydantic models</li> <li>xAPI video <code>seeked</code> pydantic models</li> <li>xAPI video <code>initialized</code> pydantic models</li> <li>xAPI video <code>paused</code> pydantic models</li> <li><code>convert</code> command to transform edx events to xAPI format</li> <li>EdX to xAPI converters for page <code>viewed</code> and<code>page_close</code> events</li> <li>Implement core event format converter</li> <li>xAPI video <code>played</code> pydantic models</li> <li>xAPI page <code>viewed</code> and page <code>terminated</code> pydantic models</li> <li>Implement edx navigational events pydantic models</li> <li>Implement edx enrollment events pydantic models</li> <li>Install security updates in project Docker images</li> <li>Model selector to retrieve associated pydantic model of a given event</li> <li><code>validate</code> command to lint edx events using pydantic models</li> <li>Support all available bulk operation types for the elasticsearch backend   (create, index, update, delete) using the <code>--es-op-type</code> option</li> </ul>"},{"location":"CHANGELOG/#changed_1","title":"Changed","text":"<ul> <li>Upgrade <code>elasticsearch</code> to <code>7.13.2</code></li> <li>Upgrade <code>python-swiftclient</code> to <code>3.12.0</code></li> <li>Upgrade <code>click</code> to <code>8.0.1</code></li> <li>Upgrade <code>click-option-group</code> to <code>0.5.3</code></li> <li>Upgrade <code>pydantic</code> to <code>1.8.2</code></li> <li>Upgrade <code>sentry_sdk</code> to <code>1.1.0</code></li> <li>Rename edx models</li> <li>Migrate model tests from factories to hypothesis strategies</li> <li>Tray: switch from openshift to k8s (BC)</li> <li>Tray: remove useless deployment probes</li> </ul>"},{"location":"CHANGELOG/#fixed_1","title":"Fixed","text":"<ul> <li>Tray: remove <code>version</code> immutable field in DC selector</li> </ul>"},{"location":"CHANGELOG/#120_-_2021-02-26","title":"1.2.0 - 2021-02-26","text":""},{"location":"CHANGELOG/#added_1","title":"Added","text":"<ul> <li>EdX server event pydantic model and factory</li> <li>EdX page_close browser event pydantic model and factory</li> <li>Tray: allow to specify a self-generated elasticsearch cluster CA certificate</li> </ul>"},{"location":"CHANGELOG/#fixed_2","title":"Fixed","text":"<ul> <li>Tray: add missing Swift variables in the secret</li> <li>Tray: fix pods anti-affinity selector</li> </ul>"},{"location":"CHANGELOG/#removed","title":"Removed","text":"<ul> <li><code>pandas</code> is no longer required</li> </ul>"},{"location":"CHANGELOG/#110_-_2021-02-04","title":"1.1.0 - 2021-02-04","text":""},{"location":"CHANGELOG/#added_2","title":"Added","text":"<ul> <li>Support for Swift storage backend</li> <li>Use the <code>push</code> command <code>--ignore-errors</code> option to ignore ES bulk import   errors</li> <li>The elasticsearch backend now accepts passing all supported client options</li> </ul>"},{"location":"CHANGELOG/#changed_2","title":"Changed","text":"<ul> <li>Upgrade <code>pyyaml</code> to <code>5.4.1</code></li> <li>Upgrade <code>pandas</code> to <code>1.2.1</code></li> </ul>"},{"location":"CHANGELOG/#removed_1","title":"Removed","text":"<ul> <li><code>click_log</code> is no longer required as we are able to configure logging</li> </ul>"},{"location":"CHANGELOG/#100_-_2021-01-13","title":"1.0.0 - 2021-01-13","text":""},{"location":"CHANGELOG/#added_3","title":"Added","text":"<ul> <li>Implement base CLI commands (list, extract, fetch &amp; push) for supported   backends</li> <li>Support for ElasticSearch database backend</li> <li>Support for LDP storage backend</li> <li>Support for FS storage backend</li> <li>Parse (gzipped) tracking logs in GELF format</li> <li>Support for application\u2019s configuration file</li> <li>Add optional sentry integration</li> <li>Distribute Arnold\u2019s tray to deploy Ralph in a k8s cluster as cronjobs</li> </ul>"},{"location":"LICENSE/","title":"License","text":"<p>MIT License</p> <p>Copyright (c) 2020-present GIP FUN MOOC.</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u201cSoftware\u201d), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"backends/","title":"Backends","text":"<p>Ralph supports various storage and database backends that can be accessed to read from or write learning events to. Implemented backends are listed below along with their configuration parameters. If your favourite backend is missing to the list, feel free to submit your implementation or get in touch!</p>"},{"location":"backends/#key_concepts","title":"Key concepts","text":"<p>We distinguish storage from database backends as the semantic and concepts are quite different in terms of code, but those two types of backends can be considered as \u201cbackends\u201d from a Ralph user perspective as the CLI can use both in most of its commands.</p> <p>Each backend has its own parameters that are required to use it. Those parameters can be set as command line options or environment variables; the later is the recommended solution for sensible data such as service credentials. If we consider the <code>os_username</code> (OpenStack user name) parameter of the OpenStack Swift backend, it can be set as a command line option using <code>swift</code> as the option prefix (and replacing underscores in its name by dashes):</p> <pre><code>$ ralph list --backend swift --swift-os-username johndoe # [...] more options\n</code></pre> <p>Alternatively, this parameter can be set as an environment variable (in upper case, prefixed by the program name, e.g. <code>RALPH_</code>):</p> <pre><code>$ export RALPH_SWIFT_OS_USERNAME=\"johndoe\"\n$ ralph list --backend swift # [...] more options\n</code></pre> <p>The general patterns for backend parameters are:</p> <ul> <li><code>--{{ backend_name }}-{{ parameter | underscore_to_dash }}</code> for command options, and,</li> <li><code>RALPH_{{ backend_name | uppercase }}_{{ parameter | uppercase }}</code> for environment variables.</li> </ul>"},{"location":"backends/#storage_backends","title":"Storage backends","text":""},{"location":"backends/#ovh_-_log_data_platform_ldp","title":"OVH - Log Data Platform (LDP)","text":"<p>LDP is a nice service built by OVH on top of Graylog to follow, analyse and store your logs. Learning events (aka tracking logs) can be stored in GELF format using this backend.</p> <p>For now the LDP backend is read-only as we consider that it is mostly used to collect primary logs and not as a Ralph target. Feel free to get in touch to prove us wrong, or better: submit your proposal for the <code>write</code> method implementation.</p>"},{"location":"backends/#backend_parameters","title":"Backend parameters","text":"<p>To access OVH\u2019s LDP API, you need to register Ralph as an authorized application and generate an application key, an application secret and a consumer key.</p> <p>While filling the registration form available at: eu.api.ovh.com/createToken/, be sure to give an appropriate validity time span to your token and allow only GET requests on the <code>/dbaas/logs/*</code> path.</p> <ul> <li><code>endpoint</code>: the API endpoint (e.g. <code>ovh-eu</code>)</li> <li><code>application_key</code>: use generated application key</li> <li><code>application_secret</code>: use generated application secret</li> <li><code>consumer_key</code>: use generated consumer key</li> </ul> <p>The following parameters are required to fetch archives from an LDP account stream:</p> <ul> <li><code>service_name</code>: the LDP account name (e.g. <code>ldp-xx-xxxxx</code>)</li> <li><code>stream_id</code>: the identifier of the stream you are querying (e.g. a UUID hex   representation: <code>77ec6e4a-ac15-4bcf-8043-7429bf275e49</code>)</li> </ul> <p>For more information about OVH\u2019s API client parameters, please refer to the project\u2019s documentation: github.com/ovh/python-ovh.</p>"},{"location":"backends/#openstack_swift","title":"OpenStack Swift","text":"<p>Swift is the OpenStack object storage service. This storage backend is fully supported (read and write operations) to stream and store log archives.</p>"},{"location":"backends/#backend_parameters_1","title":"Backend parameters","text":"<p>Primarily required parameters correspond to a standard authentication using OpenStack Keystone service:</p> <ul> <li><code>os_identity_api_version</code>: keystone API version you will authenticate to (defaults to <code>3</code>)</li> <li><code>os_auth_url</code>: the authentication URL (defaults to OVH\u2019s Swift <code>https://auth.cloud.ovh.net/</code>)</li> <li><code>os_project_domain_name</code>: the project domain name (defaults to <code>Default</code>)</li> <li><code>os_user_domain_name</code>: the user domain name (defaults to <code>Default</code>)</li> <li><code>os_username</code>: the name of your openstack swift user</li> <li><code>os_password</code>: the password of your openstack swift user</li> </ul> <p>Secondary parameters are required to work with the target container:</p> <ul> <li><code>os_storage_url</code>: the URL of the target container</li> <li><code>os_region_name</code>: the region where your container is</li> <li><code>os_tenant_name</code>: the name of the tenant of your container</li> <li><code>os_tenant_id</code>: the identifier of the tenant of your container</li> </ul>"},{"location":"backends/#file_system","title":"File system","text":"<p>The file system backend is a dummy template that can be used to develop your own backend. It\u2019s a \u201cdummy\u201d backend as it\u2019s not required in a UNIX Shell context, the <code>ls</code> and <code>cat</code> commands used along with UNIX streams will do a better job.</p>"},{"location":"backends/#backend_parameters_2","title":"Backend parameters","text":"<p>The only required parameter is the <code>path</code> we want to list or stream content from.</p>"},{"location":"backends/#database_backends","title":"Database backends","text":""},{"location":"backends/#elasticsearch","title":"Elasticsearch","text":"<p>Elasticsearch backend is mostly used for indexation purpose (as a datalake) but it can also be used to fetch indexed data from it.</p>"},{"location":"backends/#backend_parameters_3","title":"Backend parameters","text":"<p>Elasticsearch backend parameters required to connect to a cluster are:</p> <ul> <li><code>hosts</code>: a list of cluster hosts to connect to (e.g. <code>[\"http://elasticsearch-node:9200\"]</code>)</li> <li><code>index</code>: the elasticsearch index where to get/put documents</li> <li><code>client_options</code>: all options from the official client are supported and can   be specified as a python <code>dict</code> object (e.g. <code>{'use_ssl': True, 'verify_certs': True}</code>)</li> </ul> <p>For a complete list of supported <code>client_options</code>, please refer to the official client\u2019s documentation.</p>"},{"location":"commands/","title":"Commands","text":""},{"location":"commands/#ralph","title":"ralph","text":"<p>Ralph is a stream-based tool to play with your logs.</p> <p>Usage:</p> <pre><code>ralph [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <pre><code>  -v, --verbosity LVL  Either CRITICAL, ERROR, WARNING, INFO (default) or\n                       DEBUG\n  --help               Show this message and exit.\n</code></pre>"},{"location":"commands/#ralph-convert","title":"ralph convert","text":"<p>Converts input events to a given format.</p> <p>Usage:</p> <pre><code>ralph convert [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  From edX to xAPI converter options: \n    -u, --uuid-namespace TEXT     The UUID namespace to use for the `ID` field\n                                  generation\n    -p, --platform-url TEXT       The `actor.account.homePage` to use in the\n                                  xAPI statements  [required]\n  -f, --from [edx]                Input events format to convert  [required]\n  -t, --to [xapi]                 Output events format  [required]\n  -I, --ignore-errors             Continue writing regardless of raised errors\n  -F, --fail-on-unknown           Stop converting at first unknown event\n  --help                          Show this message and exit.\n</code></pre>"},{"location":"commands/#ralph-extract","title":"ralph extract","text":"<p>Extracts input events from a container format using a dedicated parser.</p> <p>Usage:</p> <pre><code>ralph extract [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -p, --parser [gelf]  Container format parser used to extract events\n                       [required]\n  --help               Show this message and exit.\n</code></pre>"},{"location":"commands/#ralph-fetch","title":"ralph fetch","text":"<p>Fetch an archive or records from a configured backend.</p> <p>Usage:</p> <pre><code>ralph fetch [OPTIONS] [ARCHIVE]\n</code></pre> <p>Options:</p> <pre><code>  swift backend: \n    --swift-os-identity-api-version TEXT\n    --swift-os-auth-url TEXT\n    --swift-os-project-domain-name TEXT\n    --swift-os-user-domain-name TEXT\n    --swift-os-storage-url TEXT\n    --swift-os-region-name TEXT\n    --swift-os-password TEXT\n    --swift-os-username TEXT\n    --swift-os-tenant-name TEXT\n    --swift-os-tenant-id TEXT\n  fs backend: \n    --fs-path TEXT\n  ldp backend: \n    --ldp-stream-id TEXT\n    --ldp-service-name TEXT\n    --ldp-consumer-key TEXT\n    --ldp-application-secret TEXT\n    --ldp-application-key TEXT\n    --ldp-endpoint TEXT\n  es backend: \n    --es-op-type TEXT\n    --es-client-options KEY=VALUE,KEY=VALUE\n    --es-index TEXT\n    --es-hosts TEXT\n  -b, --backend [es|ldp|fs|swift]\n                                  Backend  [required]\n  -c, --chunk-size INTEGER        Get events by chunks of size #\n  --help                          Show this message and exit.\n</code></pre>"},{"location":"commands/#ralph-list","title":"ralph list","text":"<p>List available archives from a configured storage backend.</p> <p>Usage:</p> <pre><code>ralph list [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  swift backend: \n    --swift-os-identity-api-version TEXT\n    --swift-os-auth-url TEXT\n    --swift-os-project-domain-name TEXT\n    --swift-os-user-domain-name TEXT\n    --swift-os-storage-url TEXT\n    --swift-os-region-name TEXT\n    --swift-os-password TEXT\n    --swift-os-username TEXT\n    --swift-os-tenant-name TEXT\n    --swift-os-tenant-id TEXT\n  fs backend: \n    --fs-path TEXT\n  ldp backend: \n    --ldp-stream-id TEXT\n    --ldp-service-name TEXT\n    --ldp-consumer-key TEXT\n    --ldp-application-secret TEXT\n    --ldp-application-key TEXT\n    --ldp-endpoint TEXT\n  -b, --backend [ldp|fs|swift]    Backend  [required]\n  -n, --new / -a, --all           List not fetched (or all) archives\n  -D, --details / -I, --ids       Get archives detailed output (JSON)\n  --help                          Show this message and exit.\n</code></pre>"},{"location":"commands/#ralph-push","title":"ralph push","text":"<p>Push an archive to a configured backend.</p> <p>Usage:</p> <pre><code>ralph push [OPTIONS] [ARCHIVE]\n</code></pre> <p>Options:</p> <pre><code>  swift backend: \n    --swift-os-identity-api-version TEXT\n    --swift-os-auth-url TEXT\n    --swift-os-project-domain-name TEXT\n    --swift-os-user-domain-name TEXT\n    --swift-os-storage-url TEXT\n    --swift-os-region-name TEXT\n    --swift-os-password TEXT\n    --swift-os-username TEXT\n    --swift-os-tenant-name TEXT\n    --swift-os-tenant-id TEXT\n  fs backend: \n    --fs-path TEXT\n  ldp backend: \n    --ldp-stream-id TEXT\n    --ldp-service-name TEXT\n    --ldp-consumer-key TEXT\n    --ldp-application-secret TEXT\n    --ldp-application-key TEXT\n    --ldp-endpoint TEXT\n  es backend: \n    --es-op-type TEXT\n    --es-client-options KEY=VALUE,KEY=VALUE\n    --es-index TEXT\n    --es-hosts TEXT\n  -b, --backend [es|ldp|fs|swift]\n                                  Backend  [required]\n  -c, --chunk-size INTEGER        Get events by chunks of size #\n  -f, --force                     Overwrite existing archives or records\n  -I, --ignore-errors             Continue writing regardless of raised errors\n  --help                          Show this message and exit.\n</code></pre>"},{"location":"commands/#ralph-validate","title":"ralph validate","text":"<p>Validates input events of given format.</p> <p>Usage:</p> <pre><code>ralph validate [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -f, --format [edx|xapi]  Input events format to validate  [required]\n  -I, --ignore-errors      Continue validating regardless of raised errors\n  -F, --fail-on-unknown    Stop validating at first unknown event\n  --help                   Show this message and exit.\n</code></pre>"},{"location":"contribute/","title":"Contribute","text":""},{"location":"contribute/#ralphs_core","title":"Ralph\u2019s core","text":"<p>To start playing with <code>ralph</code>, you should build it using the <code>bootstrap</code> Make target:</p> <pre><code>$ make bootstrap\n</code></pre> <p>Once the project has been bootstrapped, you may want to edit generated <code>.env</code> file to set up available backends parameters that will be injected in the running container as environment variables to configure Ralph (see backends documentation):</p> <pre><code># Elasticsearch backend\nRALPH_ES_HOSTS=http://elasticsearch:9200\nRALPH_ES_INDEX=statements\nRALPH_ES_TEST_HOSTS=http://elasticsearch:9200\nRALPH_ES_TEST_INDEX=test-index\n\n# [...]\n</code></pre> <p>Note that lines starting with a <code>#</code> are considered as commented and thus will have no effect while running Ralph.</p> <p>Now you can start playing the CLI:</p> <pre><code>$ bin/ralph --help\n</code></pre> <p>To lint your code, either use the <code>lint</code> meta target or one of the linting tools we use:</p> <pre><code># Run all linters\n$ make lint\n\n# Run pylint\n$ make lint-pylint\n\n# List available linters\n$ make help | grep lint-\n</code></pre> <p>To run tests on your code, either use the <code>test</code> Make target or the <code>bin/pytest</code> script to pass specific arguments to the test runner:</p> <pre><code># Run all tests\n$ make test\n\n# Run pytest with options\n$ bin/pytest -x -k mixins\n</code></pre>"},{"location":"contribute/#working_with_local_backends","title":"Working with local backends","text":"<p>Not all backends are accessible in a local environment development; for now only <code>elasticsearch</code> and <code>swift</code> services are accessible as docker containers (see <code>docker-compose.yml</code> services).</p> <p>To configure those backends, we provide default parameters in the <code>.env.dist</code> template, you can copy/paste them in your <code>.env</code> file (and uncomment them so that they are properly injected in running containers).</p> <p>Once configured, start available backends using:</p> <pre><code>$ make run-[BACKEND]\n</code></pre> <p>Substitute <code>[BACKEND]</code> by the backend name, e.g. <code>es</code> for Elasticsearch or <code>swift</code> for OpenStack Swift:</p> <pre><code># Start Elasticsearch local backend\n$ make run-es\n# Start Swift local backend\n$ make run-swift\n# Start all local backends\n$ make run-all\n</code></pre> <p>Now that you have started at least the <code>elasticsearch</code> and <code>swift</code> backends, it\u2019s time to play with them:</p> <pre><code># Store a JSON file in the Swift backend\n$ echo '{\"id\": 1, \"foo\": \"bar\"}' | \\\n    ./bin/ralph push -b swift -f foo.json\n\n# Check that we have created a new JSON file in the Swift backend\n$ bin/ralph list -b swift\nfoo.json\n\n# Fetch the content of the JSON file and index it in Elasticsearch\n$ bin/ralph fetch -b swift foo.json | \\\n    bin/ralph push -b es\n\n# Check that we have properly indexed the JSON file in Elasticsearch\n$ bin/ralph fetch -b es\n{\"id\": 1, \"foo\": \"bar\"}\n</code></pre>"},{"location":"contribute/#ralphs_tray","title":"Ralph\u2019s tray","text":"<p>Ralph is distributed along with its tray (a deployable package for Kubernetes clusters using Arnold). If you intend to work on this tray, please refer to Arnold\u2019s documentation.</p>"},{"location":"models/","title":"Rationale","text":"<p>Ralph can be considered versatile since at some point it is log-content-agnostic: most commands will work as expected without transforming logged events content or format.</p> <p>But on the other side, Ralph is a tool dedicated to learning events processing so we\u2019ve implemented key features related to learning events validation and conversion. For now, we mostly focus on two learning events standards: Open edX and xAPI.</p> <p>Data validation and serialisation/de-serialisation are achieved using pydantics models that are documented in the following subsections:</p> <ul> <li>Open edX</li> <li>xAPI (work in progress)</li> </ul>"},{"location":"models/edx/","title":"Open edX events","text":"<p>edX pydantic models</p>"},{"location":"models/edx/#ralph.models.edx.base","title":"<code>base</code>","text":"<p>Base event model definitions</p>"},{"location":"models/edx/#ralph.models.edx.base.AbstractBaseEventField","title":"<code> AbstractBaseEventField            (BaseModelWithConfig)         </code>  <code>pydantic-model</code>","text":"<p>Represents the base event field model inherited by all event <code>event</code> fields.</p> <p>The base model does not have any attributes as event field does not have common sub-fields.</p> Source code in <code>ralph/models/edx/base.py</code> <pre><code>class AbstractBaseEventField(BaseModelWithConfig):\n    \"\"\"Represents the base event field model inherited by all event `event` fields.\n\n    The base model does not have any attributes as event field does not have common sub-fields.\n    \"\"\"\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.base.BaseContextField","title":"<code> BaseContextField            (BaseModelWithConfig)         </code>  <code>pydantic-model</code>","text":"<p>Represents the base context field model inherited by all event <code>context</code> fields.</p> <p>Attributes:</p> Name Type Description <code>course_user_tags</code> <code>dict of str</code> <p>Content from <code>user_api_usercoursetag</code> table. Retrieved with:     <code>dict(         UserCourseTag.objects.filter(             user=request.user.pk, course_id=course_key         ).values_list('key', 'value')     )</code> Note:     Is only present when a course page is requested.     Is an empty dictionary when the user is not logged in or not found in the     <code>user_api_usercoursetag</code> table.</p> <code>user_id</code> <code>int or str or None</code> <p>Consists of the ID of the authenticated user. Retrieved with:     <code>request.user.pk</code> querying the <code>auth_user</code> table. Note:     Is an integer when the user is found in the <code>auth_user</code> table.     Is an empty string when an exception is raised while retrieving the ID.     Is <code>None</code> when the user is not logged in.</p> <code>org_id</code> <code>str</code> <p>Consists of the organization name that lists the course. Retrieved with:     <code>course_id.org</code> where <code>course_id</code> is an <code>opaque_keys.edx.locator.CourseLocator</code>     which is created using the URL of the requested page. Note:     Is an empty string when the requested page is not a course page.</p> <code>course_id</code> <code>str</code> <p>Consists of the unique identifier for the visited course page. Retrieved with:     <code>course_id.to_deprecated_string()</code> where <code>course_id</code> is an     <code>opaque_keys.edx.locator.CourseLocator</code> which is created using the URL     of the requested page. Note:     Is an empty string when the requested page is not a course page.</p> <code>path</code> <code>Path</code> <p>Consist of the relative URL (without the hostname) of the requested page. Retrieved with:     <code>request.META['PATH_INFO']</code></p> Source code in <code>ralph/models/edx/base.py</code> <pre><code>class BaseContextField(BaseModelWithConfig):\n    \"\"\"Represents the base context field model inherited by all event `context` fields.\n\n    Attributes:\n        course_user_tags (dict of str): Content from `user_api_usercoursetag` table.\n            Retrieved with:\n                `dict(\n                    UserCourseTag.objects.filter(\n                        user=request.user.pk, course_id=course_key\n                    ).values_list('key', 'value')\n                )`\n            Note:\n                Is only present when a course page is requested.\n                Is an empty dictionary when the user is not logged in or not found in the\n                `user_api_usercoursetag` table.\n        user_id (int or str or None): Consists of the ID of the authenticated user.\n            Retrieved with:\n                `request.user.pk` querying the `auth_user` table.\n            Note:\n                Is an integer when the user is found in the `auth_user` table.\n                Is an empty string when an exception is raised while retrieving the ID.\n                Is `None` when the user is not logged in.\n        org_id (str): Consists of the organization name that lists the course.\n            Retrieved with:\n                `course_id.org` where `course_id` is an `opaque_keys.edx.locator.CourseLocator`\n                which is created using the URL of the requested page.\n            Note:\n                Is an empty string when the requested page is not a course page.\n        course_id (str): Consists of the unique identifier for the visited course page.\n            Retrieved with:\n                `course_id.to_deprecated_string()` where `course_id` is an\n                `opaque_keys.edx.locator.CourseLocator` which is created using the URL\n                of the requested page.\n            Note:\n                Is an empty string when the requested page is not a course page.\n        path (Path): Consist of the relative URL (without the hostname) of the requested page.\n            Retrieved with:\n                `request.META['PATH_INFO']`\n    \"\"\"\n\n    course_user_tags: Optional[Dict[str, str]]\n    user_id: Union[int, Literal[\"\"], None]\n    org_id: str\n    course_id: constr(regex=r\"^$|^course-v1:.+\\+.+\\+.+$\")  # noqa:F722\n    path: Path\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.base.BaseEvent","title":"<code> BaseEvent            (BaseModelWithConfig)         </code>  <code>pydantic-model</code>","text":"<p>Represents the base event model all events inherit from.</p> <p>WARNING: it does not define the <code>event</code>, <code>event_type</code> and <code>event_source</code> fields.</p> <p>Attributes:</p> Name Type Description <code>username</code> <code>str</code> <p>Consists of the unique username identifying the logged in user. Retrieved with:     <code>request.user.username</code> querying the <code>auth_user</code> table. Note:     Is an empty string when the user is not logged in.     If an exception is raised when retrieving the username from the table then     the value is <code>anonymous</code>.     Usernames are made of 2-30 ASCII letters / numbers / underscores (_) / hyphens (-)</p> <code>ip</code> <code>IPv4Address or str</code> <p>Consists of the public IPv4 address of the user. Retrieved with:     <code>get_ip(request)</code> cf. https://github.com/un33k/django-ipware/tree/1.1.0 Note:     Can be an empty string if the IP address is not found.</p> <code>agent</code> <code>str</code> <p>Consists of the <code>User-Agent</code> HTTP request header. Retrieved with:     <code>request.META[HTTP_USER_AGENT]</code> Note:     Can be an empty string if the header is not present in the request.     Contains information about:         Browser name and version         Operating system name and version         Default language</p> <code>host</code> <code>str</code> <p>Consists of the hostname of the server. Retrieved with:     <code>request.META[SERVER_NAME]</code></p> <code>referer</code> <code>Path</code> <p>Consists of the <code>Referer</code> HTTP request header. Retrieved with:     <code>request.META[HTTP_REFERER]</code> Note:     Can be an empty string if the header is not present in the request.     Contains the referring URL (previous URL visited by the user).</p> <code>accept_language</code> <code>str</code> <p>Consists of the <code>Accept-Language</code> HTTP request header. Retrieved with:     <code>request.META[HTTP_ACCEPT_LANGUAGE]</code> Note:     Can be an empty string if the header is not present in the request.     Contains the default language settings of the user.</p> <code>context</code> <code>BaseContextField</code> <p>see BaseContextField.</p> <code>time</code> <code>datetime</code> <p>Consists of the UTC time in ISO format at which the event was emitted. Retrieved with:     <code>datetime.datetime.utcnow()</code></p> <code>page</code> <code>None</code> <p>Consists of the value <code>None</code> Note:     In JSON the value is <code>null</code> instead of <code>None</code>.</p> Source code in <code>ralph/models/edx/base.py</code> <pre><code>class BaseEvent(BaseModelWithConfig):\n    \"\"\"Represents the base event model all events inherit from.\n\n    WARNING: it does not define the `event`, `event_type` and `event_source` fields.\n\n    Attributes:\n        username (str): Consists of the unique username identifying the logged in user.\n            Retrieved with:\n                `request.user.username` querying the `auth_user` table.\n            Note:\n                Is an empty string when the user is not logged in.\n                If an exception is raised when retrieving the username from the table then\n                the value is `anonymous`.\n                Usernames are made of 2-30 ASCII letters / numbers / underscores (_) / hyphens (-)\n        ip (IPv4Address or str): Consists of the public IPv4 address of the user.\n            Retrieved with:\n                `get_ip(request)` cf. https://github.com/un33k/django-ipware/tree/1.1.0\n            Note:\n                Can be an empty string if the IP address is not found.\n        agent (str): Consists of the `User-Agent` HTTP request header.\n            Retrieved with:\n                `request.META[HTTP_USER_AGENT]`\n            Note:\n                Can be an empty string if the header is not present in the request.\n                Contains information about:\n                    Browser name and version\n                    Operating system name and version\n                    Default language\n        host (str): Consists of the hostname of the server.\n            Retrieved with:\n                `request.META[SERVER_NAME]`\n        referer (Path): Consists of the `Referer` HTTP request header.\n            Retrieved with:\n                `request.META[HTTP_REFERER]`\n            Note:\n                Can be an empty string if the header is not present in the request.\n                Contains the referring URL (previous URL visited by the user).\n        accept_language (str): Consists of the `Accept-Language` HTTP request header.\n            Retrieved with:\n                `request.META[HTTP_ACCEPT_LANGUAGE]`\n            Note:\n                Can be an empty string if the header is not present in the request.\n                Contains the default language settings of the user.\n        context (BaseContextField): see BaseContextField.\n        time (datetime): Consists of the UTC time in ISO format at which the event was emitted.\n            Retrieved with:\n                `datetime.datetime.utcnow()`\n        page (None): Consists of the value `None`\n            Note:\n                In JSON the value is `null` instead of `None`.\n    \"\"\"\n\n    username: Union[constr(min_length=2, max_length=30), Literal[\"\"]]\n    ip: Union[IPv4Address, Literal[\"\"]]\n    agent: str\n    host: str\n    referer: Union[HttpUrl, Literal[\"\"]]\n    accept_language: str\n    context: BaseContextField\n    time: datetime\n    page: Union[Literal[None], None]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.base.BaseModelWithConfig","title":"<code> BaseModelWithConfig            (BaseModel)         </code>  <code>pydantic-model</code>","text":"<p>Base model defining configuration shared among all models.</p> Source code in <code>ralph/models/edx/base.py</code> <pre><code>class BaseModelWithConfig(BaseModel):\n    \"\"\"Base model defining configuration shared among all models.\"\"\"\n\n    class Config:  # pylint: disable=missing-class-docstring\n        extra = \"forbid\"\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.browser","title":"<code>browser</code>","text":"<p>Browser event model definitions</p>"},{"location":"models/edx/#ralph.models.edx.browser.BaseBrowserEvent","title":"<code> BaseBrowserEvent            (BaseEvent)         </code>  <code>pydantic-model</code>","text":"<p>Represents the base browser event model all browser events inherit from.</p> <p>This type of event is triggered on (XHR) POST/GET requests to the <code>/event</code> URL.</p> <p>Attributes:</p> Name Type Description <code>event_source</code> <code>str</code> <p>Consists of the value <code>browser</code>.</p> <code>page</code> <code>Path</code> <p>Consists of the URL (with hostname) of the visited page. Retrieved with:     <code>window.location.href</code> from the JavaScript front-end.</p> <code>session</code> <code>str</code> <p>Consists of the md5 encrypted Django session key or an empty string.</p> Source code in <code>ralph/models/edx/browser.py</code> <pre><code>class BaseBrowserEvent(BaseEvent):\n    \"\"\"Represents the base browser event model all browser events inherit from.\n\n    This type of event is triggered on (XHR) POST/GET requests to the `/event` URL.\n\n    Attributes:\n        event_source (str): Consists of the value `browser`.\n        page (Path): Consists of the URL (with hostname) of the visited page.\n            Retrieved with:\n                `window.location.href` from the JavaScript front-end.\n        session (str): Consists of the md5 encrypted Django session key or an empty string.\n    \"\"\"\n\n    event_source: Literal[\"browser\"]\n    page: Union[AnyUrl, Path]\n    session: Union[constr(regex=r\"^[a-f0-9]{32}$\"), Literal[\"\"]]  # noqa: F722\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.converters","title":"<code>converters</code>  <code>special</code>","text":""},{"location":"models/edx/#ralph.models.edx.converters.xapi","title":"<code>xapi</code>  <code>special</code>","text":"<p>edX to xAPI conversion sets</p>"},{"location":"models/edx/#ralph.models.edx.converters.xapi.base","title":"<code>base</code>","text":"<p>Base xAPI Converter</p>"},{"location":"models/edx/#ralph.models.edx.converters.xapi.base.BaseXapiConverter","title":"<code> BaseXapiConverter            (BaseConversionSet)         </code>","text":"<p>Base xAPI Converter.</p> <p>WARNING: The converter may not include the following edX fields: - context.org_id: When <code>org_id</code> is an empty string. - context.course_id: When <code>course_id</code> is an empty string.</p> <p>WARNING: The converter should not include the following edX fields as they may contain sensitive data: <code>username</code>, <code>referer</code>, <code>event</code>, <code>event_source</code>, <code>ip</code>, <code>agent</code>, <code>accept_language:</code>, <code>context.course_user_tags</code>.</p> Source code in <code>ralph/models/edx/converters/xapi/base.py</code> <pre><code>class BaseXapiConverter(BaseConversionSet):\n    \"\"\"Base xAPI Converter.\n\n    WARNING: The converter may not include the following edX fields:\n    - context.org_id: When `org_id` is an empty string.\n    - context.course_id: When `course_id` is an empty string.\n\n    WARNING: The converter should not include the following edX fields as they may\n    contain sensitive data: `username`, `referer`, `event`, `event_source`, `ip`,\n    `agent`, `accept_language:`, `context.course_user_tags`.\n    \"\"\"\n\n    def __init__(self, uuid_namespace: str, platform_url: str):\n        \"\"\"Initializes BaseXapiConverter.\"\"\"\n\n        self.platform_url = platform_url\n        try:\n            self.uuid_namespace = UUID(uuid_namespace)\n        except (TypeError, ValueError, AttributeError) as err:\n            raise ConfigurationException(\"Invalid UUID namespace\") from err\n        super().__init__()\n\n    def _get_conversion_items(self):\n        \"\"\"Returns a set of ConversionItems used for conversion.\"\"\"\n\n        return {\n            ConversionItem(\n                \"id\",\n                None,\n                lambda event_str: str(uuid5(self.uuid_namespace, event_str)),\n                True,\n            ),\n            ConversionItem(\n                \"actor__account__homePage\", transformers=lambda _: self.platform_url\n            ),\n            ConversionItem(\n                \"actor__account__name\",\n                \"context__user_id\",\n                lambda user_id: user_id if user_id else \"anonymous\",\n            ),\n            ConversionItem(\n                \"object__definition__extensions__\" + EXTENSION_SCHOOL_ID,\n                \"context__org_id\",\n            ),\n            ConversionItem(\n                \"object__definition__extensions__\" + EXTENSION_COURSE_ID,\n                \"context__course_id\",\n                (self.parse_course_id, lambda x: x[\"course\"]),\n            ),\n            ConversionItem(\n                \"object__definition__extensions__\" + EXTENSION_MODULE_ID,\n                \"context__course_id\",\n                (self.parse_course_id, lambda x: x[\"module\"]),\n            ),\n            ConversionItem(\"timestamp\", \"time\"),\n        }\n\n    @staticmethod\n    def parse_course_id(course_id: str):\n        \"\"\"Returns a dictionary with `course` and `module` of edX event's `context.course_id`.\"\"\"\n\n        match = re.match(r\"^course-v1:.+\\+(.+)\\+(.+)$\", course_id)\n        if not match:\n            return {\"course\": None, \"module\": None}\n        return {\"course\": match.group(1), \"module\": match.group(2)}\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.converters.xapi.base.BaseXapiConverter.__init__","title":"<code>__init__(self, uuid_namespace, platform_url)</code>  <code>special</code>","text":"<p>Initializes BaseXapiConverter.</p> Source code in <code>ralph/models/edx/converters/xapi/base.py</code> <pre><code>def __init__(self, uuid_namespace: str, platform_url: str):\n    \"\"\"Initializes BaseXapiConverter.\"\"\"\n\n    self.platform_url = platform_url\n    try:\n        self.uuid_namespace = UUID(uuid_namespace)\n    except (TypeError, ValueError, AttributeError) as err:\n        raise ConfigurationException(\"Invalid UUID namespace\") from err\n    super().__init__()\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.converters.xapi.base.BaseXapiConverter.parse_course_id","title":"<code>parse_course_id(course_id)</code>  <code>staticmethod</code>","text":"<p>Returns a dictionary with <code>course</code> and <code>module</code> of edX event\u2019s <code>context.course_id</code>.</p> Source code in <code>ralph/models/edx/converters/xapi/base.py</code> <pre><code>@staticmethod\ndef parse_course_id(course_id: str):\n    \"\"\"Returns a dictionary with `course` and `module` of edX event's `context.course_id`.\"\"\"\n\n    match = re.match(r\"^course-v1:.+\\+(.+)\\+(.+)$\", course_id)\n    if not match:\n        return {\"course\": None, \"module\": None}\n    return {\"course\": match.group(1), \"module\": match.group(2)}\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.converters.xapi.navigational","title":"<code>navigational</code>","text":"<p>Navigational event xAPI Converter</p>"},{"location":"models/edx/#ralph.models.edx.converters.xapi.navigational.UIPageCloseToPageTerminated","title":"<code> UIPageCloseToPageTerminated            (BaseXapiConverter)         </code>","text":"<p>Converts a common edX <code>page_close</code> event to xAPI.</p> <p>Example Statement: John terminated https://www.fun-mooc.fr/ page.</p> <p>WARNING: The converter does not use the <code>self.platform_url</code> in the <code>object__id</code>.</p> Source code in <code>ralph/models/edx/converters/xapi/navigational.py</code> <pre><code>class UIPageCloseToPageTerminated(BaseXapiConverter):\n    \"\"\"Converts a common edX `page_close` event to xAPI.\n\n    Example Statement: John terminated https://www.fun-mooc.fr/ page.\n\n    WARNING: The converter does not use the `self.platform_url` in the `object__id`.\n    \"\"\"\n\n    __src__ = UIPageClose\n    __dest__ = PageTerminated\n\n    def _get_conversion_items(self):\n        \"\"\"Returns a set of ConversionItems used for conversion.\"\"\"\n\n        conversion_items = super()._get_conversion_items()\n        return conversion_items.union({ConversionItem(\"object__id\", \"page\")})\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.converters.xapi.navigational.UIPageCloseToPageTerminated.__dest__","title":"<code> __dest__            (BaseXapiModel)         </code>  <code>pydantic-model</code>","text":"<p>Represents a page terminated xAPI statement.</p> <p>Example: John terminated the https://www.fun-mooc.fr/ page.</p> <p>Attributes:</p> Name Type Description <code>object</code> <code>PageObjectField</code> <p>See PageObjectField.</p> <code>verb</code> <code>PageTerminatedVerbField</code> <p>See PageTerminatedVerbField.</p> Source code in <code>ralph/models/edx/converters/xapi/navigational.py</code> <pre><code>class PageTerminated(BaseXapiModel):\n    \"\"\"Represents a page terminated xAPI statement.\n\n    Example: John terminated the https://www.fun-mooc.fr/ page.\n\n    Attributes:\n       object (PageObjectField): See PageObjectField.\n       verb (PageTerminatedVerbField): See PageTerminatedVerbField.\n    \"\"\"\n\n    __selector__ = selector(\n        object__definition__type=\"http://activitystrea.ms/schema/1.0/page\",\n        verb__id=\"http://adlnet.gov/expapi/verbs/terminated\",\n    )\n\n    object: PageObjectField\n    verb: TerminatedVerbField = TerminatedVerbField()\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.converters.xapi.navigational.UIPageCloseToPageTerminated.__src__","title":"<code> __src__            (BaseBrowserEvent)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>page_close</code> browser event.</p> <p>This type of event is triggered when the user navigates to the next page or closes the browser window (when the JavaScript <code>window.onunload</code> event is called).</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>str</code> <p>Consists of the string value <code>{}</code>.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>page_close</code>.</p> <code>name</code> <code>str</code> <p>Consists of the value <code>page_close</code>.</p> Source code in <code>ralph/models/edx/converters/xapi/navigational.py</code> <pre><code>class UIPageClose(BaseBrowserEvent):\n    \"\"\"Represents the `page_close` browser event.\n\n    This type of event is triggered when the user navigates to the next page\n    or closes the browser window (when the JavaScript `window.onunload` event\n    is called).\n\n    Attributes:\n        event (str): Consists of the string value `{}`.\n        event_type (str): Consists of the value `page_close`.\n        name (str): Consists of the value `page_close`.\n    \"\"\"\n\n    __selector__ = selector(event_source=\"browser\", event_type=\"page_close\")\n\n    # pylint: disable=unsubscriptable-object\n    event: Literal[\"{}\"]\n    event_type: Literal[\"page_close\"]\n    name: Literal[\"page_close\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.converters.xapi.server","title":"<code>server</code>","text":"<p>Server event xAPI Converter</p>"},{"location":"models/edx/#ralph.models.edx.converters.xapi.server.ServerEventToPageViewed","title":"<code> ServerEventToPageViewed            (BaseXapiConverter)         </code>","text":"<p>Converts a common edX server event to xAPI.</p> <p>Example Statement: John viewed https://www.fun-mooc.fr/ page.</p> Source code in <code>ralph/models/edx/converters/xapi/server.py</code> <pre><code>class ServerEventToPageViewed(BaseXapiConverter):\n    \"\"\"Converts a common edX server event to xAPI.\n\n    Example Statement: John viewed https://www.fun-mooc.fr/ page.\n    \"\"\"\n\n    __src__ = ServerEvent\n    __dest__ = PageViewed\n\n    def _get_conversion_items(self):\n        \"\"\"Returns a set of ConversionItems used for conversion.\"\"\"\n\n        conversion_items = super()._get_conversion_items()\n        return conversion_items.union(\n            {\n                ConversionItem(\n                    \"object__id\",\n                    \"event_type\",\n                    lambda event_type: self.platform_url + event_type,\n                ),\n            }\n        )\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.converters.xapi.server.ServerEventToPageViewed.__dest__","title":"<code> __dest__            (BaseXapiModel)         </code>  <code>pydantic-model</code>","text":"<p>Represents a page viewed xAPI statement.</p> <p>Example: John viewed the https://www.fun-mooc.fr/ page.</p> <p>Attributes:</p> Name Type Description <code>object</code> <code>PageObjectField</code> <p>See PageObjectField.</p> <code>verb</code> <code>PageViewedVerbField</code> <p>See PageViewedVerbField.</p> Source code in <code>ralph/models/edx/converters/xapi/server.py</code> <pre><code>class PageViewed(BaseXapiModel):\n    \"\"\"Represents a page viewed xAPI statement.\n\n    Example: John viewed the https://www.fun-mooc.fr/ page.\n\n    Attributes:\n       object (PageObjectField): See PageObjectField.\n       verb (PageViewedVerbField): See PageViewedVerbField.\n    \"\"\"\n\n    __selector__ = selector(\n        object__definition__type=\"http://activitystrea.ms/schema/1.0/page\",\n        verb__id=\"http://id.tincanapi.com/verb/viewed\",\n    )\n\n    object: PageObjectField\n    verb: ViewedVerbField = ViewedVerbField()\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.converters.xapi.server.ServerEventToPageViewed.__src__","title":"<code> __src__            (BaseServerEvent)         </code>  <code>pydantic-model</code>","text":"<p>Represents a common server event.</p> <p>This type of event is triggered from the django middleware on each request excluding: <code>/event</code>, <code>login</code>, <code>heartbeat</code>, <code>/segmentio/event</code> and <code>/performance</code>.</p> <p>Attributes:</p> Name Type Description <code>event_type</code> <code>str</code> <p>Consist of the relative URL (without the hostname) of the requested page. Retrieved with:     <code>request.META['PATH_INFO']</code></p> <code>event</code> <code>str</code> <p>Consist of a JSON string holding the content of the GET or POST request. Retrieved with:     <code>json.dumps({'GET': dict(request.GET), 'POST': dict(request.POST)})[:512]</code> Note:     Values for [\u2018password\u2019, \u2018newpassword\u2019, \u2018new_password\u2019, \u2018oldpassword\u2019,     \u2018old_password\u2019, \u2018new_password1\u2019, \u2018new_password2\u2019] are replaced by <code>********</code>.     The JSON string is truncated at 512 characters resulting in invalid JSON.</p> Source code in <code>ralph/models/edx/converters/xapi/server.py</code> <pre><code>class ServerEvent(BaseServerEvent):\n    \"\"\"Represents a common server event.\n\n    This type of event is triggered from the django middleware on each request excluding:\n    `/event`, `login`, `heartbeat`, `/segmentio/event` and `/performance`.\n\n    Attributes:\n        event_type (str): Consist of the relative URL (without the hostname) of the requested page.\n            Retrieved with:\n                `request.META['PATH_INFO']`\n        event (str): Consist of a JSON string holding the content of the GET or POST request.\n            Retrieved with:\n                `json.dumps({'GET': dict(request.GET), 'POST': dict(request.POST)})[:512]`\n            Note:\n                Values for ['password', 'newpassword', 'new_password', 'oldpassword',\n                'old_password', 'new_password1', 'new_password2'] are replaced by `********`.\n                The JSON string is truncated at 512 characters resulting in invalid JSON.\n    \"\"\"\n\n    __selector__ = selector(\n        event_source=\"server\", event_type=LazyModelField(\"context__path\")\n    )\n\n    # pylint: disable=unsubscriptable-object\n    event_type: Path\n    event: Union[Json[ServerEventField], ServerEventField]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.enrollment","title":"<code>enrollment</code>","text":"<p>Enrollment event model definitions</p>"},{"location":"models/edx/#ralph.models.edx.enrollment.EdxCourseEnrollmentActivated","title":"<code> EdxCourseEnrollmentActivated            (BaseServerEvent)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>edx.course.enrollment.activated</code> server event.</p> <p>When a student enrolls in a course, the server emits this event.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>EnrollmentEventField</code> <p>See EnrollmentEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>edx.course.enrollment.activated</code>.</p> <code>name</code> <code>str</code> <p>Consists of the value <code>edx.course.enrollment.activated</code>.</p> Source code in <code>ralph/models/edx/enrollment.py</code> <pre><code>class EdxCourseEnrollmentActivated(BaseServerEvent):\n    \"\"\"Represents the `edx.course.enrollment.activated` server event.\n\n    When a student enrolls in a course, the server emits this event.\n\n    Attributes:\n        event (EnrollmentEventField): See EnrollmentEventField.\n        event_type (str): Consists of the value `edx.course.enrollment.activated`.\n        name (str): Consists of the value `edx.course.enrollment.activated`.\n    \"\"\"\n\n    __selector__ = selector(\n        event_source=\"server\", event_type=\"edx.course.enrollment.activated\"\n    )\n\n    event: Union[\n        Json[EnrollmentEventField],  # pylint: disable=unsubscriptable-object\n        EnrollmentEventField,\n    ]\n    event_type: Literal[\"edx.course.enrollment.activated\"]\n    name: Literal[\"edx.course.enrollment.activated\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.enrollment.EdxCourseEnrollmentDeactivated","title":"<code> EdxCourseEnrollmentDeactivated            (BaseServerEvent)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>edx.course.enrollment.deactivated</code> server event.</p> <p>When a student unenrolls from a course, the server emits this event.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>EnrollmentEventField</code> <p>See EnrollmentEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>edx.course.enrollment.deactivated</code>.</p> <code>name</code> <code>str</code> <p>Consists of the value <code>edx.course.enrollment.deactivated</code>.</p> Source code in <code>ralph/models/edx/enrollment.py</code> <pre><code>class EdxCourseEnrollmentDeactivated(BaseServerEvent):\n    \"\"\"Represents the `edx.course.enrollment.deactivated` server event.\n\n    When a student unenrolls from a course, the server emits this event.\n\n    Attributes:\n        event (EnrollmentEventField): See EnrollmentEventField.\n        event_type (str): Consists of the value `edx.course.enrollment.deactivated`.\n        name (str): Consists of the value `edx.course.enrollment.deactivated`.\n    \"\"\"\n\n    __selector__ = selector(\n        event_source=\"server\", event_type=\"edx.course.enrollment.deactivated\"\n    )\n\n    event: Union[\n        Json[EnrollmentEventField],  # pylint: disable=unsubscriptable-object\n        EnrollmentEventField,\n    ]\n    event_type: Literal[\"edx.course.enrollment.deactivated\"]\n    name: Literal[\"edx.course.enrollment.deactivated\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.enrollment.EdxCourseEnrollmentModeChanged","title":"<code> EdxCourseEnrollmentModeChanged            (BaseServerEvent)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>edx.course.enrollment.mode_changed</code> server event.</p> <p>The server emits this event when the process of changing a student\u2019s student_courseenrollment.mode to a different mode is complete.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>EnrollmentEventField</code> <p>See EnrollmentEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>edx.course.enrollment.mode_changed</code>.</p> <code>name</code> <code>str</code> <p>Consists of the value <code>edx.course.enrollment.mode_changed</code>.</p> Source code in <code>ralph/models/edx/enrollment.py</code> <pre><code>class EdxCourseEnrollmentModeChanged(BaseServerEvent):\n    \"\"\"Represents the `edx.course.enrollment.mode_changed` server event.\n\n    The server emits this event when the process of changing a student\u2019s\n    student_courseenrollment.mode to a different mode is complete.\n\n    Attributes:\n        event (EnrollmentEventField): See EnrollmentEventField.\n        event_type (str): Consists of the value `edx.course.enrollment.mode_changed`.\n        name (str): Consists of the value `edx.course.enrollment.mode_changed`.\n    \"\"\"\n\n    __selector__ = selector(\n        event_source=\"server\", event_type=\"edx.course.enrollment.mode_changed\"\n    )\n\n    event: Union[\n        Json[EnrollmentEventField],  # pylint: disable=unsubscriptable-object\n        EnrollmentEventField,\n    ]\n    event_type: Literal[\"edx.course.enrollment.mode_changed\"]\n    name: Literal[\"edx.course.enrollment.mode_changed\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.enrollment.EdxCourseEnrollmentUpgradeClickedContextField","title":"<code> EdxCourseEnrollmentUpgradeClickedContextField            (BaseContextField)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>context</code> field of the <code>edx.course.enrollment.upgrade_clicked</code> server event.</p> <p>In addition to the common context member fields, this event also includes the <code>mode</code> context member field.</p> <p>Attributes:</p> Name Type Description <code>mode</code> <code>str</code> <p>Consists of either the <code>audit</code> or <code>honor</code> value. It identifies the enrollment mode when the user clicked Challenge Yourself:</p> Source code in <code>ralph/models/edx/enrollment.py</code> <pre><code>class EdxCourseEnrollmentUpgradeClickedContextField(BaseContextField):\n    \"\"\"Represents the `context` field of the `edx.course.enrollment.upgrade_clicked` server event.\n\n    In addition to the common context member fields, this event also includes\n    the `mode` context member field.\n\n    Attribute:\n        mode (str): Consists of either the `audit` or `honor` value.\n            It identifies the enrollment mode when the user clicked &lt;kbd&gt;Challenge Yourself&lt;/kbd&gt;:\n    \"\"\"\n\n    mode: Union[Literal[\"audit\"], Literal[\"honor\"]]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.enrollment.EdxCourseEnrollmentUpgradeSucceeded","title":"<code> EdxCourseEnrollmentUpgradeSucceeded            (BaseServerEvent)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>edx.course.enrollment.upgrade.succeeded</code> server event.</p> <p>The server emits this event when the process of upgrading a student\u2019s student_courseenrollment.mode from <code>audit</code> or <code>honor</code> to <code>verified</code> is complete.</p> <p>Attributes:</p> Name Type Description <code>context</code> <code>EdxCourseEnrollmentUpgradeSucceededContextField</code> <p>See EdxCourseEnrollmentUpgradeSucceededContextField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>edx.course.enrollment.upgrade.succeeded</code>.</p> <code>name</code> <code>str</code> <p>Consists of the value <code>edx.course.enrollment.upgrade.succeeded</code>.</p> Source code in <code>ralph/models/edx/enrollment.py</code> <pre><code>class EdxCourseEnrollmentUpgradeSucceeded(BaseServerEvent):\n    \"\"\"Represents the `edx.course.enrollment.upgrade.succeeded` server event.\n\n    The server emits this event when the process of upgrading a student\u2019s\n    student_courseenrollment.mode from `audit` or `honor` to `verified` is complete.\n\n    Attributes:\n        context (EdxCourseEnrollmentUpgradeSucceededContextField):\n            See EdxCourseEnrollmentUpgradeSucceededContextField.\n        event_type (str): Consists of the value `edx.course.enrollment.upgrade.succeeded`.\n        name (str): Consists of the value `edx.course.enrollment.upgrade.succeeded`.\n    \"\"\"\n\n    __selector__ = selector(\n        event_source=\"server\", event_type=\"edx.course.enrollment.upgrade.succeeded\"\n    )\n\n    context: EdxCourseEnrollmentUpgradeSucceededContextField\n    event_type: Literal[\"edx.course.enrollment.upgrade.succeeded\"]\n    name: Literal[\"edx.course.enrollment.upgrade.succeeded\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.enrollment.EdxCourseEnrollmentUpgradeSucceededContextField","title":"<code> EdxCourseEnrollmentUpgradeSucceededContextField            (BaseContextField)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>context</code> field of the <code>edx.course.enrollment.upgrade.succeeded</code> server event.</p> <p>In addition to the common context member fields, this event also includes the <code>mode</code> context member field.</p> <p>Attributes:</p> Name Type Description <code>mode</code> <code>str</code> <p>Consists of the <code>verified</code> value.</p> Source code in <code>ralph/models/edx/enrollment.py</code> <pre><code>class EdxCourseEnrollmentUpgradeSucceededContextField(BaseContextField):\n    \"\"\"Represents the `context` field of the `edx.course.enrollment.upgrade.succeeded` server event.\n\n    In addition to the common context member fields, this event also includes\n    the `mode` context member field.\n\n    Attribute:\n        mode (str): Consists of the `verified` value.\n    \"\"\"\n\n    mode: Literal[\"verified\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.enrollment.EnrollmentEventField","title":"<code> EnrollmentEventField            (AbstractBaseEventField)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>event</code> field for enrollment events.</p> <p>Note: Only server enrollment events require an <code>event</code> field.</p> <p>Attributes:</p> Name Type Description <code>course_id</code> <code>str</code> <p>Consists in the course in which the student was enrolled or unenrolled.</p> <code>mode</code> <code>str</code> <p>Takes either <code>audit</code>, <code>honor</code>, <code>professional</code> or <code>verified</code> value. It identifies the student\u2019s enrollment mode.</p> <code>user_id</code> <code>int</code> <p>Identifies the student who was enrolled or unenrolled.</p> Source code in <code>ralph/models/edx/enrollment.py</code> <pre><code>class EnrollmentEventField(AbstractBaseEventField):\n    \"\"\"Represents the `event` field for enrollment events.\n\n    Note: Only server enrollment events require an `event` field.\n\n    Attributes:\n        course_id (str): Consists in the course in which the student was enrolled or unenrolled.\n        mode (str): Takes either `audit`, `honor`, `professional` or `verified` value.\n            It identifies the student\u2019s enrollment mode.\n        user_id (int): Identifies the student who was enrolled or unenrolled.\n    \"\"\"\n\n    course_id: str\n    mode: Union[\n        Literal[\"audit\"], Literal[\"honor\"], Literal[\"professional\"], Literal[\"verified\"]\n    ]\n    user_id: Union[int, Literal[\"\"], None]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.enrollment.UIEdxCourseEnrollmentUpgradeClicked","title":"<code> UIEdxCourseEnrollmentUpgradeClicked            (BaseBrowserEvent)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>edx.course.enrollment.upgrade_clicked</code> browser event.</p> <p>The browser emits this event when a student clicks ChallengeYourself option, and the process of upgrading the student_courseenrollment.mode for the student to <code>verified</code> begins.</p> <p>Attributes:</p> Name Type Description <code>context</code> <code>EdxCourseEnrollmentUpgradeClickedContextField</code> <p>See EdxCourseEnrollmentUpgradeClickedContextField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>edx.course.enrollment.upgrade_clicked</code>.</p> <code>name</code> <code>str</code> <p>Consists of the value <code>edx.course.enrollment.upgrade_clicked</code>.</p> Source code in <code>ralph/models/edx/enrollment.py</code> <pre><code>class UIEdxCourseEnrollmentUpgradeClicked(BaseBrowserEvent):\n    \"\"\"Represents the `edx.course.enrollment.upgrade_clicked` browser event.\n\n    The browser emits this event when a student clicks &lt;kbd&gt;ChallengeYourself&lt;/kbd&gt; option,\n    and the process of upgrading the student_courseenrollment.mode for the student\n    to `verified` begins.\n\n    Attributes:\n        context (EdxCourseEnrollmentUpgradeClickedContextField):\n            See EdxCourseEnrollmentUpgradeClickedContextField.\n        event_type (str): Consists of the value `edx.course.enrollment.upgrade_clicked`.\n        name (str): Consists of the value `edx.course.enrollment.upgrade_clicked`.\n    \"\"\"\n\n    __selector__ = selector(\n        event_source=\"browser\", event_type=\"edx.course.enrollment.upgrade_clicked\"\n    )\n\n    context: EdxCourseEnrollmentUpgradeClickedContextField\n    event_type: Literal[\"edx.course.enrollment.upgrade_clicked\"]\n    name: Literal[\"edx.course.enrollment.upgrade_clicked\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.navigational","title":"<code>navigational</code>","text":"<p>Navigational event model definitions</p>"},{"location":"models/edx/#ralph.models.edx.navigational.NavigationalEventField","title":"<code> NavigationalEventField            (AbstractBaseEventField)         </code>  <code>pydantic-model</code>","text":"<p>Represents the event field of navigational events.</p> <p>Note: All navigational events are <code>browser</code> events.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>str</code> <p>Consists of the edX ID of the sequence.</p> <code>old</code> <code>int</code> <p>For <code>seq_goto</code>, it consists of the index of the unit being jumped to. For <code>seq_next</code> and <code>seq_prev</code>, it consists of the index of the unit being navigated to.</p> <code>new</code> <code>int</code> <p>For <code>seq_goto</code>, it consists of the index of the unit being jumped from. For <code>seq_next</code> and <code>seq_prev</code>, it consists of the index of the unit being navigated away from.</p> Source code in <code>ralph/models/edx/navigational.py</code> <pre><code>class NavigationalEventField(AbstractBaseEventField):\n    \"\"\"Represents the event field of navigational events.\n\n    Note: All navigational events are `browser` events.\n\n    Attributes:\n        id (str): Consists of the edX ID of the sequence.\n        old (int): For `seq_goto`, it consists of the index of the unit being jumped to.\n            For `seq_next` and `seq_prev`, it consists of the index of the unit being navigated to.\n        new (int): For `seq_goto`, it consists of the index of the unit being jumped from.\n            For `seq_next` and `seq_prev`, it consists of the index of the unit being navigated\n            away from.\n    \"\"\"\n\n    id: constr(\n        regex=(\n            r\"^block-v1:[^\\/+]+(\\/|\\+)[^\\/+]+(\\/|\\+)[^\\/?]+type\"  # noqa : F722\n            r\"@sequential\\+block@[a-f0-9]{32}$\"  # noqa : F722\n        )\n    )\n    new: int\n    old: int\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.navigational.UIPageClose","title":"<code> UIPageClose            (BaseBrowserEvent)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>page_close</code> browser event.</p> <p>This type of event is triggered when the user navigates to the next page or closes the browser window (when the JavaScript <code>window.onunload</code> event is called).</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>str</code> <p>Consists of the string value <code>{}</code>.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>page_close</code>.</p> <code>name</code> <code>str</code> <p>Consists of the value <code>page_close</code>.</p> Source code in <code>ralph/models/edx/navigational.py</code> <pre><code>class UIPageClose(BaseBrowserEvent):\n    \"\"\"Represents the `page_close` browser event.\n\n    This type of event is triggered when the user navigates to the next page\n    or closes the browser window (when the JavaScript `window.onunload` event\n    is called).\n\n    Attributes:\n        event (str): Consists of the string value `{}`.\n        event_type (str): Consists of the value `page_close`.\n        name (str): Consists of the value `page_close`.\n    \"\"\"\n\n    __selector__ = selector(event_source=\"browser\", event_type=\"page_close\")\n\n    # pylint: disable=unsubscriptable-object\n    event: Literal[\"{}\"]\n    event_type: Literal[\"page_close\"]\n    name: Literal[\"page_close\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.navigational.UISeqGoto","title":"<code> UISeqGoto            (BaseBrowserEvent)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>seq_goto</code> browser event.</p> <p>The browser emits such event when a user selects a navigational control. <code>seq_goto</code> is emitted when a user jumps between units in a sequence.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>obj</code> <p>Consists of member fields that identify specifics triggered event.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>seq_goto</code>.</p> <code>name</code> <code>str</code> <p>Consists of the value <code>seq_goto</code>.</p> Source code in <code>ralph/models/edx/navigational.py</code> <pre><code>class UISeqGoto(BaseBrowserEvent):\n    \"\"\"Represents the `seq_goto` browser event.\n\n    The browser emits such event when a user selects a navigational control.\n    `seq_goto` is emitted when a user jumps between units in a sequence.\n\n    Attributes:\n        event (obj): Consists of member fields that identify specifics triggered event.\n        event_type (str): Consists of the value `seq_goto`.\n        name (str): Consists of the value `seq_goto`.\n    \"\"\"\n\n    __selector__ = selector(event_source=\"browser\", event_type=\"seq_goto\")\n\n    # pylint: disable=unsubscriptable-object\n    event: Union[Json[NavigationalEventField], NavigationalEventField]\n    event_type: Literal[\"seq_goto\"]\n    name: Literal[\"seq_goto\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.navigational.UISeqNext","title":"<code> UISeqNext            (BaseBrowserEvent)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>seq_next</code> browser event.</p> <p>The browser emits such event when a user selects a navigational control. <code>seq_next</code> is emitted when a user navigates to the next unit in a sequence.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>obj</code> <p>Consists of member fields that identify specifics triggered event.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>seq_next</code>.</p> <code>name</code> <code>str</code> <p>Consists of the value <code>seq_next</code>.</p> Source code in <code>ralph/models/edx/navigational.py</code> <pre><code>class UISeqNext(BaseBrowserEvent):\n    \"\"\"Represents the `seq_next` browser event.\n\n    The browser emits such event when a user selects a navigational control.\n    `seq_next` is emitted when a user navigates to the next unit in a sequence.\n\n    Attributes:\n        event (obj): Consists of member fields that identify specifics triggered event.\n        event_type (str): Consists of the value `seq_next`.\n        name (str): Consists of the value `seq_next`.\n    \"\"\"\n\n    __selector__ = selector(event_source=\"browser\", event_type=\"seq_next\")\n\n    # pylint: disable=unsubscriptable-object\n    event: Union[Json[NavigationalEventField], NavigationalEventField]\n    event_type: Literal[\"seq_next\"]\n    name: Literal[\"seq_next\"]\n\n    @validator(\"event\")\n    def validate_next_jump_event_field(\n        cls, value\n    ):  # pylint: disable=no-self-argument, no-self-use\n        \"\"\"Checks that event.new is equal to event.old + 1.\"\"\"\n\n        if value.new != value.old + 1:\n            raise ValueError(\"event.new - event.old should be equal to 1\")\n\n        return value\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.navigational.UISeqNext.validate_next_jump_event_field","title":"<code>validate_next_jump_event_field(value)</code>  <code>classmethod</code>","text":"<p>Checks that event.new is equal to event.old + 1.</p> Source code in <code>ralph/models/edx/navigational.py</code> <pre><code>@validator(\"event\")\ndef validate_next_jump_event_field(\n    cls, value\n):  # pylint: disable=no-self-argument, no-self-use\n    \"\"\"Checks that event.new is equal to event.old + 1.\"\"\"\n\n    if value.new != value.old + 1:\n        raise ValueError(\"event.new - event.old should be equal to 1\")\n\n    return value\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.navigational.UISeqPrev","title":"<code> UISeqPrev            (BaseBrowserEvent)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>seq_prev</code> browser event.</p> <p>The browser emits such event when a user selects a navigational control. <code>seq_prev</code> is emitted when a user navigates to the previous unit in a sequence.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>obj</code> <p>Consists of member fields that identify specifics triggered event.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>seq_prev</code>.</p> <code>name</code> <code>str</code> <p>Consists of the value <code>seq_prev</code>.</p> Source code in <code>ralph/models/edx/navigational.py</code> <pre><code>class UISeqPrev(BaseBrowserEvent):\n    \"\"\"Represents the `seq_prev` browser event.\n\n    The browser emits such event when a user selects a navigational control.\n    `seq_prev` is emitted when a user navigates to the previous unit in a sequence.\n\n    Attributes:\n        event (obj): Consists of member fields that identify specifics triggered event.\n        event_type (str): Consists of the value `seq_prev`.\n        name (str): Consists of the value `seq_prev`.\n\n    \"\"\"\n\n    __selector__ = selector(event_source=\"browser\", event_type=\"seq_prev\")\n\n    # pylint: disable=unsubscriptable-object\n    event: Union[Json[NavigationalEventField], NavigationalEventField]\n    event_type: Literal[\"seq_prev\"]\n    name: Literal[\"seq_prev\"]\n\n    @validator(\"event\")\n    def validate_prev_jump_event_field(\n        cls, value\n    ):  # pylint: disable=no-self-argument, no-self-use\n        \"\"\"Checks that event.new is equal to event.old - 1.\"\"\"\n\n        if value.new != value.old - 1:\n            raise ValueError(\"event.old - event.new should be equal to 1\")\n\n        return value\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.navigational.UISeqPrev.validate_prev_jump_event_field","title":"<code>validate_prev_jump_event_field(value)</code>  <code>classmethod</code>","text":"<p>Checks that event.new is equal to event.old - 1.</p> Source code in <code>ralph/models/edx/navigational.py</code> <pre><code>@validator(\"event\")\ndef validate_prev_jump_event_field(\n    cls, value\n):  # pylint: disable=no-self-argument, no-self-use\n    \"\"\"Checks that event.new is equal to event.old - 1.\"\"\"\n\n    if value.new != value.old - 1:\n        raise ValueError(\"event.old - event.new should be equal to 1\")\n\n    return value\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.server","title":"<code>server</code>","text":"<p>Server event model definitions</p>"},{"location":"models/edx/#ralph.models.edx.server.BaseServerEvent","title":"<code> BaseServerEvent            (BaseEvent)         </code>  <code>pydantic-model</code>","text":"<p>Represents the base server event model all server events inherit from.</p> Source code in <code>ralph/models/edx/server.py</code> <pre><code>class BaseServerEvent(BaseEvent):\n    \"\"\"Represents the base server event model all server events inherit from.\"\"\"\n\n    event_source: Literal[\"server\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.server.ServerEvent","title":"<code> ServerEvent            (BaseServerEvent)         </code>  <code>pydantic-model</code>","text":"<p>Represents a common server event.</p> <p>This type of event is triggered from the django middleware on each request excluding: <code>/event</code>, <code>login</code>, <code>heartbeat</code>, <code>/segmentio/event</code> and <code>/performance</code>.</p> <p>Attributes:</p> Name Type Description <code>event_type</code> <code>str</code> <p>Consist of the relative URL (without the hostname) of the requested page. Retrieved with:     <code>request.META['PATH_INFO']</code></p> <code>event</code> <code>str</code> <p>Consist of a JSON string holding the content of the GET or POST request. Retrieved with:     <code>json.dumps({'GET': dict(request.GET), 'POST': dict(request.POST)})[:512]</code> Note:     Values for [\u2018password\u2019, \u2018newpassword\u2019, \u2018new_password\u2019, \u2018oldpassword\u2019,     \u2018old_password\u2019, \u2018new_password1\u2019, \u2018new_password2\u2019] are replaced by <code>********</code>.     The JSON string is truncated at 512 characters resulting in invalid JSON.</p> Source code in <code>ralph/models/edx/server.py</code> <pre><code>class ServerEvent(BaseServerEvent):\n    \"\"\"Represents a common server event.\n\n    This type of event is triggered from the django middleware on each request excluding:\n    `/event`, `login`, `heartbeat`, `/segmentio/event` and `/performance`.\n\n    Attributes:\n        event_type (str): Consist of the relative URL (without the hostname) of the requested page.\n            Retrieved with:\n                `request.META['PATH_INFO']`\n        event (str): Consist of a JSON string holding the content of the GET or POST request.\n            Retrieved with:\n                `json.dumps({'GET': dict(request.GET), 'POST': dict(request.POST)})[:512]`\n            Note:\n                Values for ['password', 'newpassword', 'new_password', 'oldpassword',\n                'old_password', 'new_password1', 'new_password2'] are replaced by `********`.\n                The JSON string is truncated at 512 characters resulting in invalid JSON.\n    \"\"\"\n\n    __selector__ = selector(\n        event_source=\"server\", event_type=LazyModelField(\"context__path\")\n    )\n\n    # pylint: disable=unsubscriptable-object\n    event_type: Path\n    event: Union[Json[ServerEventField], ServerEventField]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.server.ServerEventField","title":"<code> ServerEventField            (AbstractBaseEventField)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>event</code> field of the ServerEventModel</p> Source code in <code>ralph/models/edx/server.py</code> <pre><code>class ServerEventField(AbstractBaseEventField):\n    \"\"\"Represents the `event` field of the ServerEventModel\"\"\"\n\n    GET: dict\n    POST: dict\n</code></pre>"}]}