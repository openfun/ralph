# Configuration file anchors
generate-version-file: &generate-version-file
  run:
    name: Create a version.json
    command: |
      # Create a version.json Ã -la-mozilla
      # https://github.com/mozilla-services/Dockerflow/blob/master/docs/version_object.md
      printf '{"commit":"%s","version":"%s","source":"https://github.com/%s/%s","build":"%s"}\n' \
        "$CIRCLE_SHA1" \
        "$CIRCLE_TAG" \
        "$CIRCLE_PROJECT_USERNAME" \
        "$CIRCLE_PROJECT_REPONAME" \
        "$CIRCLE_BUILD_URL" > version.json

docker-login: &docker-login
  # Login to DockerHub
  #
  # Nota bene: you'll need to define the following secrets environment vars
  # in CircleCI interface:
  #
  #   - DOCKER_HUB_USER
  #   - DOCKER_HUB_PASSWORD
  run:
    name: Login to DockerHub
    command: >
      test -n "$DOCKER_HUB_USER" &&
        echo "$DOCKER_HUB_PASSWORD" | docker login -u "$DOCKER_HUB_USER" --password-stdin ||
        echo "Docker Hub anonymous mode"

version: 2.1
jobs:
  # Git jobs
  # Check that the git history is clean and complies with our expectations
  lint-git:
    docker:
      - image: cimg/python:3.11
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD
    working_directory: ~/fun
    steps:
      - checkout
      # Make sure the changes don't add a "print" statement to the code base.
      # We should exclude the ".circleci" folder from the search as the very command that checks
      # the absence of "print" is including a "print(" itself.
      - run:
          name: enforce absence of print statements in code
          command: |
            ! git diff origin/master..HEAD -- . ':(exclude).circleci' | grep "print("
      - run:
          name: enforce absence of FIXME in code
          command: |
            ! git diff origin/master..HEAD -- . ':(exclude).circleci' | grep "FIXME"
      - run:
          name: Check absence of fixup commits
          command: |
            ! git log --pretty=format:%s | grep 'fixup!'
      - run:
          name: Install gitlint
          command: |
            pip install --user gitlint requests
      - run:
          name: lint commit messages added to master
          command: |
            ~/.local/bin/gitlint --commits origin/master..HEAD

  # Check that the CHANGELOG has been updated in the current branch
  check-changelog:
    docker:
      - image: cimg/base:current
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD
    working_directory: ~/fun
    steps:
      - checkout
      - run:
          name: Check that the CHANGELOG has been modified in the current branch
          command: |
            git whatchanged --name-only --pretty="" origin..HEAD | grep CHANGELOG

  # Check that the CHANGELOG max line length does not exceed 80 characters
  lint-changelog:
    docker:
      - image: debian:stretch
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD
    working_directory: ~/fun
    steps:
      - checkout
      - run:
          name: Check CHANGELOG max line length
          command: |
            # Get the longuest line width (ignoring release links)
            test $(cat CHANGELOG.md | grep -Ev "^\[.*\]: https://github.com/openfun" | wc -L) -le 80

  # ---- Docker jobs ----
  # Build the Docker image ready for production
  build-docker:
    docker:
      - image: cimg/base:current
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD
    working_directory: ~/fun
    steps:
      # Checkout repository sources
      - checkout
      # Generate a version.json file describing app release & login to DockerHub
      - *generate-version-file
      - *docker-login
      # Activate docker-in-docker (with layers caching enabled)
      - setup_remote_docker:
          docker_layer_caching: true
      # Each image is tagged with the current git commit sha1 to avoid
      # collisions in parallel builds.
      - run:
          name: Build production image
          command: |
            RALPH_IMAGE_BUILD_TARGET=production \
            RALPH_IMAGE_TAG=${CIRCLE_SHA1} \
              make build
      - run:
          name: Check built image availability
          command: docker images "ralph:${CIRCLE_SHA1}*"

  # ---- Backend jobs ----
  # Build backend development environment
  build:
    parameters:
      python-image:
        type: string
    docker:
      - image: cimg/<< parameters.python-image >>
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD
    working_directory: ~/fun
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-<< parameters.python-image >>-{{ .Revision }}
      - run:
          name: Install development dependencies
          command: pip install --user .[backend-clickhouse,backend-es,backend-ldp,backend-lrs,backend-mongo,backend-swift,backend-ws,cli,dev,lrs]
      - save_cache:
          paths:
            - ~/.local
          key: v1-dependencies-<< parameters.python-image >>-{{ .Revision }}

  lint:
    docker:
      - image: cimg/python:3.11
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD
    working_directory: ~/fun
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-python:3.11-{{ .Revision }}
      - run:
          name: Lint code with flake8
          command: ~/.local/bin/flake8
      - run:
          name: Lint code with isort
          command: ~/.local/bin/isort --recursive --check-only .
      - run:
          name: Lint code with black
          command: ~/.local/bin/black src/ralph tests --check
      - run:
          name: Lint code with pylint
          command: ~/.local/bin/pylint src/ralph tests
      - run:
          name: Lint code with bandit
          command: ~/.local/bin/bandit -qr src/ralph
      - run:
          name: Lint code with pydocstyle
          command: ~/.local/bin/pydocstyle

  test:
    parameters:
      python-image:
        type: string
    docker:
      - image: cimg/<< parameters.python-image >>
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD
        environment:
          RALPH_APP_DIR: ~/fun/.ralph
      - image: elasticsearch:8.1.0
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD
        environment:
          discovery.type: single-node
          xpack.security.enabled: "false"
      - image: mongo:5.0.9
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD
      - image: clickhouse/clickhouse-server:23.1.1.3077-alpine
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD
    working_directory: ~/fun
    resource_class: large
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-<< parameters.python-image >>-{{ .Revision }}
      - run:
          name: Run tests
          command: |
            dockerize \
              -wait tcp://${HOSTNAME}:9200 \
              -wait tcp://${HOSTNAME}:27017 \
              -wait tcp://${HOSTNAME}:9000 \
              -timeout 60s \
              ~/.local/bin/pytest

  test-library:
    parameters:
      python-image:
        type: string
    docker:
      - image: cimg/<< parameters.python-image >>
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD
    working_directory: ~/fun
    steps:
      - checkout
      - run:
          name: Install development dependencies
          command: pip install --user .

      - run:
          name: Test library usage
          command: |
            for module in $(\
              find src/ralph/models/**/*.py | \
              sed "s|^src/\(.*\)\.py|\1|g" | \
              tr "/" "." | \
              sed "s/\.__init__//g" | \
              sort \
            ); do
              python -c "from ${module} import *"
            done

  # ---- Tray jobs (k8s) ----
  tray:
    machine:
      image: ubuntu-2004:2022.07.1
      # Prevent cache-related issues
      docker_layer_caching: false
    working_directory: ~/fun
    resource_class: large
    steps:
      - checkout
      - *generate-version-file
      - *docker-login

      - run:
          name: Install the kubectl client and k3d
          command: |
            export KUBECTL_RELEASE="v1.25.2"
            curl -Lo "${HOME}/bin/kubectl" "https://dl.k8s.io/release/${KUBECTL_RELEASE}/bin/linux/amd64/kubectl"
            curl -Lo /tmp/kubectl.sha256 "https://dl.k8s.io/${KUBECTL_RELEASE}/bin/linux/amd64/kubectl.sha256"
            echo "$(</tmp/kubectl.sha256) ${HOME}/bin/kubectl" | sha256sum --check
            chmod 755 "${HOME}/bin/kubectl"

            export K3D_RELEASE="v5.4.6"
            curl -Lo "${HOME}/bin/k3d" "https://github.com/k3d-io/k3d/releases/download/${K3D_RELEASE}/k3d-linux-amd64"
            # FIXME
            # Removed checksum checking: https://github.com/k3d-io/k3d/discussions/1037
            chmod 755 "${HOME}/bin/k3d"

      - run:
          name: Configure sysctl limits for Elasticsearch
          command: |
            # Elasticsearch requires to increase this setting's default value
            sudo sysctl -w vm/max_map_count=262144

      - run:
          name: Run local k3d cluster & configure environment
          command: |
            make k3d-cluster
            echo "export ARNOLD_ENVIRONMENT=ci" >> $BASH_ENV
            echo "export RALPH_IMAGE_TAG=${CIRCLE_SHA1}" >> $BASH_ENV
            source $BASH_ENV

      - run:
          name: Setup a new Arnold project
          command: make arnold-bootstrap

      - run:
          name: Build production image and publish it to the k8s cluster docker registry
          command: |
            RALPH_IMAGE_BUILD_TARGET=production \
            RALPH_IMAGE_TAG=${CIRCLE_SHA1} \
              make k3d-push

      - run:
          name: Check built images availability
          command: docker images "ralph:*"

      - run:
          name: Bootstrap ralph application
          command: |
            make arnold-init
            make arnold-deploy

            # Test the deployment/switch
            kubectl -n ci-ralph wait --for=condition=ready pod --selector=app=ralph,service=app,type=server --timeout=120s
            # Test cronjobs
            test $(kubectl -n ci-ralph get cj -o name ralph-ci-test | wc -l) -eq 1
            # Test the LRS server health
            curl -sLk $(kubectl -n ci-ralph get ingress/ralph-app-current --output=jsonpath="{.spec.rules[0].host}")/__heartbeat__ | \
              grep '"database":"ok"'

  # ---- Packaging jobs ----
  package:
    docker:
      - image: cimg/python:3.11
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD
    working_directory: ~/fun
    steps:
      - checkout
      # Ensure we restore frontend production builds in Richie's static
      # directory
      - attach_workspace:
          at: ~/fun
      - run:
          name: Build python package
          command: python setup.py sdist bdist_wheel
      # Persist build packages to the workspace
      - persist_to_workspace:
          root: ~/fun
          paths:
            - dist
      # Store packages as artifacts to download/test them
      - store_artifacts:
          path: ~/fun/dist

  # Publishing to PyPI requires that:
  #   * you already registered to pypi.org
  #   * you have define both the TWINE_USERNAME & TWINE_PASSWORD secret
  #     environment variables in CircleCI UI (with your PyPI credentials)
  pypi:
    docker:
      - image: cimg/python:3.11
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD
    working_directory: ~/fun
    steps:
      - checkout
      # Restore built python packages
      - attach_workspace:
          at: ~/fun
      - run:
          name: List built packages
          command: ls dist/*
      - run:
          name: Install base requirements (twine)
          command: pip install --user .[ci]
      - run:
          name: Upload built packages to PyPI
          command: ~/.local/bin/twine upload dist/*

  # ---- DockerHub publication job ----
  hub:
    docker:
      - image: cimg/base:current
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD
    working_directory: ~/fun
    steps:
      # Checkout repository sources
      - checkout
      # Generate a version.json file describing app release & login to DockerHub
      - *generate-version-file
      - *docker-login
      # Activate docker-in-docker (with layers caching enabled)
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build production image
          command: |
            RALPH_IMAGE_BUILD_TARGET=production \
            RALPH_IMAGE_TAG=${CIRCLE_SHA1} \
              make build
      - run:
          name: Check built image availability
          command: docker images "ralph:${CIRCLE_SHA1}*"
      # Tag docker images with the same pattern used in Git (Semantic Versioning)
      #
      # Git tag: v1.0.1
      # Docker tag: 1.0.1(-ci)
      - run:
          name: Tag images
          command: |
            docker images fundocker/ralph
            DOCKER_TAG=$([[ -z "$CIRCLE_TAG" ]] && echo $CIRCLE_BRANCH || echo ${CIRCLE_TAG} | sed 's/^v//')
            RELEASE_TYPE=$([[ -z "$CIRCLE_TAG" ]] && echo "branch" || echo "tag ")
            # Display either:
            # - DOCKER_TAG: master (Git branch)
            # or
            # - DOCKER_TAG: 1.1.2 (Git tag v1.1.2)
            echo "DOCKER_TAG: ${DOCKER_TAG} (Git ${RELEASE_TYPE}${CIRCLE_TAG})"
            docker tag ralph:${CIRCLE_SHA1} fundocker/ralph:${DOCKER_TAG}
            if [[ -n "$CIRCLE_TAG" ]]; then
                docker tag ralph:${CIRCLE_SHA1} fundocker/ralph:latest
            fi
            docker images | grep -E "^fundocker/ralph\s*(${DOCKER_TAG}.*|latest|master)"

      # Publish images to DockerHub
      #
      # Nota bene: logged user (see "Login to DockerHub" step) must have write
      # permission for the project's repository; this also implies that the
      # DockerHub repository already exists.
      - run:
          name: Publish images
          command: |
            DOCKER_TAG=$([[ -z "$CIRCLE_TAG" ]] && echo $CIRCLE_BRANCH || echo ${CIRCLE_TAG} | sed 's/^v//')
            RELEASE_TYPE=$([[ -z "$CIRCLE_TAG" ]] && echo "branch" || echo "tag ")
            # Display either:
            # - DOCKER_TAG: master (Git branch)
            # or
            # - DOCKER_TAG: 1.1.2 (Git tag v1.1.2)
            echo "DOCKER_TAG: ${DOCKER_TAG} (Git ${RELEASE_TYPE}${CIRCLE_TAG})"
            docker push fundocker/ralph:${DOCKER_TAG}
            if [[ -n "$CIRCLE_TAG" ]]; then
              docker push fundocker/ralph:latest
            fi

  # ---- Documentation jobs ----
  build-docs:
    docker:
      - image: cimg/python:3.11
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD
    working_directory: ~/fun
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-python:3.11-{{ .Revision }}
      - run:
          name: Build documentation
          command: ~/.local/bin/mkdocs build

  # Deploy the docs website to GitHub pages.
  deploy-docs:
    docker:
      - image: cimg/python:3.11
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    working_directory: ~/fun
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-python:3.11-{{ .Revision }}
      - add_ssh_keys:
          fingerprints:
            - "43:a9:5b:a0:b5:8b:f5:b4:6d:73:66:a0:27:b1:ce:92"
      - run:
          name: Deploying to GitHub Pages
          command: |
            git config --global user.email "funmoocbot@users.noreply.github.com"
            git config --global user.name "FUN MOOC Bot"
            ~/.local/bin/mkdocs gh-deploy

workflows:
  version: 2

  ralph:
    jobs:
      # Git jobs
      #
      # Check validity of git history
      - lint-git:
          filters:
            tags:
              only: /.*/
      # Check CHANGELOG update
      - check-changelog:
          filters:
            branches:
              ignore: master
            tags:
              only: /(?!^v).*/
      - lint-changelog:
          filters:
            branches:
              ignore: master
            tags:
              only: /.*/

      # Docker jobs
      #
      # Build images
      - build-docker:
          filters:
            tags:
              only: /.*/

      # Backend jobs
      #
      # Build, lint and test production and development Docker images
      # (debian-based)
      - build:
          matrix:
            parameters:
              python-image: [python:3.8, python:3.9, python:3.10, python:3.11]
          filters:
            tags:
              only: /.*/
      - lint:
          requires:
            - build
          filters:
            tags:
              only: /.*/
      - test:
          matrix:
            parameters:
              python-image: [python:3.8, python:3.9, python:3.10, python:3.11]
          requires:
            - build
          filters:
            tags:
              only: /.*/
      - test-library:
          matrix:
            parameters:
              python-image:
                [python:3.7, python:3.8, python:3.9, python:3.10, python:3.11]
          filters:
            tags:
              only: /.*/

      # Docs
      #
      # Test documentation build
      - build-docs:
          requires:
            - build
          filters:
            tags:
              only: /.*/

      # Tray
      #
      # Deploy ralph in a k8s cluster using arnold
      - tray:
          filters:
            tags:
              only: /.*/

      # Packaging: python
      #
      # Build the python package
      - package:
          requires:
            - build-docs
            - lint
            - test
            - test-library
          filters:
            tags:
              only: /.*/

      # DockerHub publication.
      #
      # Publish docker images only if all build, lint and test jobs succeed
      # and it has been tagged with a tag starting with the letter v or is on
      # the master branch
      - hub:
          requires:
            - build-docker
            - tray
          filters:
            branches:
              only: master
            tags:
              only: /^v.*/

      # PyPI publication.
      #
      # Publish python package to PYPI only if all build, lint and test jobs
      # succeed and it has been tagged with a tag starting with the letter v
      - pypi:
          requires:
            - package
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/

      # Publish the documentation website to GitHub Pages.
      # Only do it for master as tagged releases are supposed to tag their own version of the
      # documentation in the release commit on master before they go out.
      - deploy-docs:
          requires:
            - tray
            - package
          filters:
            branches:
              only: master
            tags:
              only: /.*/
