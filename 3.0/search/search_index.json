{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Ralph is a command-line tool to fetch, extract, convert and push your tracking logs (aka learning events) from various storage backends to your LRS or any other compatible storage or database backend.</p>"},{"location":"#key_concepts","title":"Key concepts","text":"<p>Ralph has been designed to batch process your logs using base commands and UNIX standard streams (<code>stdin</code>, <code>stdout</code>) to connect them in a pipeline that fits your needs. A base example pipeline may be:</p> <pre><code>$ ralph fetch --backend swift my_archive.gzip | \\\n    gunzip | \\\n    ralph push --backend es\n</code></pre> <p>In this small pipeline, we stream <code>my_archive.gzip</code> content from a Swift container to the standard output (using the <code>fetch</code> command), uncompress the content (using the <code>gunzip</code> command), and bulk insert logs in an ElasticSearch index (using the <code>push</code> command).</p> <p>As UNIX is beautiful, Ralph offers many powerful possibilities by combining its commands with other standard commands or command line tools.</p>"},{"location":"#quick_start_guide","title":"Quick start guide","text":"<p>Ralph is distributed as a python package and a Docker image.</p> <p>If you choose to install <code>ralph</code> in your native environment (without using Docker), please make sure that Python 3.9 is installed (and your default python distribution).</p> <p>Ralph package can be installed from PyPI using the <code>pip</code> tool:</p> <pre><code># Create a new virtualenv (optional)\n$ python3.9 -m venv venv\n$ source venv/bin/activate\n\n# Install the full package (in a virtualenv)\n(venv) $ pip install ralph-malph[backend-es,backend-ldp,backend-mongo,backend-swift,backend-ws,cli,lrs]\n\n# Install only the core package with the Elasticsearch backend and the LRS (in a virtualenv)\n(venv) $ pip install ralph-malph[backend-es,lrs]\n\n# Test the ralph command (it should be in your PATH)\n(venv) $ ralph --help\n</code></pre> <p>If you only need to integrate <code>ralph</code> models in your project, you don\u2019t need to install the <code>backends</code>, <code>cli</code> or <code>lrs</code> extra dependencies, the core package is what you need:</p> <pre><code># Install the core library (in a virtualenv)\n(venv) $ pip install ralph-malph\n</code></pre> <p>Alternatively, Docker users can pull the latest <code>ralph</code> image and start playing with it:</p> <pre><code># Pull latest docker image and get usage\n$ docker run --rm -i fundocker/ralph:latest ralph --help\n\n# Pro tip: define an alias to ease your life\n$ alias ralph=\"docker run --rm -i fundocker/ralph:latest ralph\"\n</code></pre> <p>Now that <code>ralph</code> can be run from your system, we invite you to explore available commands.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>This project is intended to be community-driven, so please, do not hesitate to get in touch if you have any questions related to our implementation or design decisions.</p> <p>We try to raise our code quality standards and expect contributors to follow the recommendations from our handbook.</p>"},{"location":"#license","title":"License","text":"<p>This work is released under the MIT License (see LICENSE).</p>"},{"location":"CHANGELOG/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"CHANGELOG/#unreleased","title":"Unreleased","text":""},{"location":"CHANGELOG/#300_-_2022-10-19","title":"3.0.0 - 2022-10-19","text":""},{"location":"CHANGELOG/#added","title":"Added","text":"<ul> <li>Implement edx video browser events pydantic models</li> <li>Create a <code>post</code> endpoint for statements implementing the LRS spec</li> <li>Implement support for the MongoDB database backend</li> <li>Implement support for custom queries when using database backends <code>get</code>   method (used in the <code>fetch</code> command)</li> <li>Add dotenv configuration file support and <code>python-dotenv</code> dependency</li> <li>Add <code>host</code> and <code>port</code> options for the <code>runserver</code> cli command</li> <li>Add support for database selection when running the Ralph LRS server</li> <li>Implement support for xAPI statement forwarding</li> <li>Add database backends <code>status</code> checking</li> <li>Add <code>health</code> LRS router</li> <li>Tray: add LRS server support</li> </ul>"},{"location":"CHANGELOG/#changed","title":"Changed","text":"<ul> <li>Migrate to <code>python-legacy</code> handler for <code>mkdocstrings</code> package</li> <li>Upgrade <code>click</code> to <code>8.1.3</code></li> <li>Upgrade <code>elasticsearch</code> to <code>8.3.3</code></li> <li>Upgrade <code>fastapi</code> to <code>0.79.1</code></li> <li>Upgrade <code>ovh</code> to <code>1.0.0</code></li> <li>Upgrade <code>pydantic</code> to <code>1.9.2</code></li> <li>Upgrade <code>pymongo</code> to <code>4.2.0</code></li> <li>Upgrade <code>python-keystoneclient</code> to <code>5.0.0</code></li> <li>Upgrade <code>python-swiftclient</code> to <code>4.0.1</code></li> <li>Upgrade <code>requests</code> to <code>2.28.1</code></li> <li>Upgrade <code>sentry_sdk</code> to <code>1.9.5</code></li> <li>Upgrade <code>uvicorn</code> to <code>0.18.2</code></li> <li>Upgrade <code>websockets</code> to <code>10.3</code></li> <li>Make backends yield results instead of writing to standard streams (BC)</li> <li>Use pydantic settings management instead of global variables in defaults.py</li> <li>Rename backend and parser parameter environment variables (BC)</li> <li>Make project dependencies management more modular for library usage</li> </ul>"},{"location":"CHANGELOG/#removed","title":"Removed","text":"<ul> <li>Remove YAML configuration file support and <code>pyyaml</code> dependency (BC)</li> </ul>"},{"location":"CHANGELOG/#fixed","title":"Fixed","text":"<ul> <li>Tray: do not create a cronjobs list when no cronjob has been defined</li> <li>Restore history mixin logger</li> </ul>"},{"location":"CHANGELOG/#210_-_2022-04-13","title":"2.1.0 - 2022-04-13","text":""},{"location":"CHANGELOG/#added_1","title":"Added","text":"<ul> <li>Implement edx problem interaction events pydantic models</li> <li>Implement edx textbook interaction events pydantic models</li> <li><code>ws</code> websocket stream backend (compatible with the <code>fetch</code> command)</li> <li>bundle <code>jq</code>, <code>curl</code> and <code>wget</code> in the <code>fundocker/ralph</code> Docker image</li> <li>Tray: enable ralph app deployment command configuration</li> <li>Add a <code>runserver</code> command with basic auth and a <code>whoami</code> route</li> <li>Create a <code>get</code> endpoint for statements implementing the LRS spec</li> <li>Add optional fields to BaseXapiModel</li> </ul>"},{"location":"CHANGELOG/#changed_1","title":"Changed","text":"<ul> <li>Upgrade <code>uvicorn</code> to <code>0.17.4</code></li> <li>Upgrade <code>elasticsearch</code> to <code>7.17.0</code></li> <li>Upgrade <code>sentry_sdk</code> to <code>1.5.5</code></li> <li>Upgrade <code>fastapi</code> to <code>0.73.0</code></li> <li>Upgrade <code>pyparsing</code> to <code>3.0.7</code></li> <li>Upgrade <code>pydantic</code> to <code>1.9.0</code></li> <li>Upgrade <code>python-keystoneclient</code> to <code>4.4.0</code></li> <li>Upgrade <code>python-swiftclient</code> to <code>3.13.0</code></li> <li>Upgrade <code>pyyaml</code> to <code>6.0</code></li> <li>Upgrade <code>requests</code> to <code>2.27.1</code></li> <li>Upgrade <code>websockets</code> to <code>10.1</code></li> </ul>"},{"location":"CHANGELOG/#201_-_2021-07-15","title":"2.0.1 - 2021-07-15","text":""},{"location":"CHANGELOG/#changed_2","title":"Changed","text":"<ul> <li>Upgrade <code>elasticsearch</code> to <code>7.13.3</code></li> </ul>"},{"location":"CHANGELOG/#fixed_1","title":"Fixed","text":"<ul> <li>Restore elasticsearch backend datastream compatibility for bulk operations</li> </ul>"},{"location":"CHANGELOG/#200_-_2021-07-09","title":"2.0.0 - 2021-07-09","text":""},{"location":"CHANGELOG/#added_2","title":"Added","text":"<ul> <li>xAPI video <code>interacted</code> pydantic models</li> <li>xAPI video <code>terminated</code> pydantic models</li> <li>xAPI video <code>completed</code> pydantic models</li> <li>xAPI video <code>seeked</code> pydantic models</li> <li>xAPI video <code>initialized</code> pydantic models</li> <li>xAPI video <code>paused</code> pydantic models</li> <li><code>convert</code> command to transform edx events to xAPI format</li> <li>EdX to xAPI converters for page <code>viewed</code> and<code>page_close</code> events</li> <li>Implement core event format converter</li> <li>xAPI video <code>played</code> pydantic models</li> <li>xAPI page <code>viewed</code> and page <code>terminated</code> pydantic models</li> <li>Implement edx navigational events pydantic models</li> <li>Implement edx enrollment events pydantic models</li> <li>Install security updates in project Docker images</li> <li>Model selector to retrieve associated pydantic model of a given event</li> <li><code>validate</code> command to lint edx events using pydantic models</li> <li>Support all available bulk operation types for the elasticsearch backend   (create, index, update, delete) using the <code>--es-op-type</code> option</li> </ul>"},{"location":"CHANGELOG/#changed_3","title":"Changed","text":"<ul> <li>Upgrade <code>elasticsearch</code> to <code>7.13.2</code></li> <li>Upgrade <code>python-swiftclient</code> to <code>3.12.0</code></li> <li>Upgrade <code>click</code> to <code>8.0.1</code></li> <li>Upgrade <code>click-option-group</code> to <code>0.5.3</code></li> <li>Upgrade <code>pydantic</code> to <code>1.8.2</code></li> <li>Upgrade <code>sentry_sdk</code> to <code>1.1.0</code></li> <li>Rename edx models</li> <li>Migrate model tests from factories to hypothesis strategies</li> <li>Tray: switch from openshift to k8s (BC)</li> <li>Tray: remove useless deployment probes</li> </ul>"},{"location":"CHANGELOG/#fixed_2","title":"Fixed","text":"<ul> <li>Tray: remove <code>version</code> immutable field in DC selector</li> </ul>"},{"location":"CHANGELOG/#120_-_2021-02-26","title":"1.2.0 - 2021-02-26","text":""},{"location":"CHANGELOG/#added_3","title":"Added","text":"<ul> <li>EdX server event pydantic model and factory</li> <li>EdX page_close browser event pydantic model and factory</li> <li>Tray: allow to specify a self-generated elasticsearch cluster CA certificate</li> </ul>"},{"location":"CHANGELOG/#fixed_3","title":"Fixed","text":"<ul> <li>Tray: add missing Swift variables in the secret</li> <li>Tray: fix pods anti-affinity selector</li> </ul>"},{"location":"CHANGELOG/#removed_1","title":"Removed","text":"<ul> <li><code>pandas</code> is no longer required</li> </ul>"},{"location":"CHANGELOG/#110_-_2021-02-04","title":"1.1.0 - 2021-02-04","text":""},{"location":"CHANGELOG/#added_4","title":"Added","text":"<ul> <li>Support for Swift storage backend</li> <li>Use the <code>push</code> command <code>--ignore-errors</code> option to ignore ES bulk import   errors</li> <li>The elasticsearch backend now accepts passing all supported client options</li> </ul>"},{"location":"CHANGELOG/#changed_4","title":"Changed","text":"<ul> <li>Upgrade <code>pyyaml</code> to <code>5.4.1</code></li> <li>Upgrade <code>pandas</code> to <code>1.2.1</code></li> </ul>"},{"location":"CHANGELOG/#removed_2","title":"Removed","text":"<ul> <li><code>click_log</code> is no longer required as we are able to configure logging</li> </ul>"},{"location":"CHANGELOG/#100_-_2021-01-13","title":"1.0.0 - 2021-01-13","text":""},{"location":"CHANGELOG/#added_5","title":"Added","text":"<ul> <li>Implement base CLI commands (list, extract, fetch &amp; push) for supported   backends</li> <li>Support for ElasticSearch database backend</li> <li>Support for LDP storage backend</li> <li>Support for FS storage backend</li> <li>Parse (gzipped) tracking logs in GELF format</li> <li>Support for application\u2019s configuration file</li> <li>Add optional sentry integration</li> <li>Distribute Arnold\u2019s tray to deploy Ralph in a k8s cluster as cronjobs</li> </ul>"},{"location":"LICENSE/","title":"License","text":"<p>MIT License</p> <p>Copyright (c) 2020-present GIP FUN MOOC.</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u201cSoftware\u201d), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"api/","title":"API Server","text":"<p>Ralph comes with an API server that aims to implement the Learning Record Store (LRS) specification (still a work in progress).</p>"},{"location":"api/#getting_started","title":"Getting started","text":"<p>The API server can be started up with the following command:</p> <pre><code>$ ralph runserver --backend es\n</code></pre> <p>The <code>--backend</code> (or <code>-b</code>) option specifies which database backend to use for LRS data storage and retrieval. See Ralph\u2019s backends documentation for more details.</p> <p>However, before you can start your API server and make requests against it, you need to set up your credentials.</p>"},{"location":"api/#creating_a_credentials_file","title":"Creating a credentials file","text":"<p>The credentials file is expected to be a valid JSON file. Its location is specified by the <code>RALPH_AUTH_FILE</code> configuration value. By default, <code>ralph</code> will look for the <code>auth.json</code> file in the application directory (see click documentation for details).</p> <p>The expected format is a list of entries (JSON objects) each containing the username, the user\u2019s <code>bcrypt</code> hashed+salted password and scopes they can access:</p> <pre><code>[\n  {\n    \"username\": \"john.doe@example.com\",\n    \"hash\": \"$2b$12$yBXrzIuRIk6yaft5KUgVFOIPv0PskCCh9PXmF2t7pno.qUZ5LK0D2\",\n    \"scopes\": [\"example_scope\"]\n  },\n  {\n    \"username\": \"simon.says@example.com\",\n    \"hash\": \"$2b$12$yBXrzIuRIk6yaft5KUgVFOIPv0PskCCh9PXmF2t7pno.qUZ5LK0D2\",\n    \"scopes\": [\"second_scope\", \"third_scope\"]\n  }\n]\n</code></pre> <p>The hash can be generated with a python script executed directly in the command line:</p> <pre><code># Install bcrypt\n$ python3 -m pip install bcrypt\n# Generate the hash and print it to console\n$ python3 -c 'import bcrypt; print(bcrypt.hashpw(b\"PASSWORD\", bcrypt.gensalt()).decode(\"ascii\"))'\n</code></pre>"},{"location":"api/#making_a_get_request","title":"Making a GET request","text":"<p>The first request that can be answered by the ralph API server is a <code>whoami</code> request, which checks if the user is authenticated and returns their username and permission scopes.</p> <p>Use curl to get <code>http://localhost:8100/whoami</code>:</p> <pre><code>$ curl http://localhost:8100/whoami\n&lt; HTTP/1.1 401 Unauthorized\n&lt; {\"error\":\"Not authenticated\"}\n</code></pre> <p>Send your username and password to the API server through HTTP Basic Auth:</p> <pre><code>$ curl --user john.doe@example.com:PASSWORD http://localhost:8100/whoami\n&lt; HTTP/1.1 200 OK\n&lt; {\"username\":\"john.doe@example.com\",\"scopes\":[\"authenticated\",\"example_scope\"]}\n</code></pre>"},{"location":"api/#forwarding_statements","title":"Forwarding statements","text":"<p>Ralph\u2019s API server can be configured to forward xAPI statements it receives to other LRSes.</p> <p>To configure statement forwarding, you need to create a <code>.env</code> file in the current directory and define the <code>RALPH_XAPI_FORWARDINGS</code> variable or define the <code>RALPH_XAPI_FORWARDINGS</code> environment variable.</p> <p>The value of the <code>RALPH_XAPI_FORWARDINGS</code> variable should be a JSON encoded list of dictionaries where each dictionary defines a forwarding configuration and consists of the following key/value pairs:</p> key value type description <code>is_active</code> <code>boolean</code> Specifies whether or not this forwarding configuration should take effect. <code>url</code> <code>URL</code> Specifies the endpoint URL where forwarded statements should be send. <code>basic_username</code> <code>string</code> Specifies the basic auth username. <code>basic_password</code> <code>string</code> Specifies the basic auth password. <code>max_retries</code> <code>number</code> Specifies the number of times a failed forwarding request should be retried. <code>timeout</code> <code>number</code> Specifies the duration in seconds of network inactivity leading to a timeout. <p>Note that for a forwarding configuration to be valid it is required that all key/value pairs are defined.</p> <p>Example of a valid forwarding configuration:</p> <pre><code>RALPH_XAPI_FORWARDINGS='\n[\n  {\n    \"is_active\": true,\n    \"url\": \"http://lrs1.example.com/xAPI/statements/\",\n    \"basic_username\": \"admin1@example.com\",\n    \"basic_password\": \"PASSWORD1\",\n    \"max_retries\": 1,\n    \"timeout\": 5\n  },\n  {\n    \"is_active\": true,\n    \"url\": \"http://lrs2.example.com/xAPI/statements/\",\n    \"basic_username\": \"admin2@example.com\",\n    \"basic_password\": \"PASSWORD2\",\n    \"max_retries\": 5,\n    \"timeout\": 0.2\n  }\n]\n'\n</code></pre>"},{"location":"backends/","title":"Backends","text":"<p>Ralph supports various storage and database backends that can be accessed to read from or write learning events to. Implemented backends are listed below along with their configuration parameters. If your favourite backend is missing to the list, feel free to submit your implementation or get in touch!</p>"},{"location":"backends/#key_concepts","title":"Key concepts","text":"<p>We distinguish storage from database backends as the semantic and concepts are quite different in terms of code, but those two types of backends can be considered as \u201cbackends\u201d from a Ralph user perspective as the CLI can use both in most of its commands.</p> <p>Each backend has its own parameters that are required to use it. Those parameters can be set as command line options or environment variables; the later is the recommended solution for sensible data such as service credentials. If we consider the <code>os_username</code> (OpenStack user name) parameter of the OpenStack Swift backend, it can be set as a command line option using <code>swift</code> as the option prefix (and replacing underscores in its name by dashes):</p> <pre><code>$ ralph list --backend swift --swift-os-username johndoe # [...] more options\n</code></pre> <p>Alternatively, this parameter can be set as an environment variable (in upper case, prefixed by the program name, e.g. <code>RALPH_</code>):</p> <pre><code>$ export RALPH_BACKENDS__STORAGE__SWIFT__OS_USERNAME=\"johndoe\"\n$ ralph list --backend swift # [...] more options\n</code></pre> <p>The general patterns for backend parameters are:</p> <ul> <li><code>--{{ backend_name }}-{{ parameter | underscore_to_dash }}</code> for command options, and,</li> <li><code>RALPH_BACKENDS__{{ backend_type | uppercase }}__{{ backend_name | uppercase }}__{{ parameter | uppercase }}</code> for environment variables, where the <code>backend_type</code> is one of <code>DATABASE</code>, <code>STORAGE</code> and <code>STREAM</code>.</li> </ul>"},{"location":"backends/#storage_backends","title":"Storage backends","text":""},{"location":"backends/#ovh_-_log_data_platform_ldp","title":"OVH - Log Data Platform (LDP)","text":"<p>LDP is a nice service built by OVH on top of Graylog to follow, analyse and store your logs. Learning events (aka tracking logs) can be stored in GELF format using this backend.</p> <p>For now the LDP backend is read-only as we consider that it is mostly used to collect primary logs and not as a Ralph target. Feel free to get in touch to prove us wrong, or better: submit your proposal for the <code>write</code> method implementation.</p>"},{"location":"backends/#backend_parameters","title":"Backend parameters","text":"<p>To access OVH\u2019s LDP API, you need to register Ralph as an authorized application and generate an application key, an application secret and a consumer key.</p> <p>While filling the registration form available at: eu.api.ovh.com/createToken/, be sure to give an appropriate validity time span to your token and allow only GET requests on the <code>/dbaas/logs/*</code> path.</p> <ul> <li><code>endpoint</code>: the API endpoint (e.g. <code>ovh-eu</code>)</li> <li><code>application_key</code>: use generated application key</li> <li><code>application_secret</code>: use generated application secret</li> <li><code>consumer_key</code>: use generated consumer key</li> </ul> <p>The following parameters are required to fetch archives from an LDP account stream:</p> <ul> <li><code>service_name</code>: the LDP account name (e.g. <code>ldp-xx-xxxxx</code>)</li> <li><code>stream_id</code>: the identifier of the stream you are querying (e.g. a UUID hex   representation: <code>77ec6e4a-ac15-4bcf-8043-7429bf275e49</code>)</li> </ul> <p>For more information about OVH\u2019s API client parameters, please refer to the project\u2019s documentation: github.com/ovh/python-ovh.</p>"},{"location":"backends/#openstack_swift","title":"OpenStack Swift","text":"<p>Swift is the OpenStack object storage service. This storage backend is fully supported (read and write operations) to stream and store log archives.</p>"},{"location":"backends/#backend_parameters_1","title":"Backend parameters","text":"<p>Primarily required parameters correspond to a standard authentication using OpenStack Keystone service:</p> <ul> <li><code>os_identity_api_version</code>: keystone API version you will authenticate to (defaults to <code>3</code>)</li> <li><code>os_auth_url</code>: the authentication URL (defaults to OVH\u2019s Swift <code>https://auth.cloud.ovh.net/</code>)</li> <li><code>os_project_domain_name</code>: the project domain name (defaults to <code>Default</code>)</li> <li><code>os_user_domain_name</code>: the user domain name (defaults to <code>Default</code>)</li> <li><code>os_username</code>: the name of your openstack swift user</li> <li><code>os_password</code>: the password of your openstack swift user</li> </ul> <p>Secondary parameters are required to work with the target container:</p> <ul> <li><code>os_storage_url</code>: the URL of the target container</li> <li><code>os_region_name</code>: the region where your container is</li> <li><code>os_tenant_name</code>: the name of the tenant of your container</li> <li><code>os_tenant_id</code>: the identifier of the tenant of your container</li> </ul>"},{"location":"backends/#file_system","title":"File system","text":"<p>The file system backend is a dummy template that can be used to develop your own backend. It\u2019s a \u201cdummy\u201d backend as it\u2019s not required in a UNIX Shell context, the <code>ls</code> and <code>cat</code> commands used along with UNIX streams will do a better job.</p>"},{"location":"backends/#backend_parameters_2","title":"Backend parameters","text":"<p>The only required parameter is the <code>path</code> we want to list or stream content from.</p>"},{"location":"backends/#stream_backends","title":"Stream backends","text":""},{"location":"backends/#websocket","title":"WebSocket","text":"<p>The webSocket backend is read-only and can be used to get real-time events.</p> <p>If you use OVH\u2019s Logs Data Platform (LDP), you can retrieve a WebSocket URI to test your data stream by following instructions from the official documentation.</p>"},{"location":"backends/#backend_parameters_3","title":"Backend parameters","text":"<ul> <li><code>ws_uri</code>: the WebSocket uri (e.g. <code>wss://example.com/websocket</code>)</li> </ul>"},{"location":"backends/#database_backends","title":"Database backends","text":""},{"location":"backends/#elasticsearch","title":"Elasticsearch","text":"<p>Elasticsearch backend is mostly used for indexation purpose (as a datalake) but it can also be used to fetch indexed data from it.</p>"},{"location":"backends/#backend_parameters_4","title":"Backend parameters","text":"<p>Elasticsearch backend parameters required to connect to a cluster are:</p> <ul> <li><code>hosts</code>: a list of cluster hosts to connect to (e.g. <code>[\"http://elasticsearch-node:9200\"]</code>)</li> <li><code>index</code>: the elasticsearch index where to get/put documents</li> <li><code>client_options</code>: all options from the official client are supported and can   be specified as a python <code>dict</code> object (e.g. <code>{'use_ssl': True, 'verify_certs': True}</code>)</li> </ul> <p>For a complete list of supported <code>client_options</code>, please refer to the official client\u2019s documentation.</p>"},{"location":"commands/","title":"Commands","text":""},{"location":"commands/#ralph","title":"ralph","text":"<p>Ralph is a stream-based tool to play with your logs.</p> <p>Usage:</p> <pre><code>ralph [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <pre><code>  -v, --verbosity LVL  Either CRITICAL, ERROR, WARNING, INFO (default) or\n                       DEBUG\n  --help               Show this message and exit.\n</code></pre>"},{"location":"commands/#ralph-convert","title":"ralph convert","text":"<p>Converts input events to a given format.</p> <p>Usage:</p> <pre><code>ralph convert [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  From edX to xAPI converter options: \n    -u, --uuid-namespace TEXT     The UUID namespace to use for the `ID` field\n                                  generation\n    -p, --platform-url TEXT       The `actor.account.homePage` to use in the\n                                  xAPI statements  [required]\n  -f, --from [edx]                Input events format to convert  [required]\n  -t, --to [xapi]                 Output events format  [required]\n  -I, --ignore-errors             Continue writing regardless of raised errors\n  -F, --fail-on-unknown           Stop converting at first unknown event\n  --help                          Show this message and exit.\n</code></pre>"},{"location":"commands/#ralph-extract","title":"ralph extract","text":"<p>Extracts input events from a container format using a dedicated parser.</p> <p>Usage:</p> <pre><code>ralph extract [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -p, --parser [gelf|es]  Container format parser used to extract events\n                          [required]\n  --help                  Show this message and exit.\n</code></pre>"},{"location":"commands/#ralph-fetch","title":"ralph fetch","text":"<p>Fetch an archive or records from a configured backend.</p> <p>Usage:</p> <pre><code>ralph fetch [OPTIONS] [ARCHIVE]\n</code></pre> <p>Options:</p> <pre><code>  -b, --backend [es|mongo|ldp|fs|swift|ws]\n                                  Backend  [required]\n  ws backend: \n    --ws-uri TEXT\n  swift backend: \n    --swift-os-identity-api-version TEXT\n    --swift-os-auth-url TEXT\n    --swift-os-project-domain-name TEXT\n    --swift-os-user-domain-name TEXT\n    --swift-os-storage-url TEXT\n    --swift-os-region-name TEXT\n    --swift-os-password TEXT\n    --swift-os-username TEXT\n    --swift-os-tenant-name TEXT\n    --swift-os-tenant-id TEXT\n  fs backend: \n    --fs-path TEXT\n  ldp backend: \n    --ldp-stream-id TEXT\n    --ldp-service-name TEXT\n    --ldp-consumer-key TEXT\n    --ldp-application-secret TEXT\n    --ldp-application-key TEXT\n    --ldp-endpoint TEXT\n  mongo backend: \n    --mongo-client-options KEY=VALUE,KEY=VALUE\n    --mongo-collection TEXT\n    --mongo-database TEXT\n    --mongo-connection-uri TEXT\n  es backend: \n    --es-op-type TEXT\n    --es-client-options KEY=VALUE,KEY=VALUE\n    --es-index TEXT\n    --es-hosts VALUE1,VALUE2,VALUE3\n  -c, --chunk-size INTEGER        Get events by chunks of size #\n  -q, --query '{\"KEY\": \"VALUE\", \"KEY\": \"VALUE\"}'\n                                  Query object as a JSON string (database\n                                  backends ONLY)\n  --help                          Show this message and exit.\n</code></pre>"},{"location":"commands/#ralph-list","title":"ralph list","text":"<p>List available archives from a configured storage backend.</p> <p>Usage:</p> <pre><code>ralph list [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -b, --backend [ldp|fs|swift]    Backend  [required]\n  swift backend: \n    --swift-os-identity-api-version TEXT\n    --swift-os-auth-url TEXT\n    --swift-os-project-domain-name TEXT\n    --swift-os-user-domain-name TEXT\n    --swift-os-storage-url TEXT\n    --swift-os-region-name TEXT\n    --swift-os-password TEXT\n    --swift-os-username TEXT\n    --swift-os-tenant-name TEXT\n    --swift-os-tenant-id TEXT\n  fs backend: \n    --fs-path TEXT\n  ldp backend: \n    --ldp-stream-id TEXT\n    --ldp-service-name TEXT\n    --ldp-consumer-key TEXT\n    --ldp-application-secret TEXT\n    --ldp-application-key TEXT\n    --ldp-endpoint TEXT\n  -n, --new / -a, --all           List not fetched (or all) archives\n  -D, --details / -I, --ids       Get archives detailed output (JSON)\n  --help                          Show this message and exit.\n</code></pre>"},{"location":"commands/#ralph-push","title":"ralph push","text":"<p>Push an archive to a configured backend.</p> <p>Usage:</p> <pre><code>ralph push [OPTIONS] [ARCHIVE]\n</code></pre> <p>Options:</p> <pre><code>  -b, --backend [es|mongo|ldp|fs|swift]\n                                  Backend  [required]\n  swift backend: \n    --swift-os-identity-api-version TEXT\n    --swift-os-auth-url TEXT\n    --swift-os-project-domain-name TEXT\n    --swift-os-user-domain-name TEXT\n    --swift-os-storage-url TEXT\n    --swift-os-region-name TEXT\n    --swift-os-password TEXT\n    --swift-os-username TEXT\n    --swift-os-tenant-name TEXT\n    --swift-os-tenant-id TEXT\n  fs backend: \n    --fs-path TEXT\n  ldp backend: \n    --ldp-stream-id TEXT\n    --ldp-service-name TEXT\n    --ldp-consumer-key TEXT\n    --ldp-application-secret TEXT\n    --ldp-application-key TEXT\n    --ldp-endpoint TEXT\n  mongo backend: \n    --mongo-client-options KEY=VALUE,KEY=VALUE\n    --mongo-collection TEXT\n    --mongo-database TEXT\n    --mongo-connection-uri TEXT\n  es backend: \n    --es-op-type TEXT\n    --es-client-options KEY=VALUE,KEY=VALUE\n    --es-index TEXT\n    --es-hosts VALUE1,VALUE2,VALUE3\n  -c, --chunk-size INTEGER        Get events by chunks of size #\n  -f, --force                     Overwrite existing archives or records\n  -I, --ignore-errors             Continue writing regardless of raised errors\n  --help                          Show this message and exit.\n</code></pre>"},{"location":"commands/#ralph-runserver","title":"ralph runserver","text":"<p>Runs the API server for the development environment.</p> <p>Starts uvicorn programmatically for convenience and documentation.</p> <p>Usage:</p> <pre><code>ralph runserver [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -b, --backend [es|mongo]        Backend  [required]\n  mongo backend: \n    --mongo-client-options KEY=VALUE,KEY=VALUE\n    --mongo-collection TEXT\n    --mongo-database TEXT\n    --mongo-connection-uri TEXT\n  es backend: \n    --es-op-type TEXT\n    --es-client-options KEY=VALUE,KEY=VALUE\n    --es-index TEXT\n    --es-hosts VALUE1,VALUE2,VALUE3\n  -h, --host TEXT                 LRS server host name\n  -p, --port INTEGER              LRS server port\n  --help                          Show this message and exit.\n</code></pre>"},{"location":"commands/#ralph-validate","title":"ralph validate","text":"<p>Validates input events of given format.</p> <p>Usage:</p> <pre><code>ralph validate [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -f, --format [edx|xapi]  Input events format to validate  [required]\n  -I, --ignore-errors      Continue validating regardless of raised errors\n  -F, --fail-on-unknown    Stop validating at first unknown event\n  --help                   Show this message and exit.\n</code></pre>"},{"location":"contribute/","title":"Contribute","text":""},{"location":"contribute/#ralphs_core","title":"Ralph\u2019s core","text":"<p>To start playing with <code>ralph</code>, you should build it using the <code>bootstrap</code> Make target:</p> <pre><code>$ make bootstrap\n</code></pre> <p>Once the project has been bootstrapped, you may want to edit generated <code>.env</code> file to set up available backends parameters that will be injected in the running container as environment variables to configure Ralph (see backends documentation):</p> <pre><code># Elasticsearch backend\nRALPH_ES_HOSTS=http://elasticsearch:9200\nRALPH_ES_INDEX=statements\nRALPH_ES_TEST_HOSTS=http://elasticsearch:9200\nRALPH_ES_TEST_INDEX=test-index\n\n# [...]\n</code></pre> <p>Note that lines starting with a <code>#</code> are considered as commented and thus will have no effect while running Ralph.</p> <p>Now you can start playing the CLI:</p> <pre><code>$ bin/ralph --help\n</code></pre> <p>To lint your code, either use the <code>lint</code> meta target or one of the linting tools we use:</p> <pre><code># Run all linters\n$ make lint\n\n# Run pylint\n$ make lint-pylint\n\n# List available linters\n$ make help | grep lint-\n</code></pre> <p>To run tests on your code, either use the <code>test</code> Make target or the <code>bin/pytest</code> script to pass specific arguments to the test runner:</p> <pre><code># Run all tests\n$ make test\n\n# Run pytest with options\n$ bin/pytest -x -k mixins\n\n# Run pytest with options and more debugging logs\n$ bin/pytest -x -vvv -s --log-level=DEBUG -k mixins\n</code></pre>"},{"location":"contribute/#working_with_local_backends","title":"Working with local backends","text":"<p>Not all backends are accessible in a local environment development; for now only <code>elasticsearch</code> and <code>swift</code> services are accessible as docker containers (see <code>docker-compose.yml</code> services).</p> <p>To configure those backends, we provide default parameters in the <code>.env.dist</code> template, you can copy/paste them in your <code>.env</code> file (and uncomment them so that they are properly injected in running containers).</p> <p>In order to run the Elasticsearch backend locally on GNU/Linux operating systems, ensure that your virtual memory limits are not too low and increase them (temporally) if needed by typing this command from your terminal (as <code>root</code> or using <code>sudo</code>):</p> <p><code>sysctl -w vm.max_map_count=262144</code></p> <p>Reference: https://www.elastic.co/guide/en/elasticsearch/reference/master/vm-max-map-count.html</p> <p>Once configured, start available backends using:</p> <pre><code>$ make run-[BACKEND]\n</code></pre> <p>Substitute <code>[BACKEND]</code> by the backend name, e.g. <code>es</code> for Elasticsearch or <code>swift</code> for OpenStack Swift:</p> <pre><code># Start Elasticsearch local backend\n$ make run-es\n# Start Swift local backend\n$ make run-swift\n# Start all local backends\n$ make run-all\n</code></pre> <p>Now that you have started at least the <code>elasticsearch</code> and <code>swift</code> backends, it\u2019s time to play with them:</p> <pre><code># Store a JSON file in the Swift backend\n$ echo '{\"id\": 1, \"foo\": \"bar\"}' | \\\n    ./bin/ralph push -b swift -f foo.json\n\n# Check that we have created a new JSON file in the Swift backend\n$ bin/ralph list -b swift\nfoo.json\n\n# Fetch the content of the JSON file and index it in Elasticsearch\n$ bin/ralph fetch -b swift foo.json | \\\n    bin/ralph push -b es\n\n# Check that we have properly indexed the JSON file in Elasticsearch\n$ bin/ralph fetch -b es\n{\"id\": 1, \"foo\": \"bar\"}\n</code></pre>"},{"location":"contribute/#ralphs_tray","title":"Ralph\u2019s tray","text":"<p>Ralph is distributed along with its tray (a deployable package for Kubernetes clusters using Arnold). If you intend to work on this tray, please refer to Arnold\u2019s documentation first.</p> <p>Dependencies:</p> <ul> <li>Kubectl (&gt;<code>v.1.23.5</code>):   This CLI is used to communicate with the running Kubernetes instance you   will use.</li> <li>k3d (&gt;<code>v.5.0.0</code>): This tool is used to setup   and run a lightweight Kubernetes cluster, in order to have a local   environment (it is required to complete below\u2019s quickstart instructions to   avoid depending on an existing Kubernetes cluster).</li> <li>curl is required by Arnold\u2019s CLI.</li> <li>gnupg to encrypt Ansible vaults passwords and   collaborate with your team.</li> </ul>"},{"location":"contribute/#create_a_local_k3d_cluster","title":"Create a local <code>k3d</code> cluster","text":"<p>To create (or run) a local kubernetes cluster, we use <code>k3d</code>. The cluster\u2019s bootstrapping should be run via:</p> <pre><code>$ make k3d-cluster\n</code></pre> <p>Running a k3d-cluster locally supposes that the 80 and 443 ports of your machine are available, so that the ingresses created for your project responds properly. If one or both ports are already used by another service running on your machine, the <code>make k3d-cluster</code> command may fail.</p> <p>You can check that your cluster is running using the <code>k3d cluster</code> command:</p> <pre><code>$ k3d cluster list\nNAME     SERVERS   AGENTS   LOADBALANCER\nralph    1/1       0/0      true\n</code></pre> <p>As you can see, we are running a single node cluster called <code>ralph</code>.</p>"},{"location":"contribute/#bootstrap_an_arnold_project","title":"Bootstrap an Arnold project","text":"<p>Once your Kubernetes cluster is running, you need to create a standard Arnold project describing applications and environments you need to deploy:</p> <pre><code>$ make arnold-bootstrap\n</code></pre> <p>Once bootstrapped, Arnold should have created a <code>group_vars</code> directory containing the following files:</p> <pre><code>$ tree group_vars\ngroup_vars\n\u251c\u2500\u2500 common\n\u2514\u2500\u2500 customer\n    \u2514\u2500\u2500 ralph\n        \u251c\u2500\u2500 development\n        \u2502\u00a0\u00a0 \u251c\u2500\u2500 main.yml\n        \u2502\u00a0\u00a0 \u2514\u2500\u2500 secrets\n        \u2502\u00a0\u00a0     \u251c\u2500\u2500 databases.vault.yml\n        \u2502\u00a0\u00a0     \u251c\u2500\u2500 elasticsearch.vault.yml\n        \u2502\u00a0\u00a0     \u2514\u2500\u2500 ralph.vault.yml\n        \u2514\u2500\u2500 main.yml\n\n5 directories, 5 files\n</code></pre> <p>To create the LRS credentials file, you need to provide a list of accounts allowed to request the LRS in Ralph\u2019s vault:</p> <pre><code># Setup your kubernetes environment\n$ source .k3d-cluster.env.sh\n\n# Decrypt the vault\n$ bin/arnold -d -c ralph -e development -- vault -a ralph decrypt\n</code></pre> <p>Edit the vault file to add a new account for the <code>foo</code> user with the <code>bar</code> password and a relevant scope:</p> <pre><code># group_vars/customer/ralph/development/secrets/ralph.vault.yml\n#\n# [...]\n#\n# LRS\nLRS_AUTH:\n  - username: \"foo\"\n    hash: \"$2b$12$lCggI749U6TrzK7Qyr7xGe1KVSAXdPjtkMew.BD6lzIk//T5YSb72\"\n    scopes:\n      - \"foo_scope\"\n</code></pre> <p>The password hash has been generated using <code>bcrypt</code> as explained in the API user guide.</p> <p>And finally (re-)encrypt Ralph\u2019s vault:</p> <pre><code># Encrypt the vault\n$ bin/arnold -d -c ralph -e development -- vault -a ralph encrypt\n</code></pre> <p>You are now ready to create the related Kubernetes Secret while initializing Arnold project in the next step.</p>"},{"location":"contribute/#prepare_working_namespace","title":"Prepare working namespace","text":"<p>You are now ready to create required Kubernetes objects to start working on Ralph\u2019s deployment:</p> <pre><code>$ make arnold-init\n</code></pre> <p>At this point an Elasticsearch cluster should be running on your Kubernetes cluster:</p> <pre><code>$ kubectl -n development-ralph get -l app=elasticsearch pod\nNAME                                         READY   STATUS      RESTARTS   AGE\nelasticsearch-node-0                         1/1     Running     0          69s\nelasticsearch-node-1                         1/1     Running     0          69s\nelasticsearch-node-2                         1/1     Running     0          69s\nes-index-template-j-221010-09h25m24s-nx5qz   0/1     Completed   0          49s\n</code></pre> <p>We are now ready to deploy Ralph to Kubernetes!</p>"},{"location":"contribute/#deploy_code_repeat","title":"Deploy, code, repeat","text":"<p>To test your local docker image, you need to build it and publish it to the local kubernetes cluster docker registry using the <code>k3d-push</code> Makefile rule:</p> <pre><code>$ make k3d-push\n</code></pre> <p>Note that each time you modify Ralph\u2019s application or its Docker image, you will need to make this update.</p> <p>Now that your Docker image is published, it\u2019s time to deploy it!</p> <pre><code>$ make arnold-deploy\n</code></pre> <p>To test this deployment, let\u2019s try to make an authenticated request to the LRS:</p> <pre><code>$ curl -sLk \\\n    --user foo:bar \\\n    \"https://$(\\\n        kubectl -n development-ralph \\\n        get \\\n        ingress/ralph-app-current \\\n        -o jsonpath='{.spec.rules[0].host}')/whoami\"\n</code></pre> <p>And why not send test statements from Potsie\u2019s repository:</p> <pre><code>$ curl -sL \\\n    https://github.com/openfun/potsie/raw/main/fixtures/elasticsearch/lrs.json.gz | \\\n  gunzip | \\\n  head -n 100 | \\\n  jq -s . | \\\n  sed \"s/@timestamp/timestamp/g\" | \\\n  curl -sLk \\\n    --user foo:bar \\\n    -X POST \\\n    -H \"Content-Type: application/json\" \\\n    \"https://$(\\\n        kubectl -n development-ralph \\\n        get \\\n        ingress/ralph-app-current \\\n        -o jsonpath='{.spec.rules[0].host}')/xAPI/statements/\" \\\n    -d @-\n</code></pre> <p>This example command requires <code>jq</code> to serialize the request payload (xAPI statements). When dealing with JSON data, we strongly recommend to install it to manipulate them from the command line.</p>"},{"location":"contribute/#perform_arnolds_operations","title":"Perform Arnold\u2019s operations","text":"<p>If you want to run the <code>bin/arnold</code> script to run specific Arnold commands, you must ensure that your environment is properly set and that Arnold runs in development mode (i.e. using the <code>-d</code> flag):</p> <pre><code>$ source .k3d-cluster.env.sh\n$ bin/arnold -d -c ralph -e development -- vault -a ralph view\n</code></pre>"},{"location":"contribute/#stop_k3d_cluster","title":"Stop <code>k3d</code> cluster","text":"<p>When finished to work on the Tray, you can stop the <code>k3d</code> cluster using the <code>k3d-stop</code> helper:</p> <pre><code>$ make k3d-stop\n</code></pre>"},{"location":"models/","title":"Rationale","text":"<p>Ralph can be considered versatile since at some point it is log-content-agnostic: most commands will work as expected without transforming logged events content or format.</p> <p>But on the other side, Ralph is a tool dedicated to learning events processing so we\u2019ve implemented key features related to learning events validation and conversion. For now, we mostly focus on two learning events standards: Open edX and xAPI.</p> <p>Data validation and serialisation/de-serialisation are achieved using pydantics models that are documented in the following subsections:</p> <ul> <li>Open edX</li> <li>xAPI (work in progress)</li> </ul>"},{"location":"models/edx/","title":"Open edX events","text":"<p>edX pydantic models</p>"},{"location":"models/edx/#ralph.models.edx.base","title":"<code>base</code>","text":"<p>Base event model definitions</p>"},{"location":"models/edx/#ralph.models.edx.base.AbstractBaseEventField","title":"<code> AbstractBaseEventField            (BaseModelWithConfig)         </code>  <code>pydantic-model</code>","text":"<p>Represents the base model inherited by all <code>event</code> fields.</p> <p>The base model does not have any attributes as event field does not have common sub-fields.</p> Source code in <code>ralph/models/edx/base.py</code> <pre><code>class AbstractBaseEventField(BaseModelWithConfig):\n    \"\"\"Represents the base model inherited by all `event` fields.\n\n    The base model does not have any attributes as event field does not have common\n    sub-fields.\n    \"\"\"\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.base.BaseContextField","title":"<code> BaseContextField            (BaseModelWithConfig)         </code>  <code>pydantic-model</code>","text":"<p>Represents the base model inherited by all event <code>context</code> fields.</p> <p>Attributes:</p> Name Type Description <code>course_user_tags</code> <code>dict of str</code> <p>Content from <code>user_api_usercoursetag</code> table. Retrieved with:     <code>dict(         UserCourseTag.objects.filter(             user=request.user.pk, course_id=course_key         ).values_list('key', 'value')     )</code> Note:     Is only present when a course page is requested.     Is an empty dictionary when the user is not logged in or not found in     the <code>user_api_usercoursetag</code> table.</p> <code>user_id</code> <code>int or str or None</code> <p>Consists of the ID of the authenticated user. Retrieved with:     <code>request.user.pk</code> querying the <code>auth_user</code> table. Note:     Is an integer when the user is found in the <code>auth_user</code> table.     Is an empty string when an exception is raised while retrieving the ID.     Is <code>None</code> when the user is not logged in.</p> <code>org_id</code> <code>str</code> <p>Consists of the organization name that lists the course. Retrieved with:     <code>course_id.org</code> where <code>course_id</code> is an     <code>opaque_keys.edx.locator.CourseLocator</code> which is created using the URL     of the requested page. Note:     Is an empty string when the requested page is not a course page.</p> <code>course_id</code> <code>str</code> <p>Consists of the unique identifier for the visited course page. Retrieved with:     <code>course_id.to_deprecated_string()</code> where <code>course_id</code> is an     <code>opaque_keys.edx.locator.CourseLocator</code> which is created using the URL     of the requested page. Note:     Is an empty string when the requested page is not a course page.</p> <code>path</code> <code>Path</code> <p>Consist of the relative URL (without the hostname) of the requested page. Retrieved with:     <code>request.META['PATH_INFO']</code></p> Source code in <code>ralph/models/edx/base.py</code> <pre><code>class BaseContextField(BaseModelWithConfig):\n    \"\"\"Represents the base model inherited by all event `context` fields.\n\n    Attributes:\n        course_user_tags (dict of str): Content from `user_api_usercoursetag` table.\n            Retrieved with:\n                `dict(\n                    UserCourseTag.objects.filter(\n                        user=request.user.pk, course_id=course_key\n                    ).values_list('key', 'value')\n                )`\n            Note:\n                Is only present when a course page is requested.\n                Is an empty dictionary when the user is not logged in or not found in\n                the `user_api_usercoursetag` table.\n        user_id (int or str or None): Consists of the ID of the authenticated user.\n            Retrieved with:\n                `request.user.pk` querying the `auth_user` table.\n            Note:\n                Is an integer when the user is found in the `auth_user` table.\n                Is an empty string when an exception is raised while retrieving the ID.\n                Is `None` when the user is not logged in.\n        org_id (str): Consists of the organization name that lists the course.\n            Retrieved with:\n                `course_id.org` where `course_id` is an\n                `opaque_keys.edx.locator.CourseLocator` which is created using the URL\n                of the requested page.\n            Note:\n                Is an empty string when the requested page is not a course page.\n        course_id (str): Consists of the unique identifier for the visited course page.\n            Retrieved with:\n                `course_id.to_deprecated_string()` where `course_id` is an\n                `opaque_keys.edx.locator.CourseLocator` which is created using the URL\n                of the requested page.\n            Note:\n                Is an empty string when the requested page is not a course page.\n        path (Path): Consist of the relative URL (without the hostname) of the\n            requested page.\n            Retrieved with:\n                `request.META['PATH_INFO']`\n    \"\"\"\n\n    course_id: constr(regex=r\"^$|^course-v1:.+\\+.+\\+.+$\")  # noqa:F722\n    course_user_tags: Optional[dict[str, str]]\n    module: Optional[ContextModuleField]\n    org_id: str\n    path: Path\n    user_id: Union[int, Literal[\"\"], None]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.base.BaseEdxModel","title":"<code> BaseEdxModel            (BaseModelWithConfig)         </code>  <code>pydantic-model</code>","text":"<p>Represents the base model all statements inherit from.</p> <p>WARNING: it does not define the <code>event</code>, <code>event_type</code> and <code>event_source</code> fields.</p> <p>Attributes:</p> Name Type Description <code>username</code> <code>str</code> <p>Consists of the unique username identifying the logged in user. Retrieved with:     <code>request.user.username</code> querying the <code>auth_user</code> table. Note:     Is an empty string when the user is not logged in.     If an exception is raised when retrieving the username from the table     then the value is <code>anonymous</code>.     Usernames are made of 2-30 ASCII letters / numbers / underscores (_) /     hyphens (-)</p> <code>ip</code> <code>IPv4Address or str</code> <p>Consists of the public IPv4 address of the user. Retrieved with:     <code>get_ip(request)</code> cf. https://github.com/un33k/django-ipware/tree/1.1.0 Note:     Can be an empty string if the IP address is not found.</p> <code>agent</code> <code>str</code> <p>Consists of the <code>User-Agent</code> HTTP request header. Retrieved with:     <code>request.META[HTTP_USER_AGENT]</code> Note:     Can be an empty string if the header is not present in the request.     Contains information about:         Browser name and version         Operating system name and version         Default language</p> <code>host</code> <code>str</code> <p>Consists of the hostname of the server. Retrieved with:     <code>request.META[SERVER_NAME]</code></p> <code>referer</code> <code>Path</code> <p>Consists of the <code>Referer</code> HTTP request header. Retrieved with:     <code>request.META[HTTP_REFERER]</code> Note:     Can be an empty string if the header is not present in the request.     Contains the referring URL (previous URL visited by the user).</p> <code>accept_language</code> <code>str</code> <p>Consists of the <code>Accept-Language</code> HTTP request header. Retrieved with:     <code>request.META[HTTP_ACCEPT_LANGUAGE]</code> Note:     Can be an empty string if the header is not present in the request.     Contains the default language settings of the user.</p> <code>context</code> <code>BaseContextField</code> <p>see BaseContextField.</p> <code>time</code> <code>datetime</code> <p>Consists of the UTC time in ISO format at which the event was emitted. Retrieved with:     <code>datetime.datetime.utcnow()</code></p> <code>page</code> <code>None</code> <p>Consists of the value <code>None</code> Note:     In JSON the value is <code>null</code> instead of <code>None</code>.</p> Source code in <code>ralph/models/edx/base.py</code> <pre><code>class BaseEdxModel(BaseModelWithConfig):\n    \"\"\"Represents the base model all statements inherit from.\n\n    WARNING: it does not define the `event`, `event_type` and `event_source` fields.\n\n    Attributes:\n        username (str): Consists of the unique username identifying the logged in user.\n            Retrieved with:\n                `request.user.username` querying the `auth_user` table.\n            Note:\n                Is an empty string when the user is not logged in.\n                If an exception is raised when retrieving the username from the table\n                then the value is `anonymous`.\n                Usernames are made of 2-30 ASCII letters / numbers / underscores (_) /\n                hyphens (-)\n        ip (IPv4Address or str): Consists of the public IPv4 address of the user.\n            Retrieved with:\n                `get_ip(request)` cf. https://github.com/un33k/django-ipware/tree/1.1.0\n            Note:\n                Can be an empty string if the IP address is not found.\n        agent (str): Consists of the `User-Agent` HTTP request header.\n            Retrieved with:\n                `request.META[HTTP_USER_AGENT]`\n            Note:\n                Can be an empty string if the header is not present in the request.\n                Contains information about:\n                    Browser name and version\n                    Operating system name and version\n                    Default language\n        host (str): Consists of the hostname of the server.\n            Retrieved with:\n                `request.META[SERVER_NAME]`\n        referer (Path): Consists of the `Referer` HTTP request header.\n            Retrieved with:\n                `request.META[HTTP_REFERER]`\n            Note:\n                Can be an empty string if the header is not present in the request.\n                Contains the referring URL (previous URL visited by the user).\n        accept_language (str): Consists of the `Accept-Language` HTTP request header.\n            Retrieved with:\n                `request.META[HTTP_ACCEPT_LANGUAGE]`\n            Note:\n                Can be an empty string if the header is not present in the request.\n                Contains the default language settings of the user.\n        context (BaseContextField): see BaseContextField.\n        time (datetime): Consists of the UTC time in ISO format at which the event was\n            emitted.\n            Retrieved with:\n                `datetime.datetime.utcnow()`\n        page (None): Consists of the value `None`\n            Note:\n                In JSON the value is `null` instead of `None`.\n    \"\"\"\n\n    username: Union[constr(min_length=2, max_length=30), Literal[\"\"]]\n    ip: Union[IPv4Address, Literal[\"\"]]\n    agent: str\n    host: str\n    referer: Union[AnyHttpUrl, Literal[\"\"]]\n    accept_language: str\n    context: BaseContextField\n    time: datetime\n    page: None\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.base.BaseModelWithConfig","title":"<code> BaseModelWithConfig            (BaseModel)         </code>  <code>pydantic-model</code>","text":"<p>Base model defining configuration shared among all models.</p> Source code in <code>ralph/models/edx/base.py</code> <pre><code>class BaseModelWithConfig(BaseModel):\n    \"\"\"Base model defining configuration shared among all models.\"\"\"\n\n    class Config:  # pylint: disable=missing-class-docstring\n        extra = \"forbid\"\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.base.ContextModuleField","title":"<code> ContextModuleField            (BaseModelWithConfig)         </code>  <code>pydantic-model</code>","text":"<p>Represents the context <code>module</code> field.</p> <p>Attributes:</p> Name Type Description <code>usage_key</code> <code>str</code> <p>Consists of a block ID of the current component.</p> <code>display_name</code> <code>str</code> <p>Consists of a short description or title of the component.</p> Source code in <code>ralph/models/edx/base.py</code> <pre><code>class ContextModuleField(BaseModelWithConfig):\n    \"\"\"Represents the context `module` field.\n\n    Attributes:\n        usage_key (str): Consists of a block ID of the current component.\n        display_name (str): Consists of a short description or title of the component.\n    \"\"\"\n\n    usage_key: constr(regex=r\"^block-v1:.+\\+.+\\+.+type@.+@[a-f0-9]{32}$\")  # noqa:F722\n    display_name: str\n    original_usage_key: Optional[\n        constr(\n            regex=r\"^block-v1:.+\\+.+\\+.+type@problem\\+block@[a-f0-9]{32}$\"  # noqa:F722\n        )\n    ]\n    original_usage_version: Optional[str]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.browser","title":"<code>browser</code>","text":"<p>Browser event model definitions</p>"},{"location":"models/edx/#ralph.models.edx.browser.BaseBrowserModel","title":"<code> BaseBrowserModel            (BaseEdxModel)         </code>  <code>pydantic-model</code>","text":"<p>Represents the base model all browser statements inherit from.</p> <p>This type of event is triggered on (XHR) POST/GET requests to the <code>/event</code> URL.</p> <p>Attributes:</p> Name Type Description <code>event_source</code> <code>str</code> <p>Consists of the value <code>browser</code>.</p> <code>page</code> <code>AnyUrl</code> <p>Consists of the URL (with hostname) of the visited page. Retrieved with:     <code>window.location.href</code> from the JavaScript front-end.</p> <code>session</code> <code>str</code> <p>Consists of the md5 encrypted Django session key or an empty string.</p> Source code in <code>ralph/models/edx/browser.py</code> <pre><code>class BaseBrowserModel(BaseEdxModel):\n    \"\"\"Represents the base model all browser statements inherit from.\n\n    This type of event is triggered on (XHR) POST/GET requests to the `/event` URL.\n\n    Attributes:\n        event_source (str): Consists of the value `browser`.\n        page (AnyUrl): Consists of the URL (with hostname) of the visited page.\n            Retrieved with:\n                `window.location.href` from the JavaScript front-end.\n        session (str): Consists of the md5 encrypted Django session key or an empty\n            string.\n    \"\"\"\n\n    event_source: Literal[\"browser\"]\n    page: AnyUrl\n    session: Union[constr(regex=r\"^[a-f0-9]{32}$\"), Literal[\"\"]]  # noqa: F722\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.converters","title":"<code>converters</code>  <code>special</code>","text":""},{"location":"models/edx/#ralph.models.edx.converters.xapi","title":"<code>xapi</code>  <code>special</code>","text":"<p>edX to xAPI conversion sets</p>"},{"location":"models/edx/#ralph.models.edx.converters.xapi.base","title":"<code>base</code>","text":"<p>Base xAPI Converter</p>"},{"location":"models/edx/#ralph.models.edx.converters.xapi.base.BaseXapiConverter","title":"<code> BaseXapiConverter            (BaseConversionSet)         </code>","text":"<p>Base xAPI Converter.</p> <p>WARNING: The converter may not include the following edX fields: - context.org_id: When <code>org_id</code> is an empty string. - context.course_id: When <code>course_id</code> is an empty string.</p> <p>WARNING: The converter should not include the following edX fields as they may contain sensitive data: <code>username</code>, <code>referer</code>, <code>event</code>, <code>event_source</code>, <code>ip</code>, <code>agent</code>, <code>accept_language:</code>, <code>context.course_user_tags</code>.</p> Source code in <code>ralph/models/edx/converters/xapi/base.py</code> <pre><code>class BaseXapiConverter(BaseConversionSet):\n    \"\"\"Base xAPI Converter.\n\n    WARNING: The converter may not include the following edX fields:\n    - context.org_id: When `org_id` is an empty string.\n    - context.course_id: When `course_id` is an empty string.\n\n    WARNING: The converter should not include the following edX fields as they may\n    contain sensitive data: `username`, `referer`, `event`, `event_source`, `ip`,\n    `agent`, `accept_language:`, `context.course_user_tags`.\n    \"\"\"\n\n    def __init__(self, uuid_namespace: str, platform_url: str):\n        \"\"\"Initializes BaseXapiConverter.\"\"\"\n\n        self.platform_url = platform_url\n        try:\n            self.uuid_namespace = UUID(uuid_namespace)\n        except (TypeError, ValueError, AttributeError) as err:\n            raise ConfigurationException(\"Invalid UUID namespace\") from err\n        super().__init__()\n\n    def _get_conversion_items(self):\n        \"\"\"Returns a set of ConversionItems used for conversion.\"\"\"\n\n        return {\n            ConversionItem(\n                \"id\",\n                None,\n                lambda event_str: str(uuid5(self.uuid_namespace, event_str)),\n                True,\n            ),\n            ConversionItem(\n                \"actor__account__homePage\", transformers=lambda _: self.platform_url\n            ),\n            ConversionItem(\n                \"actor__account__name\",\n                \"context__user_id\",\n                lambda user_id: str(user_id) if user_id else \"anonymous\",\n            ),\n            ConversionItem(\n                \"object__definition__extensions__\" + EXTENSION_SCHOOL_ID,\n                \"context__org_id\",\n            ),\n            ConversionItem(\n                \"object__definition__extensions__\" + EXTENSION_COURSE_ID,\n                \"context__course_id\",\n                (self.parse_course_id, lambda x: x[\"course\"]),\n            ),\n            ConversionItem(\n                \"object__definition__extensions__\" + EXTENSION_MODULE_ID,\n                \"context__course_id\",\n                (self.parse_course_id, lambda x: x[\"module\"]),\n            ),\n            ConversionItem(\"timestamp\", \"time\"),\n        }\n\n    @staticmethod\n    def parse_course_id(course_id: str):\n        \"\"\"Returns a dictionary with `course` and `module` of edX event's\n        `context.course_id`.\n        \"\"\"\n\n        match = re.match(r\"^course-v1:.+\\+(.+)\\+(.+)$\", course_id)\n        if not match:\n            return {\"course\": None, \"module\": None}\n        return {\"course\": match.group(1), \"module\": match.group(2)}\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.converters.xapi.base.BaseXapiConverter.__init__","title":"<code>__init__(self, uuid_namespace, platform_url)</code>  <code>special</code>","text":"<p>Initializes BaseXapiConverter.</p> Source code in <code>ralph/models/edx/converters/xapi/base.py</code> <pre><code>def __init__(self, uuid_namespace: str, platform_url: str):\n    \"\"\"Initializes BaseXapiConverter.\"\"\"\n\n    self.platform_url = platform_url\n    try:\n        self.uuid_namespace = UUID(uuid_namespace)\n    except (TypeError, ValueError, AttributeError) as err:\n        raise ConfigurationException(\"Invalid UUID namespace\") from err\n    super().__init__()\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.converters.xapi.base.BaseXapiConverter.parse_course_id","title":"<code>parse_course_id(course_id)</code>  <code>staticmethod</code>","text":"<p>Returns a dictionary with <code>course</code> and <code>module</code> of edX event\u2019s <code>context.course_id</code>.</p> Source code in <code>ralph/models/edx/converters/xapi/base.py</code> <pre><code>@staticmethod\ndef parse_course_id(course_id: str):\n    \"\"\"Returns a dictionary with `course` and `module` of edX event's\n    `context.course_id`.\n    \"\"\"\n\n    match = re.match(r\"^course-v1:.+\\+(.+)\\+(.+)$\", course_id)\n    if not match:\n        return {\"course\": None, \"module\": None}\n    return {\"course\": match.group(1), \"module\": match.group(2)}\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.converters.xapi.navigational","title":"<code>navigational</code>","text":"<p>Navigational event xAPI Converter</p>"},{"location":"models/edx/#ralph.models.edx.converters.xapi.navigational.UIPageCloseToPageTerminated","title":"<code> UIPageCloseToPageTerminated            (BaseXapiConverter)         </code>","text":"<p>Converts a common edX <code>page_close</code> event to xAPI.</p> <p>Example Statement: John terminated https://www.fun-mooc.fr/ page.</p> <p>WARNING: The converter does not use the <code>self.platform_url</code> in the <code>object__id</code> because the <code>platform_url</code> is present in the edX\u2019s event <code>page</code> field.</p> Source code in <code>ralph/models/edx/converters/xapi/navigational.py</code> <pre><code>class UIPageCloseToPageTerminated(BaseXapiConverter):\n    \"\"\"Converts a common edX `page_close` event to xAPI.\n\n    Example Statement: John terminated https://www.fun-mooc.fr/ page.\n\n    WARNING: The converter does not use the `self.platform_url` in the `object__id`\n    because the `platform_url` is present in the edX's event `page` field.\n    \"\"\"\n\n    __src__ = UIPageClose\n    __dest__ = PageTerminated\n\n    def _get_conversion_items(self):\n        \"\"\"Returns a set of ConversionItems used for conversion.\"\"\"\n\n        conversion_items = super()._get_conversion_items()\n        return conversion_items.union({ConversionItem(\"object__id\", \"page\")})\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.converters.xapi.navigational.UIPageCloseToPageTerminated.__dest__","title":"<code> __dest__            (BaseXapiModel)         </code>  <code>pydantic-model</code>","text":"<p>Represents a page terminated xAPI statement.</p> <p>Example: John terminated the https://www.fun-mooc.fr/ page.</p> <p>Attributes:</p> Name Type Description <code>object</code> <code>PageObjectField</code> <p>See PageObjectField.</p> <code>verb</code> <code>PageTerminatedVerbField</code> <p>See PageTerminatedVerbField.</p> Source code in <code>ralph/models/edx/converters/xapi/navigational.py</code> <pre><code>class PageTerminated(BaseXapiModel):\n    \"\"\"Represents a page terminated xAPI statement.\n\n    Example: John terminated the https://www.fun-mooc.fr/ page.\n\n    Attributes:\n       object (PageObjectField): See PageObjectField.\n       verb (PageTerminatedVerbField): See PageTerminatedVerbField.\n    \"\"\"\n\n    __selector__ = selector(\n        object__definition__type=\"http://activitystrea.ms/schema/1.0/page\",\n        verb__id=\"http://adlnet.gov/expapi/verbs/terminated\",\n    )\n\n    object: PageObjectField\n    verb: TerminatedVerbField = TerminatedVerbField()\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.converters.xapi.navigational.UIPageCloseToPageTerminated.__src__","title":"<code> __src__            (BaseBrowserModel)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>page_close</code> browser statement.</p> <p>This type of statement is triggered when the user navigates to the next page or closes the browser window (when the JavaScript <code>window.onunload</code> event is called).</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>str</code> <p>Consists of the string value <code>{}</code>.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>page_close</code>.</p> <code>name</code> <code>str</code> <p>Consists of the value <code>page_close</code>.</p> Source code in <code>ralph/models/edx/converters/xapi/navigational.py</code> <pre><code>class UIPageClose(BaseBrowserModel):\n    \"\"\"Represents the `page_close` browser statement.\n\n    This type of statement is triggered when the user navigates to the next page\n    or closes the browser window (when the JavaScript `window.onunload` event\n    is called).\n\n    Attributes:\n        event (str): Consists of the string value `{}`.\n        event_type (str): Consists of the value `page_close`.\n        name (str): Consists of the value `page_close`.\n    \"\"\"\n\n    __selector__ = selector(event_source=\"browser\", event_type=\"page_close\")\n\n    # pylint: disable=unsubscriptable-object\n    event: Literal[\"{}\"]\n    event_type: Literal[\"page_close\"]\n    name: Literal[\"page_close\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.converters.xapi.server","title":"<code>server</code>","text":"<p>Server event xAPI Converter</p>"},{"location":"models/edx/#ralph.models.edx.converters.xapi.server.ServerEventToPageViewed","title":"<code> ServerEventToPageViewed            (BaseXapiConverter)         </code>","text":"<p>Converts a common edX server event to xAPI.</p> <p>Example Statement: John viewed https://www.fun-mooc.fr/ page.</p> Source code in <code>ralph/models/edx/converters/xapi/server.py</code> <pre><code>class ServerEventToPageViewed(BaseXapiConverter):\n    \"\"\"Converts a common edX server event to xAPI.\n\n    Example Statement: John viewed https://www.fun-mooc.fr/ page.\n    \"\"\"\n\n    __src__ = Server\n    __dest__ = PageViewed\n\n    def _get_conversion_items(self):\n        \"\"\"Returns a set of ConversionItems used for conversion.\"\"\"\n\n        conversion_items = super()._get_conversion_items()\n        return conversion_items.union(\n            {\n                ConversionItem(\n                    \"object__id\",\n                    \"event_type\",\n                    lambda event_type: self.platform_url + event_type,\n                ),\n            }\n        )\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.converters.xapi.server.ServerEventToPageViewed.__dest__","title":"<code> __dest__            (BaseXapiModel)         </code>  <code>pydantic-model</code>","text":"<p>Represents a page viewed xAPI statement.</p> <p>Example: John viewed the https://www.fun-mooc.fr/ page.</p> <p>Attributes:</p> Name Type Description <code>object</code> <code>PageObjectField</code> <p>See PageObjectField.</p> <code>verb</code> <code>PageViewedVerbField</code> <p>See PageViewedVerbField.</p> Source code in <code>ralph/models/edx/converters/xapi/server.py</code> <pre><code>class PageViewed(BaseXapiModel):\n    \"\"\"Represents a page viewed xAPI statement.\n\n    Example: John viewed the https://www.fun-mooc.fr/ page.\n\n    Attributes:\n       object (PageObjectField): See PageObjectField.\n       verb (PageViewedVerbField): See PageViewedVerbField.\n    \"\"\"\n\n    __selector__ = selector(\n        object__definition__type=\"http://activitystrea.ms/schema/1.0/page\",\n        verb__id=\"http://id.tincanapi.com/verb/viewed\",\n    )\n\n    object: PageObjectField\n    verb: ViewedVerbField = ViewedVerbField()\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.converters.xapi.server.ServerEventToPageViewed.__src__","title":"<code> __src__            (BaseServerModel)         </code>  <code>pydantic-model</code>","text":"<p>Represents a common server statement.</p> <p>This type of event is triggered from the django middleware on each request excluding: <code>/event</code>, <code>login</code>, <code>heartbeat</code>, <code>/segmentio/event</code> and <code>/performance</code>.</p> <p>Attributes:</p> Name Type Description <code>event_type</code> <code>str</code> <p>Consist of the relative URL (without the hostname) of the requested page. Retrieved with:     <code>request.META['PATH_INFO']</code></p> <code>event</code> <code>str</code> <p>Consist of a JSON string holding the content of the GET or POST request. Retrieved with:     <code>json.dumps(         {             'GET': dict(request.GET),             'POST': dict(request.POST)         }     )[:512]</code> Note:     Values for [\u2018password\u2019, \u2018newpassword\u2019, \u2018new_password\u2019, \u2018oldpassword\u2019,     \u2018old_password\u2019, \u2018new_password1\u2019, \u2018new_password2\u2019] are replaced by     <code>********</code>.     The JSON string is truncated at 512 characters resulting in invalid     JSON.</p> Source code in <code>ralph/models/edx/converters/xapi/server.py</code> <pre><code>class Server(BaseServerModel):\n    \"\"\"Represents a common server statement.\n\n    This type of event is triggered from the django middleware on each request\n    excluding: `/event`, `login`, `heartbeat`, `/segmentio/event` and `/performance`.\n\n    Attributes:\n        event_type (str): Consist of the relative URL (without the hostname) of the\n            requested page.\n            Retrieved with:\n                `request.META['PATH_INFO']`\n        event (str): Consist of a JSON string holding the content of the GET or POST\n            request.\n            Retrieved with:\n                ```json.dumps(\n                    {\n                        'GET': dict(request.GET),\n                        'POST': dict(request.POST)\n                    }\n                )[:512]```\n            Note:\n                Values for ['password', 'newpassword', 'new_password', 'oldpassword',\n                'old_password', 'new_password1', 'new_password2'] are replaced by\n                `********`.\n                The JSON string is truncated at 512 characters resulting in invalid\n                JSON.\n    \"\"\"\n\n    __selector__ = selector(\n        event_source=\"server\", event_type=LazyModelField(\"context__path\")\n    )\n\n    # pylint: disable=unsubscriptable-object\n    event_type: Path\n    event: Union[Json[ServerEventField], ServerEventField]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.enrollment","title":"<code>enrollment</code>  <code>special</code>","text":""},{"location":"models/edx/#ralph.models.edx.enrollment.fields","title":"<code>fields</code>  <code>special</code>","text":""},{"location":"models/edx/#ralph.models.edx.enrollment.fields.contexts","title":"<code>contexts</code>","text":"<p>Enrollment event models context fields definitions</p>"},{"location":"models/edx/#ralph.models.edx.enrollment.fields.contexts.EdxCourseEnrollmentUpgradeClickedContextField","title":"<code> EdxCourseEnrollmentUpgradeClickedContextField            (BaseContextField)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>context</code> field of the <code>edx.course.enrollment.upgrade_clicked</code> server statement.</p> <p>In addition to the common context member fields, this statement also comprises the <code>mode</code> context member field.</p> <p>Attributes:</p> Name Type Description <code>mode</code> <code>str</code> <p>Consists of either the <code>audit</code> or <code>honor</code> value. It identifies the enrollment mode when the user clicked Challenge Yourself.</p> Source code in <code>ralph/models/edx/enrollment/fields/contexts.py</code> <pre><code>class EdxCourseEnrollmentUpgradeClickedContextField(BaseContextField):\n    \"\"\"Represents the `context` field of the `edx.course.enrollment.upgrade_clicked`\n    server statement.\n\n    In addition to the common context member fields, this statement also comprises the\n    `mode` context member field.\n\n    Attributes:\n        mode (str): Consists of either the `audit` or `honor` value. It identifies the\n            enrollment mode when the user clicked &lt;kbd&gt;Challenge Yourself&lt;/kbd&gt;.\n    \"\"\"\n\n    mode: Union[Literal[\"audit\"], Literal[\"honor\"]]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.enrollment.fields.contexts.EdxCourseEnrollmentUpgradeSucceededContextField","title":"<code> EdxCourseEnrollmentUpgradeSucceededContextField            (BaseContextField)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>context</code> field of the <code>edx.course.enrollment.upgrade.succeeded</code> server statement.</p> <p>In addition to the common context member fields, this statement also comprises the <code>mode</code> context member field.</p> <p>Attributes:</p> Name Type Description <code>mode</code> <code>str</code> <p>Consists of the <code>verified</code> value.</p> Source code in <code>ralph/models/edx/enrollment/fields/contexts.py</code> <pre><code>class EdxCourseEnrollmentUpgradeSucceededContextField(BaseContextField):\n    \"\"\"Represents the `context` field of the `edx.course.enrollment.upgrade.succeeded`\n    server statement.\n\n    In addition to the common context member fields, this statement also comprises the\n    `mode` context member field.\n\n    Attributes:\n        mode (str): Consists of the `verified` value.\n    \"\"\"\n\n    mode: Literal[\"verified\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.enrollment.fields.events","title":"<code>events</code>","text":"<p>Enrollment models event field definition</p>"},{"location":"models/edx/#ralph.models.edx.enrollment.fields.events.EnrollmentEventField","title":"<code> EnrollmentEventField            (AbstractBaseEventField)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>event</code> field for enrollment statements.</p> <p>Note: Only server enrollment statements require an <code>event</code> field.</p> <p>Attributes:</p> Name Type Description <code>course_id</code> <code>str</code> <p>Consists in the course in which the student was enrolled or unenrolled.</p> <code>mode</code> <code>str</code> <p>Takes either <code>audit</code>, <code>honor</code>, <code>professional</code> or <code>verified</code> value. It identifies the student\u2019s enrollment mode.</p> <code>user_id</code> <code>int</code> <p>Identifies the student who was enrolled or unenrolled.</p> Source code in <code>ralph/models/edx/enrollment/fields/events.py</code> <pre><code>class EnrollmentEventField(AbstractBaseEventField):\n    \"\"\"Represents the `event` field for enrollment statements.\n\n    Note: Only server enrollment statements require an `event` field.\n\n    Attributes:\n        course_id (str): Consists in the course in which the student was enrolled or\n            unenrolled.\n        mode (str): Takes either `audit`, `honor`, `professional` or `verified` value.\n            It identifies the student\u2019s enrollment mode.\n        user_id (int): Identifies the student who was enrolled or unenrolled.\n    \"\"\"\n\n    course_id: str\n    mode: Union[\n        Literal[\"audit\"], Literal[\"honor\"], Literal[\"professional\"], Literal[\"verified\"]\n    ]\n    user_id: Union[int, Literal[\"\"], None]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.enrollment.statements","title":"<code>statements</code>","text":"<p>Enrollment event model definitions</p>"},{"location":"models/edx/#ralph.models.edx.enrollment.statements.EdxCourseEnrollmentActivated","title":"<code> EdxCourseEnrollmentActivated            (BaseServerModel)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>edx.course.enrollment.activated</code> server statement.</p> <p>The server emits it when a student enrolls in a course.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>EnrollmentEventField</code> <p>See EnrollmentEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>edx.course.enrollment.activated</code>.</p> <code>name</code> <code>str</code> <p>Consists of the value <code>edx.course.enrollment.activated</code>.</p> Source code in <code>ralph/models/edx/enrollment/statements.py</code> <pre><code>class EdxCourseEnrollmentActivated(BaseServerModel):\n    \"\"\"Represents the `edx.course.enrollment.activated` server statement.\n\n    The server emits it when a student enrolls in a course.\n\n    Attributes:\n        event (EnrollmentEventField): See EnrollmentEventField.\n        event_type (str): Consists of the value `edx.course.enrollment.activated`.\n        name (str): Consists of the value `edx.course.enrollment.activated`.\n    \"\"\"\n\n    __selector__ = selector(\n        event_source=\"server\", event_type=\"edx.course.enrollment.activated\"\n    )\n\n    event: Union[\n        Json[EnrollmentEventField],  # pylint: disable=unsubscriptable-object\n        EnrollmentEventField,\n    ]\n    event_type: Literal[\"edx.course.enrollment.activated\"]\n    name: Literal[\"edx.course.enrollment.activated\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.enrollment.statements.EdxCourseEnrollmentDeactivated","title":"<code> EdxCourseEnrollmentDeactivated            (BaseServerModel)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>edx.course.enrollment.deactivated</code> server statement.</p> <p>The server emits it when a student unenrolls from a course.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>EnrollmentEventField</code> <p>See EnrollmentEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>edx.course.enrollment.deactivated</code>.</p> <code>name</code> <code>str</code> <p>Consists of the value <code>edx.course.enrollment.deactivated</code>.</p> Source code in <code>ralph/models/edx/enrollment/statements.py</code> <pre><code>class EdxCourseEnrollmentDeactivated(BaseServerModel):\n    \"\"\"Represents the `edx.course.enrollment.deactivated` server statement.\n\n    The server emits it when a student unenrolls from a course.\n\n    Attributes:\n        event (EnrollmentEventField): See EnrollmentEventField.\n        event_type (str): Consists of the value `edx.course.enrollment.deactivated`.\n        name (str): Consists of the value `edx.course.enrollment.deactivated`.\n    \"\"\"\n\n    __selector__ = selector(\n        event_source=\"server\", event_type=\"edx.course.enrollment.deactivated\"\n    )\n\n    event: Union[\n        Json[EnrollmentEventField],  # pylint: disable=unsubscriptable-object\n        EnrollmentEventField,\n    ]\n    event_type: Literal[\"edx.course.enrollment.deactivated\"]\n    name: Literal[\"edx.course.enrollment.deactivated\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.enrollment.statements.EdxCourseEnrollmentModeChanged","title":"<code> EdxCourseEnrollmentModeChanged            (BaseServerModel)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>edx.course.enrollment.mode_changed</code> server statement.</p> <p>The server emits it when the process of changing a student\u2019s student_courseenrollment.mode to a different mode is complete.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>EnrollmentEventField</code> <p>See EnrollmentEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>edx.course.enrollment.mode_changed</code>.</p> <code>name</code> <code>str</code> <p>Consists of the value <code>edx.course.enrollment.mode_changed</code>.</p> Source code in <code>ralph/models/edx/enrollment/statements.py</code> <pre><code>class EdxCourseEnrollmentModeChanged(BaseServerModel):\n    \"\"\"Represents the `edx.course.enrollment.mode_changed` server statement.\n\n    The server emits it when the process of changing a student\u2019s\n    student_courseenrollment.mode to a different mode is complete.\n\n    Attributes:\n        event (EnrollmentEventField): See EnrollmentEventField.\n        event_type (str): Consists of the value `edx.course.enrollment.mode_changed`.\n        name (str): Consists of the value `edx.course.enrollment.mode_changed`.\n    \"\"\"\n\n    __selector__ = selector(\n        event_source=\"server\", event_type=\"edx.course.enrollment.mode_changed\"\n    )\n\n    event: Union[\n        Json[EnrollmentEventField],  # pylint: disable=unsubscriptable-object\n        EnrollmentEventField,\n    ]\n    event_type: Literal[\"edx.course.enrollment.mode_changed\"]\n    name: Literal[\"edx.course.enrollment.mode_changed\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.enrollment.statements.EdxCourseEnrollmentUpgradeSucceeded","title":"<code> EdxCourseEnrollmentUpgradeSucceeded            (BaseServerModel)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>edx.course.enrollment.upgrade.succeeded</code> server statement.</p> <p>The server emits it when the process of upgrading a student\u2019s student_courseenrollment.mode from <code>audit</code> or <code>honor</code> to <code>verified</code> is complete.</p> <p>Attributes:</p> Name Type Description <code>context</code> <code>EdxCourseEnrollmentUpgradeSucceededContextField</code> <p>See EdxCourseEnrollmentUpgradeSucceededContextField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>edx.course.enrollment.upgrade.succeeded</code>.</p> <code>name</code> <code>str</code> <p>Consists of the value <code>edx.course.enrollment.upgrade.succeeded</code>.</p> Source code in <code>ralph/models/edx/enrollment/statements.py</code> <pre><code>class EdxCourseEnrollmentUpgradeSucceeded(BaseServerModel):\n    \"\"\"Represents the `edx.course.enrollment.upgrade.succeeded` server statement.\n\n    The server emits it when the process of upgrading a student\u2019s\n    student_courseenrollment.mode from `audit` or `honor` to `verified` is complete.\n\n    Attributes:\n        context (EdxCourseEnrollmentUpgradeSucceededContextField):\n            See EdxCourseEnrollmentUpgradeSucceededContextField.\n        event_type (str): Consists of the value\n            `edx.course.enrollment.upgrade.succeeded`.\n        name (str): Consists of the value `edx.course.enrollment.upgrade.succeeded`.\n    \"\"\"\n\n    __selector__ = selector(\n        event_source=\"server\", event_type=\"edx.course.enrollment.upgrade.succeeded\"\n    )\n\n    context: EdxCourseEnrollmentUpgradeSucceededContextField\n    event_type: Literal[\"edx.course.enrollment.upgrade.succeeded\"]\n    name: Literal[\"edx.course.enrollment.upgrade.succeeded\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.enrollment.statements.UIEdxCourseEnrollmentUpgradeClicked","title":"<code> UIEdxCourseEnrollmentUpgradeClicked            (BaseBrowserModel)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>edx.course.enrollment.upgrade_clicked</code> browser statement.</p> <p>The browser emits it when a student clicks ChallengeYourself option, and the process of upgrading the student_courseenrollment.mode for the student to <code>verified</code> begins.</p> <p>Attributes:</p> Name Type Description <code>context</code> <code>EdxCourseEnrollmentUpgradeClickedContextField</code> <p>See EdxCourseEnrollmentUpgradeClickedContextField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>edx.course.enrollment.upgrade_clicked</code>.</p> <code>name</code> <code>str</code> <p>Consists of the value <code>edx.course.enrollment.upgrade_clicked</code>.</p> Source code in <code>ralph/models/edx/enrollment/statements.py</code> <pre><code>class UIEdxCourseEnrollmentUpgradeClicked(BaseBrowserModel):\n    \"\"\"Represents the `edx.course.enrollment.upgrade_clicked` browser statement.\n\n    The browser emits it when a student clicks &lt;kbd&gt;ChallengeYourself&lt;/kbd&gt; option,\n    and the process of upgrading the student_courseenrollment.mode for the student\n    to `verified` begins.\n\n    Attributes:\n        context (EdxCourseEnrollmentUpgradeClickedContextField):\n            See EdxCourseEnrollmentUpgradeClickedContextField.\n        event_type (str): Consists of the value `edx.course.enrollment.upgrade_clicked`.\n        name (str): Consists of the value `edx.course.enrollment.upgrade_clicked`.\n    \"\"\"\n\n    __selector__ = selector(\n        event_source=\"browser\", event_type=\"edx.course.enrollment.upgrade_clicked\"\n    )\n\n    context: EdxCourseEnrollmentUpgradeClickedContextField\n    event_type: Literal[\"edx.course.enrollment.upgrade_clicked\"]\n    name: Literal[\"edx.course.enrollment.upgrade_clicked\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.navigational","title":"<code>navigational</code>  <code>special</code>","text":""},{"location":"models/edx/#ralph.models.edx.navigational.fields","title":"<code>fields</code>  <code>special</code>","text":""},{"location":"models/edx/#ralph.models.edx.navigational.fields.events","title":"<code>events</code>","text":"<p>Navigational event field definition</p>"},{"location":"models/edx/#ralph.models.edx.navigational.fields.events.NavigationalEventField","title":"<code> NavigationalEventField            (AbstractBaseEventField)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>event</code> field of navigational statements.</p> <p>Note: All navigational statements are emitted from the browser.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>str</code> <p>Consists of the edX ID of the sequence.</p> <code>old</code> <code>int</code> <p>For <code>seq_goto</code>, it consists of the index of the unit being jumped to. For <code>seq_next</code> and <code>seq_prev</code>, it consists of the index of the unit being navigated to.</p> <code>new</code> <code>int</code> <p>For <code>seq_goto</code>, it consists of the index of the unit being jumped from. For <code>seq_next</code> and <code>seq_prev</code>, it consists of the index of the unit being navigated away from.</p> Source code in <code>ralph/models/edx/navigational/fields/events.py</code> <pre><code>class NavigationalEventField(AbstractBaseEventField):\n    \"\"\"Represents the `event` field of navigational statements.\n\n    Note: All navigational statements are emitted from the browser.\n\n    Attributes:\n        id (str): Consists of the edX ID of the sequence.\n        old (int): For `seq_goto`, it consists of the index of the unit being jumped to.\n            For `seq_next` and `seq_prev`, it consists of the index of the unit being\n            navigated to.\n        new (int): For `seq_goto`, it consists of the index of the unit being jumped\n            from. For `seq_next` and `seq_prev`, it consists of the index of the unit\n            being navigated away from.\n    \"\"\"\n\n    id: constr(\n        regex=(\n            r\"^block-v1:[^\\/+]+(\\/|\\+)[^\\/+]+(\\/|\\+)[^\\/?]+type\"  # noqa : F722\n            r\"@sequential\\+block@[a-f0-9]{32}$\"  # noqa : F722\n        )\n    )\n    new: int\n    old: int\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.navigational.statements","title":"<code>statements</code>","text":"<p>Navigational event model definitions</p>"},{"location":"models/edx/#ralph.models.edx.navigational.statements.UIPageClose","title":"<code> UIPageClose            (BaseBrowserModel)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>page_close</code> browser statement.</p> <p>This type of statement is triggered when the user navigates to the next page or closes the browser window (when the JavaScript <code>window.onunload</code> event is called).</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>str</code> <p>Consists of the string value <code>{}</code>.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>page_close</code>.</p> <code>name</code> <code>str</code> <p>Consists of the value <code>page_close</code>.</p> Source code in <code>ralph/models/edx/navigational/statements.py</code> <pre><code>class UIPageClose(BaseBrowserModel):\n    \"\"\"Represents the `page_close` browser statement.\n\n    This type of statement is triggered when the user navigates to the next page\n    or closes the browser window (when the JavaScript `window.onunload` event\n    is called).\n\n    Attributes:\n        event (str): Consists of the string value `{}`.\n        event_type (str): Consists of the value `page_close`.\n        name (str): Consists of the value `page_close`.\n    \"\"\"\n\n    __selector__ = selector(event_source=\"browser\", event_type=\"page_close\")\n\n    # pylint: disable=unsubscriptable-object\n    event: Literal[\"{}\"]\n    event_type: Literal[\"page_close\"]\n    name: Literal[\"page_close\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.navigational.statements.UISeqGoto","title":"<code> UISeqGoto            (BaseBrowserModel)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>seq_goto</code> browser statement.</p> <p>The browser emits such statement when a user selects a navigational control. <code>seq_goto</code> is emitted when a user jumps between units in a sequence.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>obj</code> <p>Consists of member fields that identify specifics triggered event.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>seq_goto</code>.</p> <code>name</code> <code>str</code> <p>Consists of the value <code>seq_goto</code>.</p> Source code in <code>ralph/models/edx/navigational/statements.py</code> <pre><code>class UISeqGoto(BaseBrowserModel):\n    \"\"\"Represents the `seq_goto` browser statement.\n\n    The browser emits such statement when a user selects a navigational control.\n    `seq_goto` is emitted when a user jumps between units in a sequence.\n\n    Attributes:\n        event (obj): Consists of member fields that identify specifics triggered event.\n        event_type (str): Consists of the value `seq_goto`.\n        name (str): Consists of the value `seq_goto`.\n    \"\"\"\n\n    __selector__ = selector(event_source=\"browser\", event_type=\"seq_goto\")\n\n    # pylint: disable=unsubscriptable-object\n    event: Union[Json[NavigationalEventField], NavigationalEventField]\n    event_type: Literal[\"seq_goto\"]\n    name: Literal[\"seq_goto\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.navigational.statements.UISeqNext","title":"<code> UISeqNext            (BaseBrowserModel)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>seq_next</code> browser statement.</p> <p>The browser emits such statement when a user selects a navigational control. <code>seq_next</code> is emitted when a user navigates to the next unit in a sequence.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>obj</code> <p>Consists of member fields that identify specifics triggered event.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>seq_next</code>.</p> <code>name</code> <code>str</code> <p>Consists of the value <code>seq_next</code>.</p> Source code in <code>ralph/models/edx/navigational/statements.py</code> <pre><code>class UISeqNext(BaseBrowserModel):\n    \"\"\"Represents the `seq_next` browser statement.\n\n    The browser emits such statement when a user selects a navigational control.\n    `seq_next` is emitted when a user navigates to the next unit in a sequence.\n\n    Attributes:\n        event (obj): Consists of member fields that identify specifics triggered event.\n        event_type (str): Consists of the value `seq_next`.\n        name (str): Consists of the value `seq_next`.\n    \"\"\"\n\n    __selector__ = selector(event_source=\"browser\", event_type=\"seq_next\")\n\n    # pylint: disable=unsubscriptable-object\n    event: Union[Json[NavigationalEventField], NavigationalEventField]\n    event_type: Literal[\"seq_next\"]\n    name: Literal[\"seq_next\"]\n\n    @validator(\"event\")\n    @classmethod\n    def validate_next_jump_event_field(cls, value):\n        \"\"\"Checks that event.new is equal to event.old + 1.\"\"\"\n\n        if value.new != value.old + 1:\n            raise ValueError(\"event.new - event.old should be equal to 1\")\n\n        return value\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.navigational.statements.UISeqNext.validate_next_jump_event_field","title":"<code>validate_next_jump_event_field(value)</code>  <code>classmethod</code>","text":"<p>Checks that event.new is equal to event.old + 1.</p> Source code in <code>ralph/models/edx/navigational/statements.py</code> <pre><code>@validator(\"event\")\n@classmethod\ndef validate_next_jump_event_field(cls, value):\n    \"\"\"Checks that event.new is equal to event.old + 1.\"\"\"\n\n    if value.new != value.old + 1:\n        raise ValueError(\"event.new - event.old should be equal to 1\")\n\n    return value\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.navigational.statements.UISeqPrev","title":"<code> UISeqPrev            (BaseBrowserModel)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>seq_prev</code> browser statement.</p> <p>The browser emits such statement when a user selects a navigational control. <code>seq_prev</code> is emitted when a user navigates to the previous unit in a sequence.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>obj</code> <p>Consists of member fields that identify specifics triggered event.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>seq_prev</code>.</p> <code>name</code> <code>str</code> <p>Consists of the value <code>seq_prev</code>.</p> Source code in <code>ralph/models/edx/navigational/statements.py</code> <pre><code>class UISeqPrev(BaseBrowserModel):\n    \"\"\"Represents the `seq_prev` browser statement.\n\n    The browser emits such statement when a user selects a navigational control.\n    `seq_prev` is emitted when a user navigates to the previous unit in a sequence.\n\n    Attributes:\n        event (obj): Consists of member fields that identify specifics triggered event.\n        event_type (str): Consists of the value `seq_prev`.\n        name (str): Consists of the value `seq_prev`.\n\n    \"\"\"\n\n    __selector__ = selector(event_source=\"browser\", event_type=\"seq_prev\")\n\n    # pylint: disable=unsubscriptable-object\n    event: Union[Json[NavigationalEventField], NavigationalEventField]\n    event_type: Literal[\"seq_prev\"]\n    name: Literal[\"seq_prev\"]\n\n    @validator(\"event\")\n    @classmethod\n    def validate_prev_jump_event_field(cls, value):\n        \"\"\"Checks that event.new is equal to event.old - 1.\"\"\"\n\n        if value.new != value.old - 1:\n            raise ValueError(\"event.old - event.new should be equal to 1\")\n\n        return value\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.navigational.statements.UISeqPrev.validate_prev_jump_event_field","title":"<code>validate_prev_jump_event_field(value)</code>  <code>classmethod</code>","text":"<p>Checks that event.new is equal to event.old - 1.</p> Source code in <code>ralph/models/edx/navigational/statements.py</code> <pre><code>@validator(\"event\")\n@classmethod\ndef validate_prev_jump_event_field(cls, value):\n    \"\"\"Checks that event.new is equal to event.old - 1.\"\"\"\n\n    if value.new != value.old - 1:\n        raise ValueError(\"event.old - event.new should be equal to 1\")\n\n    return value\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.problem_interaction","title":"<code>problem_interaction</code>  <code>special</code>","text":""},{"location":"models/edx/#ralph.models.edx.problem_interaction.fields","title":"<code>fields</code>  <code>special</code>","text":""},{"location":"models/edx/#ralph.models.edx.problem_interaction.fields.events","title":"<code>events</code>","text":"<p>Problem interaction events model event fields definitions</p>"},{"location":"models/edx/#ralph.models.edx.problem_interaction.fields.events.CorrectMap","title":"<code> CorrectMap            (BaseModelWithConfig)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>correct_map</code> sub-field.</p> <p>Attributes:</p> Name Type Description <code>answervariable</code> <code>str</code> <p>Consists of the variable chosen in answer in the case of optionresponse provided with variables.</p> <code>correctness</code> <code>str</code> <p>Consists either of the <code>correct</code> or <code>incorrect</code> value.</p> <code>hint</code> <code>str</code> <p>Consists of optional hint.</p> <code>hint_mode</code> <code>str</code> <p>Consists either of the value <code>on_request</code> or <code>always</code> value.</p> <code>msg</code> <code>str</code> <p>Consists of extra message response.</p> <code>npoints</code> <code>int</code> <p>Consists of awarded points.</p> <code>queuestate</code> <code>json</code> <p>see QueueStateField.</p> Source code in <code>ralph/models/edx/problem_interaction/fields/events.py</code> <pre><code>class CorrectMap(BaseModelWithConfig):\n    \"\"\"Represents the `correct_map` sub-field.\n\n    Attributes:\n        answervariable (str): Consists of the variable chosen in answer in the case of\n            optionresponse provided with variables.\n        correctness (str): Consists either of the `correct` or `incorrect` value.\n        hint (str): Consists of optional hint.\n        hint_mode (str): Consists either of the value `on_request` or `always` value.\n        msg (str): Consists of extra message response.\n        npoints (int): Consists of awarded points.\n        queuestate (json): see QueueStateField.\n    \"\"\"\n\n    answervariable: Union[Literal[None], None, str]\n    correctness: Union[Literal[\"correct\"], Literal[\"incorrect\"]]\n    hint: Optional[str]\n    hintmode: Optional[Union[Literal[\"on_request\"], Literal[\"always\"]]]\n    msg: str\n    npoints: Optional[int]\n    queuestate: Optional[QueueState]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.problem_interaction.fields.events.EdxProblemHintDemandhintDisplayedEventField","title":"<code> EdxProblemHintDemandhintDisplayedEventField            (AbstractBaseEventField)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>event</code> field of <code>EdxProblemHintDemandhintDisplayed</code> model.</p> <p>Attributes:</p> Name Type Description <code>hint_index</code> <code>int</code> <p>Consists of the identifier for the hint that was displayed to the user.</p> <code>hint_len</code> <code>int</code> <p>Consists of the total number of hints defined for this problem.</p> <code>hint_text</code> <code>str</code> <p>Consists of the text of the hint that was displayed to the user.</p> <code>module_id</code> <code>str</code> <p>Consists of the identifier for the problem component for which the user requested the hint.</p> Source code in <code>ralph/models/edx/problem_interaction/fields/events.py</code> <pre><code>class EdxProblemHintDemandhintDisplayedEventField(AbstractBaseEventField):\n    \"\"\"Represents the `event` field of `EdxProblemHintDemandhintDisplayed` model.\n\n    Attributes:\n        hint_index (int): Consists of the identifier for the hint that was displayed to\n            the user.\n        hint_len (int): Consists of the total number of hints defined for this problem.\n        hint_text (str): Consists of the text of the hint that was displayed to the\n            user.\n        module_id (str): Consists of the identifier for the problem component for which\n            the user requested the hint.\n    \"\"\"\n\n    hint_index: int\n    hint_len: int\n    hint_text: str\n    module_id: str\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.problem_interaction.fields.events.EdxProblemHintFeedbackDisplayedEventField","title":"<code> EdxProblemHintFeedbackDisplayedEventField            (AbstractBaseEventField)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>event</code> field of <code>EdxProblemHintFeedbackDisplayed</code> model.</p> <p>Attributes:</p> Name Type Description <code>choice_all</code> <code>list</code> <p>Lists all of the answer choices for problems with multiple possible answers defined.</p> <code>correctness</code> <code>bool</code> <p><code>True</code> if the <code>student_answer</code> value is correct, else <code>False</code>.</p> <code>hint_label</code> <code>str</code> <p>Consists of the feedback message given for the answer correctness.</p> <code>hints</code> <code>list</code> <p>Consists of a text member field with the given feedback string.</p> <code>module_id</code> <code>str</code> <p>Consists of the identifier for the problem component for which the user received the feedback.</p> <code>problem_part_id</code> <code>str</code> <p>Consists of the specific problem for which the user received feedback.</p> <code>question_type</code> <code>str</code> <p>Consists of the XML tag that identifies the problem type.</p> <code>student_answer</code> <code>list</code> <p>Consists of the answer value(s) selected or supplied by the user.</p> <code>trigger_type</code> <code>str</code> <p>Identifies the type of feedback obtained by the <code>student_answer</code> response. Consists either of <code>single</code> or <code>compound</code> value.</p> Source code in <code>ralph/models/edx/problem_interaction/fields/events.py</code> <pre><code>class EdxProblemHintFeedbackDisplayedEventField(AbstractBaseEventField):\n    \"\"\"Represents the `event` field of `EdxProblemHintFeedbackDisplayed` model.\n\n    Attributes:\n        choice_all (list): Lists all of the answer choices for problems with multiple\n            possible answers defined.\n        correctness (bool): `True` if the `student_answer` value is correct, else\n            `False`.\n        hint_label (str): Consists of the feedback message given for the answer\n            correctness.\n        hints (list): Consists of a text member field with the given feedback string.\n        module_id (str): Consists of the identifier for the problem component for which\n            the user received the feedback.\n        problem_part_id (str): Consists of the specific problem for which the user\n            received feedback.\n        question_type (str): Consists of the XML tag that identifies the problem type.\n        student_answer (list): Consists of the answer value(s) selected or supplied by\n            the user.\n        trigger_type (str): Identifies the type of feedback obtained by the\n            `student_answer` response. Consists either of `single` or `compound` value.\n    \"\"\"\n\n    choice_all: Optional[list[str]]\n    correctness: bool\n    hint_label: str\n    hints: list[dict]\n    module_id: str\n    problem_part_id: str\n    question_type: Union[\n        Literal[\"stringresponse\"],\n        Literal[\"choiceresponse\"],\n        Literal[\"multiplechoiceresponse\"],\n        Literal[\"numericalresponse\"],\n        Literal[\"optionresponse\"],\n    ]\n    student_answer: list[str]\n    trigger_type: Union[Literal[\"single\"], Literal[\"compound\"]]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.problem_interaction.fields.events.ProblemCheckEventField","title":"<code> ProblemCheckEventField            (AbstractBaseEventField)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>event</code> field of <code>ProblemCheck</code> model.</p> <p>Attributes:</p> Name Type Description <code>answers</code> <code>dict</code> <p>Consists of a dictionary of problem ID and the corresponding internal answer identifier for each problem.</p> <code>attempts</code> <code>int</code> <p>Consists of the number of times the user attempted to answer the problem.</p> <code>correct_map</code> <code>dict</code> <p>Consists of the evaluation data for each answer.</p> <code>grade</code> <code>int</code> <p>Consists of the current grade value.</p> <code>max_grade</code> <code>int</code> <p>Consists of the maximum possible grade value.</p> <code>problem_id</code> <code>str</code> <p>Consists of the ID of the problem that was checked.</p> <code>state</code> <code>json</code> <p>Consists of the current problem state.</p> <code>submission</code> <code>dict</code> <p>Consists of a dictionnary of data about the given answer.</p> <code>success</code> <code>str</code> <p>Consists of either the <code>correct</code> or <code>incorrect</code> value.</p> Source code in <code>ralph/models/edx/problem_interaction/fields/events.py</code> <pre><code>class ProblemCheckEventField(AbstractBaseEventField):\n    \"\"\"Represents the `event` field of `ProblemCheck` model.\n\n    Attributes:\n        answers (dict): Consists of a dictionary of problem ID and the corresponding\n            internal answer identifier for each problem.\n        attempts (int): Consists of the number of times the user attempted to answer\n            the problem.\n        correct_map (dict): Consists of the evaluation data for each answer.\n        grade (int): Consists of the current grade value.\n        max_grade (int): Consists of the maximum possible grade value.\n        problem_id (str): Consists of the ID of the problem that was checked.\n        state (json): Consists of the current problem state.\n        submission (dict): Consists of a dictionnary of data about the given answer.\n        success (str): Consists of either the `correct` or `incorrect` value.\n    \"\"\"\n\n    answers: dict[\n        constr(regex=r\"^[a-f0-9]{32}_[0-9]_[0-9]$\"),  # noqa : F722\n        Union[list[str], str],\n    ]\n    attempts: int\n    correct_map: dict[\n        constr(regex=r\"^[a-f0-9]{32}_[0-9]_[0-9]$\"),  # noqa : F722\n        CorrectMap,\n    ]\n    grade: int\n    max_grade: int\n    problem_id: constr(\n        regex=r\"^block-v1:[^\\/+]+(\\/|\\+)[^\\/+]+(\\/|\\+)[^\\/?]+\"  # noqa : F722\n        r\"type@problem\\+block@[a-f0-9]{32}$\"  # noqa : F722\n    )\n    state: State\n    submission: dict[\n        constr(regex=r\"^[a-f0-9]{32}_[0-9]_[0-9]$\"),  # noqa : F722\n        SubmissionAnswerField,\n    ]\n    success: Union[Literal[\"correct\"], Literal[\"incorrect\"]]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.problem_interaction.fields.events.ProblemCheckFailEventField","title":"<code> ProblemCheckFailEventField            (AbstractBaseEventField)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>event</code> field of <code>ProblemCheckFail</code> model.</p> <p>Attributes:</p> Name Type Description <code>answers</code> <code>dict</code> <p>Consists of a dictionary of problem ID and the internal answer identifier for each problem.</p> <code>failure</code> <code>str</code> <p>Consists either of the <code>closed</code> or <code>unreset</code> value.</p> <code>problem_id</code> <code>str</code> <p>Consists of the ID of the problem that was checked.</p> <code>state</code> <code>dict</code> <p>Consists of the current problem state.</p> Source code in <code>ralph/models/edx/problem_interaction/fields/events.py</code> <pre><code>class ProblemCheckFailEventField(AbstractBaseEventField):\n    \"\"\"Represents the `event` field of `ProblemCheckFail` model.\n\n    Attributes:\n        answers (dict): Consists of a dictionary of problem ID and the internal answer\n            identifier for each problem.\n        failure (str): Consists either of the `closed` or `unreset` value.\n        problem_id (str): Consists of the ID of the problem that was checked.\n        state (dict): Consists of the current problem state.\n    \"\"\"\n\n    answers: dict[\n        constr(regex=r\"^[a-f0-9]{32}_[0-9]_[0-9]$\"),  # noqa : F722\n        Union[list[str], str],\n    ]\n    failure: Union[Literal[\"closed\"], Literal[\"unreset\"]]\n    problem_id: constr(\n        regex=r\"^block-v1:[^\\/+]+(\\/|\\+)[^\\/+]+(\\/|\\+)[^\\/?]+\"  # noqa : F722\n        r\"type@problem\\+block@[a-f0-9]{32}$\"  # noqa : F722\n    )\n    state: State\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.problem_interaction.fields.events.ProblemRescoreEventField","title":"<code> ProblemRescoreEventField            (AbstractBaseEventField)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>event</code> field of <code>ProblemRescore</code> model.</p> <p>Attributes:</p> Name Type Description <code>attempts</code> <code>int</code> <p>Consists of the number of attempts of rescoring.</p> <code>correct_map</code> <code>json</code> <p>see CorrectMapSubFields.</p> <code>new_score</code> <code>int</code> <p>Consists of the new score obtained after rescoring.</p> <code>new_total</code> <code>int</code> <p>Consists of the new total summed after rescoring.</p> <code>orig_score</code> <code>int</code> <p>Consists of the original scored before rescoring.</p> <code>problem_id</code> <code>str</code> <p>Consists of the ID of the problem being rescored.</p> <code>state</code> <code>json</code> <p>see StateField.</p> <code>success</code> <code>str</code> <p>Consists either of the <code>correct</code> or <code>incorrect</code> value.</p> Source code in <code>ralph/models/edx/problem_interaction/fields/events.py</code> <pre><code>class ProblemRescoreEventField(AbstractBaseEventField):\n    \"\"\"Represents the `event` field of `ProblemRescore` model.\n\n    Attributes:\n        attempts (int): Consists of the number of attempts of rescoring.\n        correct_map (json): see CorrectMapSubFields.\n        new_score (int): Consists of the new score obtained after rescoring.\n        new_total (int): Consists of the new total summed after rescoring.\n        orig_score (int): Consists of the original scored before rescoring.\n        problem_id (str): Consists of the ID of the problem being rescored.\n        state (json): see StateField.\n        success (str): Consists either of the `correct` or `incorrect` value.\n    \"\"\"\n\n    attempts: int\n    correct_map: CorrectMap\n    new_score: int\n    new_total: int\n    orig_score: int\n    orig_total: int\n    problem_id: constr(\n        regex=r\"^block-v1:[^\\/+]+(\\/|\\+)[^\\/+]+(\\/|\\+)[^\\/?]+\"  # noqa : F722\n        r\"type@problem\\+block@[a-f0-9]{32}$\"  # noqa : F722\n    )\n    state: State\n    success: Union[Literal[\"correct\"], Literal[\"incorrect\"]]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.problem_interaction.fields.events.ProblemRescoreFailEventField","title":"<code> ProblemRescoreFailEventField            (AbstractBaseEventField)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>event</code> field of <code>ProblemRescoreFail</code> model.</p> <p>Attributes:</p> Name Type Description <code>failure</code> <code>str</code> <p>Consists either of the <code>closed</code> or <code>unreset</code> value.</p> <code>problem_id</code> <code>str</code> <p>Consists of the ID of the problem being checked.</p> <code>state</code> <code>json</code> <p>see StateField.</p> Source code in <code>ralph/models/edx/problem_interaction/fields/events.py</code> <pre><code>class ProblemRescoreFailEventField(AbstractBaseEventField):\n    \"\"\"Represents the `event` field of `ProblemRescoreFail` model.\n\n    Attributes:\n        failure (str): Consists either of the `closed` or `unreset` value.\n        problem_id (str): Consists of the ID of the problem being checked.\n        state (json): see StateField.\n    \"\"\"\n\n    failure: Union[Literal[\"closed\"], Literal[\"unreset\"]]\n    problem_id: constr(\n        regex=r\"^block-v1:[^\\/+]+(\\/|\\+)[^\\/+]+(\\/|\\+)[^\\/?]+\"  # noqa : F722\n        r\"type@problem\\+block@[a-f0-9]{32}$\"  # noqa : F722\n    )\n    state: State\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.problem_interaction.fields.events.QueueState","title":"<code> QueueState            (BaseModelWithConfig)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>queuestate</code> sub-field.</p> <p>Attributes:</p> Name Type Description <code>key</code> <code>str</code> <p>Consists of a secret string.</p> <code>time</code> <code>str</code> <p>Consists of a string dump of a DateTime object in the format \u2018%Y%m%d%H%M%S\u2019.</p> Source code in <code>ralph/models/edx/problem_interaction/fields/events.py</code> <pre><code>class QueueState(BaseModelWithConfig):\n    \"\"\"Represents the `queuestate` sub-field.\n\n    Attributes:\n        key (str): Consists of a secret string.\n        time (str): Consists of a string dump of a DateTime object in the format\n            '%Y%m%d%H%M%S'.\n    \"\"\"\n\n    key: str\n    time: datetime\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.problem_interaction.fields.events.ResetProblemEventField","title":"<code> ResetProblemEventField            (AbstractBaseEventField)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>event</code> field of <code>ResetProblem</code> model.</p> <p>Attributes:</p> Name Type Description <code>new_state</code> <code>json</code> <p>see StateField.</p> <code>old_state</code> <code>json</code> <p>see StateField.</p> <code>problem_id</code> <code>str</code> <p>Consists of the ID of the problem being reset.</p> Source code in <code>ralph/models/edx/problem_interaction/fields/events.py</code> <pre><code>class ResetProblemEventField(AbstractBaseEventField):\n    \"\"\"Represents the `event` field of `ResetProblem` model.\n\n    Attributes:\n        new_state (json): see StateField.\n        old_state (json): see StateField.\n        problem_id (str): Consists of the ID of the problem being reset.\n    \"\"\"\n\n    new_state: State\n    old_state: State\n    problem_id: constr(\n        regex=r\"^block-v1:[^\\/+]+(\\/|\\+)[^\\/+]+(\\/|\\+)[^\\/?]+\"  # noqa : F722\n        r\"type@problem\\+block@[a-f0-9]{32}$\"  # noqa : F722\n    )\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.problem_interaction.fields.events.ResetProblemFailEventField","title":"<code> ResetProblemFailEventField            (AbstractBaseEventField)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>event</code> field of <code>ResetProblemFail</code> model.</p> <p>Attributes:</p> Name Type Description <code>failure</code> <code>str</code> <p>Consists either of <code>closed</code> or <code>not_done</code> value.</p> <code>old_state</code> <code>json</code> <p>see StateField.</p> <code>problem_id</code> <code>str</code> <p>Consists of the ID of the problem being reset.</p> Source code in <code>ralph/models/edx/problem_interaction/fields/events.py</code> <pre><code>class ResetProblemFailEventField(AbstractBaseEventField):\n    \"\"\"Represents the `event` field of `ResetProblemFail` model.\n\n    Attributes:\n        failure (str): Consists either of `closed` or `not_done` value.\n        old_state (json): see StateField.\n        problem_id (str): Consists of the ID of the problem being reset.\n    \"\"\"\n\n    failure: Union[Literal[\"closed\"], Literal[\"not_done\"]]\n    old_state: State\n    problem_id: constr(\n        regex=r\"^block-v1:[^\\/+]+(\\/|\\+)[^\\/+]+(\\/|\\+)[^\\/?]+\"  # noqa : F722\n        r\"type@problem\\+block@[a-f0-9]{32}$\"  # noqa : F722\n    )\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.problem_interaction.fields.events.SaveProblemFailEventField","title":"<code> SaveProblemFailEventField            (AbstractBaseEventField)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>event</code> field of <code>SaveProblemFail</code> model.</p> <p>Attributes:</p> Name Type Description <code>answers</code> <code>dict</code> <p>Consists of a dict of the answer string or a list or a dict of the answer strings if multiple choices are allowed.</p> <code>failure</code> <code>str</code> <p>Consists either of <code>closed</code> or <code>done</code> value.</p> <code>problem_id</code> <code>str</code> <p>Consists of the ID of the problem being saved.</p> <code>state</code> <code>json</code> <p>see StateField.</p> Source code in <code>ralph/models/edx/problem_interaction/fields/events.py</code> <pre><code>class SaveProblemFailEventField(AbstractBaseEventField):\n    \"\"\"Represents the `event` field of `SaveProblemFail` model.\n\n    Attributes:\n        answers (dict): Consists of a dict of the answer string or a list or a dict of\n            the answer strings if multiple choices are allowed.\n        failure (str): Consists either of `closed` or `done` value.\n        problem_id (str): Consists of the ID of the problem being saved.\n        state (json): see StateField.\n    \"\"\"\n\n    answers: dict[str, Union[int, str, list, dict]]\n    failure: Union[Literal[\"closed\"], Literal[\"done\"]]\n    problem_id: constr(\n        regex=r\"^block-v1:[^\\/+]+(\\/|\\+)[^\\/+]+(\\/|\\+)[^\\/?]+\"  # noqa : F722\n        r\"type@problem\\+block@[a-f0-9]{32}$\"  # noqa : F722\n    )\n    state: State\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.problem_interaction.fields.events.SaveProblemSuccessEventField","title":"<code> SaveProblemSuccessEventField            (AbstractBaseEventField)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>event</code> field of <code>SaveProblemSuccess</code> model.</p> <p>Attributes:</p> Name Type Description <code>answers</code> <code>dict</code> <p>Consists of a dict of the answer string or a list or a dict of the answer strings if multiple choices are allowed.</p> <code>problem_id</code> <code>str</code> <p>Consists of the ID of the problem being saved.</p> <code>state</code> <code>json</code> <p>see StateField.</p> Source code in <code>ralph/models/edx/problem_interaction/fields/events.py</code> <pre><code>class SaveProblemSuccessEventField(AbstractBaseEventField):\n    \"\"\"Represents the `event` field of `SaveProblemSuccess` model.\n\n    Attributes:\n        answers (dict): Consists of a dict of the answer string or a list or a dict of\n            the answer strings if multiple choices are allowed.\n        problem_id (str): Consists of the ID of the problem being saved.\n        state (json): see StateField.\n    \"\"\"\n\n    answers: dict[str, Union[int, str, list, dict]]\n    problem_id: constr(\n        regex=r\"^block-v1:[^\\/+]+(\\/|\\+)[^\\/+]+(\\/|\\+)[^\\/?]+\"  # noqa : F722\n        r\"type@problem\\+block@[a-f0-9]{32}$\"  # noqa : F722\n    )\n    state: State\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.problem_interaction.fields.events.ShowAnswerEventField","title":"<code> ShowAnswerEventField            (AbstractBaseEventField)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>event</code> field of <code>ShowAnswer</code> model.</p> <p>Attributes:</p> Name Type Description <code>problem_id</code> <code>str</code> <p>Consists of the ID of the problem being shown.</p> Source code in <code>ralph/models/edx/problem_interaction/fields/events.py</code> <pre><code>class ShowAnswerEventField(AbstractBaseEventField):\n    \"\"\"Represents the `event` field of `ShowAnswer` model.\n\n    Attributes:\n        problem_id (str): Consists of the ID of the problem being shown.\n    \"\"\"\n\n    problem_id: constr(\n        regex=r\"^block-v1:[^\\/+]+(\\/|\\+)[^\\/+]+(\\/|\\+)[^\\/?]+\"  # noqa : F722\n        r\"type@problem\\+block@[a-f0-9]{32}$\"  # noqa : F722\n    )\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.problem_interaction.fields.events.State","title":"<code> State            (BaseModelWithConfig)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>state</code> sub-field.</p> <p>Attributes:</p> Name Type Description <code>correct_map</code> <code>dict</code> <p>see CorrectMapSubFields.</p> <code>done</code> <code>bool</code> <p><code>True</code> if the problem is answered, else <code>False</code>.</p> <code>input_state</code> <code>dict</code> <p>Consists of the state field given before answering.</p> <code>seed</code> <code>int</code> <p>Consists of the seed element for the current state.</p> <code>student_answers</code> <code>dict</code> <p>Consists of the answer(s) given by the user.</p> Source code in <code>ralph/models/edx/problem_interaction/fields/events.py</code> <pre><code>class State(BaseModelWithConfig):\n    \"\"\"Represents the `state` sub-field.\n\n    Attributes:\n        correct_map (dict): see CorrectMapSubFields.\n        done (bool): `True` if the problem is answered, else `False`.\n        input_state (dict): Consists of the state field given before answering.\n        seed (int): Consists of the seed element for the current state.\n        student_answers (dict): Consists of the answer(s) given by the user.\n    \"\"\"\n\n    correct_map: dict[\n        constr(regex=r\"^[a-f0-9]{32}_[0-9]_[0-9]$\"),  # noqa : F722\n        CorrectMap,\n    ]\n    done: Optional[bool]\n    input_state: dict\n    seed: int\n    student_answers: dict\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.problem_interaction.fields.events.SubmissionAnswerField","title":"<code> SubmissionAnswerField            (BaseModelWithConfig)         </code>  <code>pydantic-model</code>","text":"<p>Represents the information in a problem of <code>submission</code> field.</p> <p>Attributes:</p> Name Type Description <code>answer</code> <code>str, list</code> <p>Consists of the answer string or a list of the answer strings if multiple choices are allorwed.</p> <code>correct</code> <code>bool</code> <p><code>True</code> if the <code>answer</code> value is correct, else <code>False</code>.</p> <code>input_type</code> <code>str</code> <p>Consists of the type of value that the student supplies for the <code>response_type</code>.</p> <code>question</code> <code>str</code> <p>Consists of the question text.</p> <code>response_type</code> <code>str</code> <p>Consists of the type of problem.</p> <code>variant</code> <code>str</code> <p>Consists of the unique ID of the variant that was presented to this user.</p> Source code in <code>ralph/models/edx/problem_interaction/fields/events.py</code> <pre><code>class SubmissionAnswerField(BaseModelWithConfig):\n    \"\"\"Represents the information in a problem of `submission` field.\n\n    Attributes:\n        answer (str, list): Consists of the answer string or a list of the answer\n            strings if multiple choices are allorwed.\n        correct (bool): `True` if the `answer` value is correct, else `False`.\n        input_type (str): Consists of the type of value that the student supplies for\n            the `response_type`.\n        question (str): Consists of the question text.\n        response_type (str): Consists of the type of problem.\n        variant (str): Consists of the unique ID of the variant that was presented to\n            this user.\n    \"\"\"\n\n    answer: Union[str, list[str]]\n    correct: bool\n    input_type: str\n    question: str\n    response_type: str\n    variant: str\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.problem_interaction.fields.events.UIProblemResetEventField","title":"<code> UIProblemResetEventField            (AbstractBaseEventField)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>event</code> field of <code>ProblemReset</code> model.</p> <p>Attributes:</p> Name Type Description <code>answers</code> <code>str, list</code> <p>Consists of the answer string or a list of the answer strings if multiple choices are allowed.</p> Source code in <code>ralph/models/edx/problem_interaction/fields/events.py</code> <pre><code>class UIProblemResetEventField(AbstractBaseEventField):\n    \"\"\"Represents the `event` field of `ProblemReset` model.\n\n    Attributes:\n        answers (str, list): Consists of the answer string or a list of the answer\n            strings if multiple choices are allowed.\n    \"\"\"\n\n    answers: Union[str, list[str]]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.problem_interaction.fields.events.UIProblemShowEventField","title":"<code> UIProblemShowEventField            (AbstractBaseEventField)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>event</code> field of <code>ProblemShow</code> model.</p> <p>Attributes:</p> Name Type Description <code>problem</code> <code>str</code> <p>Consists of the optional name value that the course creators supply or the system-generated hash code for the problem being shown.</p> Source code in <code>ralph/models/edx/problem_interaction/fields/events.py</code> <pre><code>class UIProblemShowEventField(AbstractBaseEventField):\n    \"\"\"Represents the `event` field of `ProblemShow` model.\n\n    Attributes:\n        problem (str): Consists of the optional name value that the course creators\n            supply or the system-generated hash code for the problem being shown.\n    \"\"\"\n\n    problem: str\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.problem_interaction.statements","title":"<code>statements</code>","text":"<p>Problem interaction events model definitions</p>"},{"location":"models/edx/#ralph.models.edx.problem_interaction.statements.EdxProblemHintDemandhintDisplayed","title":"<code> EdxProblemHintDemandhintDisplayed            (BaseServerModel)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>edx.problem.hint.demandhint_displayed</code> server event.</p> <p>This event is triggered when a user requests a hint for a problem.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>dict</code> <p>See EdxProblemHintDemandhintDisplayedEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>edx.problem.hint.demandhint_displayed</code>.</p> <code>page</code> <code>str</code> <p>Consists of the value <code>x_module</code>.</p> Source code in <code>ralph/models/edx/problem_interaction/statements.py</code> <pre><code>class EdxProblemHintDemandhintDisplayed(BaseServerModel):\n    \"\"\"Represents the `edx.problem.hint.demandhint_displayed` server event.\n\n    This event is triggered when a user requests a hint for a problem.\n\n    Attributes:\n        event (dict): See EdxProblemHintDemandhintDisplayedEventField.\n        event_type (str): Consists of the value `edx.problem.hint.demandhint_displayed`.\n        page (str): Consists of the value `x_module`.\n    \"\"\"\n\n    __selector__ = selector(\n        event_source=\"server\", event_type=\"edx.problem.hint.demandhint_displayed\"\n    )\n\n    event: EdxProblemHintDemandhintDisplayedEventField\n    event_type: Literal[\"edx.problem.hint.demandhint_displayed\"]\n    page: Literal[\"x_module\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.problem_interaction.statements.EdxProblemHintFeedbackDisplayed","title":"<code> EdxProblemHintFeedbackDisplayed            (BaseServerModel)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>edx.problem.hint.feedback_displayed</code> server event.</p> <p>This event is triggered when a user receives a hint after answering a problem.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>dict</code> <p>See EdxProblemHintFeedbackDisplayedEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>edx.problem.hint.feedback_displayed</code>.</p> <code>page</code> <code>str</code> <p>Consists of the value <code>x_module</code>.</p> Source code in <code>ralph/models/edx/problem_interaction/statements.py</code> <pre><code>class EdxProblemHintFeedbackDisplayed(BaseServerModel):\n    \"\"\"Represents the `edx.problem.hint.feedback_displayed` server event.\n\n    This event is triggered when a user receives a hint after answering a problem.\n\n    Attributes:\n        event (dict): See EdxProblemHintFeedbackDisplayedEventField.\n        event_type (str): Consists of the value `edx.problem.hint.feedback_displayed`.\n        page (str): Consists of the value `x_module`.\n    \"\"\"\n\n    __selector__ = selector(\n        event_source=\"server\", event_type=\"edx.problem.hint.feedback_displayed\"\n    )\n\n    event: EdxProblemHintFeedbackDisplayedEventField\n    event_type: Literal[\"edx.problem.hint.feedback_displayed\"]\n    page: Literal[\"x_module\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.problem_interaction.statements.ProblemCheck","title":"<code> ProblemCheck            (BaseServerModel)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>problem_check</code> server event.</p> <p>This event is triggered when a user checks a problem.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>dict</code> <p>See ProblemCheckEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>problem_check</code>.</p> <code>page</code> <code>str</code> <p>Consists of the value <code>x_module</code>.</p> Source code in <code>ralph/models/edx/problem_interaction/statements.py</code> <pre><code>class ProblemCheck(BaseServerModel):\n    \"\"\"Represents the `problem_check` server event.\n\n    This event is triggered when a user checks a problem.\n\n    Attributes:\n        event (dict): See ProblemCheckEventField.\n        event_type (str): Consists of the value `problem_check`.\n        page (str): Consists of the value `x_module`.\n    \"\"\"\n\n    __selector__ = selector(event_source=\"server\", event_type=\"problem_check\")\n\n    event: ProblemCheckEventField\n    event_type: Literal[\"problem_check\"]\n    page: Literal[\"x_module\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.problem_interaction.statements.ProblemCheckFail","title":"<code> ProblemCheckFail            (BaseServerModel)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>problem_check_fail</code> server event.</p> <p>This event is triggered when a user checks a problem and a failure prevents the problem from being checked successfully.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>dict</code> <p>See ProblemCheckFailEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>problem_check_fail</code>.</p> <code>page</code> <code>str</code> <p>Consists of the value <code>x_module</code>.</p> Source code in <code>ralph/models/edx/problem_interaction/statements.py</code> <pre><code>class ProblemCheckFail(BaseServerModel):\n    \"\"\"Represents the `problem_check_fail` server event.\n\n    This event is triggered when a user checks a problem and a failure prevents the\n    problem from being checked successfully.\n\n    Attributes:\n        event (dict): See ProblemCheckFailEventField.\n        event_type (str): Consists of the value `problem_check_fail`.\n        page (str): Consists of the value `x_module`.\n    \"\"\"\n\n    __selector__ = selector(event_source=\"server\", event_type=\"problem_check_fail\")\n\n    event: ProblemCheckFailEventField\n    event_type: Literal[\"problem_check_fail\"]\n    page: Literal[\"x_module\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.problem_interaction.statements.ProblemRescore","title":"<code> ProblemRescore            (BaseServerModel)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>problem_rescore</code> server event.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>dict</code> <p>See ProblemRescoreEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>problem_rescore</code>.</p> <code>page</code> <code>str</code> <p>Consists of the value <code>x_module</code>.</p> Source code in <code>ralph/models/edx/problem_interaction/statements.py</code> <pre><code>class ProblemRescore(BaseServerModel):\n    \"\"\"Represents the `problem_rescore` server event.\n\n    Attributes:\n        event (dict): See ProblemRescoreEventField.\n        event_type (str): Consists of the value `problem_rescore`.\n        page (str): Consists of the value `x_module`.\n    \"\"\"\n\n    __selector__ = selector(event_source=\"server\", event_type=\"problem_rescore\")\n\n    event: ProblemRescoreEventField\n    event_type: Literal[\"problem_rescore\"]\n    page: Literal[\"x_module\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.problem_interaction.statements.ProblemRescoreFail","title":"<code> ProblemRescoreFail            (BaseServerModel)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>problem_rescore_fail</code> server event.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>dict</code> <p>See ProblemRescoreFailEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>problem_rescore_fail</code>.</p> <code>page</code> <code>str</code> <p>Consists of the value <code>x_module</code>.</p> Source code in <code>ralph/models/edx/problem_interaction/statements.py</code> <pre><code>class ProblemRescoreFail(BaseServerModel):\n    \"\"\"Represents the `problem_rescore_fail` server event.\n\n    Attributes:\n        event (dict): See ProblemRescoreFailEventField.\n        event_type (str): Consists of the value `problem_rescore_fail`.\n        page (str): Consists of the value `x_module`.\n    \"\"\"\n\n    __selector__ = selector(event_source=\"server\", event_type=\"problem_rescore_fail\")\n\n    event: ProblemRescoreFailEventField\n    event_type: Literal[\"problem_rescore_fail\"]\n    page: Literal[\"x_module\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.problem_interaction.statements.ResetProblem","title":"<code> ResetProblem            (BaseServerModel)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>reset_problem</code> server event.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>dict</code> <p>See ResetProblemEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>reset_problem</code>.</p> <code>page</code> <code>str</code> <p>Consists of the value <code>x_module</code>.</p> Source code in <code>ralph/models/edx/problem_interaction/statements.py</code> <pre><code>class ResetProblem(BaseServerModel):\n    \"\"\"Represents the `reset_problem` server event.\n\n    Attributes:\n        event (dict): See ResetProblemEventField.\n        event_type (str): Consists of the value `reset_problem`.\n        page (str): Consists of the value `x_module`.\n    \"\"\"\n\n    __selector__ = selector(event_source=\"server\", event_type=\"reset_problem\")\n\n    event: ResetProblemEventField\n    event_type: Literal[\"reset_problem\"]\n    page: Literal[\"x_module\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.problem_interaction.statements.ResetProblemFail","title":"<code> ResetProblemFail            (BaseServerModel)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>reset_problem_fail</code> server event.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>dict</code> <p>See ResetProblemFailEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>reset_problem_fail</code>.</p> <code>page</code> <code>str</code> <p>Consists of the value <code>x_module</code>.</p> Source code in <code>ralph/models/edx/problem_interaction/statements.py</code> <pre><code>class ResetProblemFail(BaseServerModel):\n    \"\"\"Represents the `reset_problem_fail` server event.\n\n    Attributes:\n        event (dict): See ResetProblemFailEventField.\n        event_type (str): Consists of the value `reset_problem_fail`.\n        page (str): Consists of the value `x_module`.\n    \"\"\"\n\n    __selector__ = selector(event_source=\"server\", event_type=\"reset_problem_fail\")\n\n    event: ResetProblemFailEventField\n    event_type: Literal[\"reset_problem_fail\"]\n    page: Literal[\"x_module\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.problem_interaction.statements.SaveProblemFail","title":"<code> SaveProblemFail            (BaseServerModel)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>save_problem_fail</code> server event.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>dict</code> <p>See SaveProblemFailEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>save_problem_fail</code>.</p> <code>page</code> <code>str</code> <p>Consists of the value <code>x_module</code>.</p> Source code in <code>ralph/models/edx/problem_interaction/statements.py</code> <pre><code>class SaveProblemFail(BaseServerModel):\n    \"\"\"Represents the `save_problem_fail` server event.\n\n    Attributes:\n        event (dict): See SaveProblemFailEventField.\n        event_type (str): Consists of the value `save_problem_fail`.\n        page (str): Consists of the value `x_module`.\n    \"\"\"\n\n    __selector__ = selector(event_source=\"server\", event_type=\"save_problem_fail\")\n\n    event: SaveProblemFailEventField\n    event_type: Literal[\"save_problem_fail\"]\n    page: Literal[\"x_module\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.problem_interaction.statements.SaveProblemSuccess","title":"<code> SaveProblemSuccess            (BaseServerModel)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>save_problem_success</code> server event.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>dict</code> <p>See SaveProblemSuccessEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>save_problem_success</code>.</p> <code>page</code> <code>str</code> <p>Consists of the value <code>x_module</code>.</p> Source code in <code>ralph/models/edx/problem_interaction/statements.py</code> <pre><code>class SaveProblemSuccess(BaseServerModel):\n    \"\"\"Represents the `save_problem_success` server event.\n\n    Attributes:\n        event (dict): See SaveProblemSuccessEventField.\n        event_type (str): Consists of the value `save_problem_success`.\n        page (str): Consists of the value `x_module`.\n    \"\"\"\n\n    __selector__ = selector(event_source=\"server\", event_type=\"save_problem_success\")\n\n    event: SaveProblemSuccessEventField\n    event_type: Literal[\"save_problem_success\"]\n    page: Literal[\"x_module\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.problem_interaction.statements.ShowAnswer","title":"<code> ShowAnswer            (BaseServerModel)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>showanswer</code> server event.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>dict</code> <p>See ShowAnswerEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>showanswer</code>.</p> <code>page</code> <code>str</code> <p>Consists of the value <code>x_module</code>.</p> Source code in <code>ralph/models/edx/problem_interaction/statements.py</code> <pre><code>class ShowAnswer(BaseServerModel):\n    \"\"\"Represents the `showanswer` server event.\n\n    Attributes:\n        event (dict): See ShowAnswerEventField.\n        event_type (str): Consists of the value `showanswer`.\n        page (str): Consists of the value `x_module`.\n    \"\"\"\n\n    __selector__ = selector(event_source=\"server\", event_type=\"showanswer\")\n\n    event: ShowAnswerEventField\n    event_type: Literal[\"showanswer\"]\n    page: Literal[\"x_module\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.problem_interaction.statements.UIProblemCheck","title":"<code> UIProblemCheck            (BaseBrowserModel)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>problem_check</code> browser event.</p> <p>The browser emits this event when a user checks a problem.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>str</code> <p>Consists of values of problem being checked, styled as <code>GET</code> parameters.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>problem_check</code>.</p> <code>name</code> <code>str</code> <p>Consists of the value <code>problem_check</code>.</p> Source code in <code>ralph/models/edx/problem_interaction/statements.py</code> <pre><code>class UIProblemCheck(BaseBrowserModel):\n    \"\"\"Represents the `problem_check` browser event.\n\n    The browser emits this event when a user checks a problem.\n\n    Attributes:\n        event (str): Consists of values of problem being checked, styled as `GET`\n            parameters.\n        event_type (str): Consists of the value `problem_check`.\n        name (str): Consists of the value `problem_check`.\n    \"\"\"\n\n    __selector__ = selector(event_source=\"browser\", event_type=\"problem_check\")\n\n    event: str\n    event_type: Literal[\"problem_check\"]\n    name: Literal[\"problem_check\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.problem_interaction.statements.UIProblemGraded","title":"<code> UIProblemGraded            (BaseBrowserModel)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>problem_graded</code> browser event.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>list</code> <p>See ProblemGradedEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>problem_graded</code>.</p> <code>name</code> <code>str</code> <p>Consists of the value <code>problem_graded</code>.</p> Source code in <code>ralph/models/edx/problem_interaction/statements.py</code> <pre><code>class UIProblemGraded(BaseBrowserModel):\n    \"\"\"Represents the `problem_graded` browser event.\n\n    Attributes:\n        event (list): See ProblemGradedEventField.\n        event_type (str): Consists of the value `problem_graded`.\n        name (str): Consists of the value `problem_graded`.\n    \"\"\"\n\n    __selector__ = selector(event_source=\"browser\", event_type=\"problem_graded\")\n\n    event: list[Union[str, Literal[None], None]]\n    event_type: Literal[\"problem_graded\"]\n    name: Literal[\"problem_graded\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.problem_interaction.statements.UIProblemReset","title":"<code> UIProblemReset            (BaseBrowserModel)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>problem_reset</code> browser event.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>json</code> <p>See ProblemResetEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>problem_reset</code>.</p> <code>name</code> <code>str</code> <p>Consists of the value <code>problem_reset</code>.</p> Source code in <code>ralph/models/edx/problem_interaction/statements.py</code> <pre><code>class UIProblemReset(BaseBrowserModel):\n    \"\"\"Represents the `problem_reset` browser event.\n\n    Attributes:\n        event (json): See ProblemResetEventField.\n        event_type (str): Consists of the value `problem_reset`.\n        name (str): Consists of the value `problem_reset`.\n    \"\"\"\n\n    __selector__ = selector(event_source=\"browser\", event_type=\"problem_reset\")\n\n    event: Union[\n        str,\n        Json[UIProblemResetEventField],  # pylint: disable=unsubscriptable-object\n        UIProblemResetEventField,\n    ]\n    event_type: Literal[\"problem_reset\"]\n    name: Literal[\"problem_reset\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.problem_interaction.statements.UIProblemSave","title":"<code> UIProblemSave            (BaseBrowserModel)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>problem_save</code> browser event.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>str</code> <p>Consists of all the answers saved for the problem.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>problem_save</code>.</p> <code>name</code> <code>str</code> <p>Consists of the value <code>problem_save</code>.</p> Source code in <code>ralph/models/edx/problem_interaction/statements.py</code> <pre><code>class UIProblemSave(BaseBrowserModel):\n    \"\"\"Represents the `problem_save` browser event.\n\n    Attributes:\n        event (str): Consists of all the answers saved for the problem.\n        event_type (str): Consists of the value `problem_save`.\n        name (str): Consists of the value `problem_save`.\n    \"\"\"\n\n    __selector__ = selector(event_source=\"browser\", event_type=\"problem_save\")\n\n    event: str\n    event_type: Literal[\"problem_save\"]\n    name: Literal[\"problem_save\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.problem_interaction.statements.UIProblemShow","title":"<code> UIProblemShow            (BaseBrowserModel)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>problem_show</code> browser event.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>json</code> <p>See ProblemShowEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>problem_save</code>.</p> <code>name</code> <code>str</code> <p>Consists of the value <code>problem_save</code>.</p> Source code in <code>ralph/models/edx/problem_interaction/statements.py</code> <pre><code>class UIProblemShow(BaseBrowserModel):\n    \"\"\"Represents the `problem_show` browser event.\n\n    Attributes:\n        event (json): See ProblemShowEventField.\n        event_type (str): Consists of the value `problem_save`.\n        name (str): Consists of the value `problem_save`.\n    \"\"\"\n\n    __selector__ = selector(event_source=\"browser\", event_type=\"problem_show\")\n\n    event: Union[\n        Json[UIProblemShowEventField],  # pylint: disable=unsubscriptable-object\n        UIProblemShowEventField,\n    ]\n    event_type: Literal[\"problem_show\"]\n    name: Literal[\"problem_show\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.server","title":"<code>server</code>","text":"<p>Server event model definitions</p>"},{"location":"models/edx/#ralph.models.edx.server.BaseServerModel","title":"<code> BaseServerModel            (BaseEdxModel)         </code>  <code>pydantic-model</code>","text":"<p>Represents the base model all server statements inherit from.</p> Source code in <code>ralph/models/edx/server.py</code> <pre><code>class BaseServerModel(BaseEdxModel):\n    \"\"\"Represents the base model all server statements inherit from.\"\"\"\n\n    event_source: Literal[\"server\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.server.Server","title":"<code> Server            (BaseServerModel)         </code>  <code>pydantic-model</code>","text":"<p>Represents a common server statement.</p> <p>This type of event is triggered from the django middleware on each request excluding: <code>/event</code>, <code>login</code>, <code>heartbeat</code>, <code>/segmentio/event</code> and <code>/performance</code>.</p> <p>Attributes:</p> Name Type Description <code>event_type</code> <code>str</code> <p>Consist of the relative URL (without the hostname) of the requested page. Retrieved with:     <code>request.META['PATH_INFO']</code></p> <code>event</code> <code>str</code> <p>Consist of a JSON string holding the content of the GET or POST request. Retrieved with:     <code>json.dumps(         {             'GET': dict(request.GET),             'POST': dict(request.POST)         }     )[:512]</code> Note:     Values for [\u2018password\u2019, \u2018newpassword\u2019, \u2018new_password\u2019, \u2018oldpassword\u2019,     \u2018old_password\u2019, \u2018new_password1\u2019, \u2018new_password2\u2019] are replaced by     <code>********</code>.     The JSON string is truncated at 512 characters resulting in invalid     JSON.</p> Source code in <code>ralph/models/edx/server.py</code> <pre><code>class Server(BaseServerModel):\n    \"\"\"Represents a common server statement.\n\n    This type of event is triggered from the django middleware on each request\n    excluding: `/event`, `login`, `heartbeat`, `/segmentio/event` and `/performance`.\n\n    Attributes:\n        event_type (str): Consist of the relative URL (without the hostname) of the\n            requested page.\n            Retrieved with:\n                `request.META['PATH_INFO']`\n        event (str): Consist of a JSON string holding the content of the GET or POST\n            request.\n            Retrieved with:\n                ```json.dumps(\n                    {\n                        'GET': dict(request.GET),\n                        'POST': dict(request.POST)\n                    }\n                )[:512]```\n            Note:\n                Values for ['password', 'newpassword', 'new_password', 'oldpassword',\n                'old_password', 'new_password1', 'new_password2'] are replaced by\n                `********`.\n                The JSON string is truncated at 512 characters resulting in invalid\n                JSON.\n    \"\"\"\n\n    __selector__ = selector(\n        event_source=\"server\", event_type=LazyModelField(\"context__path\")\n    )\n\n    # pylint: disable=unsubscriptable-object\n    event_type: Path\n    event: Union[Json[ServerEventField], ServerEventField]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.server.ServerEventField","title":"<code> ServerEventField            (AbstractBaseEventField)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>event</code> field of the ServerEventModel.</p> Source code in <code>ralph/models/edx/server.py</code> <pre><code>class ServerEventField(AbstractBaseEventField):\n    \"\"\"Represents the `event` field of the ServerEventModel.\"\"\"\n\n    GET: dict\n    POST: dict\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.textbook_interaction","title":"<code>textbook_interaction</code>  <code>special</code>","text":""},{"location":"models/edx/#ralph.models.edx.textbook_interaction.fields","title":"<code>fields</code>  <code>special</code>","text":""},{"location":"models/edx/#ralph.models.edx.textbook_interaction.fields.events","title":"<code>events</code>","text":"<p>Textbook interaction event fields definitions</p>"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.fields.events.BookEventField","title":"<code> BookEventField            (AbstractBaseEventField)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>book</code> event field.</p> <p>Attributes:</p> Name Type Description <code>chapter</code> <code>str</code> <p>Consists of the name of the PDF file.</p> <code>name</code> <code>str</code> <p>Consists of <code>textbook.pdf.page.loaded</code> if type is set to <code>gotopage</code>, <code>textbook.pdf.page.navigatednext</code> if type is set to <code>prevpage</code>, <code>textbook.pdf.page.navigatednext</code> if type is set to <code>nextpage</code>.</p> <code>new</code> <code>int</code> <p>Consists of the destination page number.</p> <code>old</code> <code>int</code> <p>Consists of the original page number. It applies to <code>gotopage</code> event types only.</p> <code>type</code> <code>str</code> <p>Consists of <code>gotopage</code> value when a page loads after the student manually enters its number, <code>prevpage</code> value when the next page button is clicked or <code>nextpage</code> value when the previous page button is clicked.</p> Source code in <code>ralph/models/edx/textbook_interaction/fields/events.py</code> <pre><code>class BookEventField(AbstractBaseEventField):\n    \"\"\"Represents the `book` event field.\n\n    Attributes:\n        chapter (str): Consists of the name of the PDF file.\n        name (str): Consists of `textbook.pdf.page.loaded` if type is set to\n            `gotopage`,\n            `textbook.pdf.page.navigatednext` if type is set to `prevpage`,\n            `textbook.pdf.page.navigatednext` if type is set to `nextpage`.\n        new (int): Consists of the destination page number.\n        old (int): Consists of the original page number. It applies to `gotopage` event\n            types only.\n        type (str): Consists of `gotopage` value when a page loads after the student\n            manually enters its number, `prevpage` value when the next page button is\n            clicked or `nextpage` value when the previous page button is clicked.\n    \"\"\"\n\n    chapter: constr(\n        regex=(\n            r\"^\\/asset-v1:[^\\/+]+(\\/|\\+)[^\\/+]+(\\/|\\+)[^\\/?]+type@asset\\+block.+$\"  # noqa\n        )\n    )\n    name: Union[\n        Literal[\"textbook.pdf.page.loaded\"], Literal[\"textbook.pdf.page.navigatednext\"]\n    ]\n    new: int\n    old: Optional[int]\n    type: Union[Literal[\"gotopage\"], Literal[\"prevpage\"], Literal[\"nextpage\"]] = Field(\n        alias=\"type\"\n    )\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.fields.events.TextbookInteractionBaseEventField","title":"<code> TextbookInteractionBaseEventField            (AbstractBaseEventField)         </code>  <code>pydantic-model</code>","text":"<p>Represents the event field which attributes are common to most of the textbook interaction events.</p> <p>Attributes:</p> Name Type Description <code>chapter</code> <code>str</code> <p>Consists of the name of the PDF file. It begins with the <code>block_id</code> value and ends with the <code>.pdf</code> extension.</p> <code>page</code> <code>int</code> <p>The number of the page that is open when the event is emitted.</p> Source code in <code>ralph/models/edx/textbook_interaction/fields/events.py</code> <pre><code>class TextbookInteractionBaseEventField(AbstractBaseEventField):\n    \"\"\"Represents the event field which attributes are common to most of the textbook\n    interaction events.\n\n    Attributes:\n        chapter (str): Consists of the name of the PDF file.\n            It begins with the `block_id` value and ends with the `.pdf` extension.\n        page (int): The number of the page that is open when the event is emitted.\n    \"\"\"\n\n    page: int\n    chapter: constr(\n        regex=(\n            r\"^\\/asset-v1:[^\\/+]+(\\/|\\+)[^\\/+]+(\\/|\\+)[^\\/?]+type@asset\\+block.+$\"  # noqa\n        )\n    )\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.fields.events.TextbookPdfChapterNavigatedEventField","title":"<code> TextbookPdfChapterNavigatedEventField            (AbstractBaseEventField)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>textbook.pdf.chapter.navigated</code> event field.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Consists of the value <code>textbook.pdf.chapter.navigated</code>.</p> <code>chapter</code> <code>str</code> <p>Consists of the name of the PDF file. It begins with the <code>block_id</code> value and ends with the <code>.pdf</code> extension.</p> Source code in <code>ralph/models/edx/textbook_interaction/fields/events.py</code> <pre><code>class TextbookPdfChapterNavigatedEventField(AbstractBaseEventField):\n    \"\"\"Represents the `textbook.pdf.chapter.navigated` event field.\n\n    Attributes:\n        name (str): Consists of the value `textbook.pdf.chapter.navigated`.\n        chapter (str): Consists of the name of the PDF file.\n            It begins with the `block_id` value and ends with the `.pdf` extension.\n    \"\"\"\n\n    name: Literal[\"textbook.pdf.chapter.navigated\"]\n    chapter: constr(\n        regex=(\n            r\"^\\/asset-v1:[^\\/+]+(\\/|\\+)[^\\/+]+(\\/|\\+)[^\\/?]+type@asset\\+block.+$\"  # noqa\n        )\n    )\n    chapter_title: str\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.fields.events.TextbookPdfDisplayScaledEventField","title":"<code> TextbookPdfDisplayScaledEventField            (TextbookInteractionBaseEventField)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>textbook.pdf.display.scaled</code> event field.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Consists of the value <code>textbook.pdf.display.scaled</code>.</p> <code>amount</code> <code>str</code> <p>Consists of a floating point number string value.</p> Source code in <code>ralph/models/edx/textbook_interaction/fields/events.py</code> <pre><code>class TextbookPdfDisplayScaledEventField(TextbookInteractionBaseEventField):\n    \"\"\"Represents the `textbook.pdf.display.scaled` event field.\n\n    Attributes:\n        name (str): Consists of the value `textbook.pdf.display.scaled`.\n        amount (str): Consists of a floating point number string value.\n    \"\"\"\n\n    name: Literal[\"textbook.pdf.display.scaled\"]\n    amount: float\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.fields.events.TextbookPdfOutlineToggledEventField","title":"<code> TextbookPdfOutlineToggledEventField            (TextbookInteractionBaseEventField)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>textbook.pdf.outline.toggled</code> event field.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Consists of the value <code>textbook.pdf.outline.toggled</code>.</p> Source code in <code>ralph/models/edx/textbook_interaction/fields/events.py</code> <pre><code>class TextbookPdfOutlineToggledEventField(TextbookInteractionBaseEventField):\n    \"\"\"Represents the `textbook.pdf.outline.toggled` event field.\n\n    Attribute:\n        name (str): Consists of the value `textbook.pdf.outline.toggled`.\n    \"\"\"\n\n    name: Literal[\"textbook.pdf.outline.toggled\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.fields.events.TextbookPdfPageNavigatedEventField","title":"<code> TextbookPdfPageNavigatedEventField            (TextbookInteractionBaseEventField)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>textbook.pdf.page.navigated</code> event field.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Consists of the value <code>textbook.pdf.page.navigated</code>.</p> Source code in <code>ralph/models/edx/textbook_interaction/fields/events.py</code> <pre><code>class TextbookPdfPageNavigatedEventField(TextbookInteractionBaseEventField):\n    \"\"\"Represents the `textbook.pdf.page.navigated` event field.\n\n    Attribute:\n        name (str): Consists of the value `textbook.pdf.page.navigated`.\n    \"\"\"\n\n    name: Literal[\"textbook.pdf.page.navigated\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.fields.events.TextbookPdfPageScrolledEventField","title":"<code> TextbookPdfPageScrolledEventField            (TextbookInteractionBaseEventField)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>textbook.pdf.page.scrolled</code> event field.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Consists of the value <code>textbook.pdf.page.scrolled</code>.</p> <code>direction</code> <code>str</code> <p>Consists either of the <code>up</code> or <code>down</code> value.</p> Source code in <code>ralph/models/edx/textbook_interaction/fields/events.py</code> <pre><code>class TextbookPdfPageScrolledEventField(TextbookInteractionBaseEventField):\n    \"\"\"Represents the `textbook.pdf.page.scrolled` event field.\n\n    Attributes:\n        name (str): Consists of the value `textbook.pdf.page.scrolled`.\n        direction (str): Consists either of the `up` or `down` value.\n    \"\"\"\n\n    name: Literal[\"textbook.pdf.page.scrolled\"]\n    direction: Union[Literal[\"up\"], Literal[\"down\"]]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.fields.events.TextbookPdfSearchCaseSensitivityToggledEventField","title":"<code> TextbookPdfSearchCaseSensitivityToggledEventField            (TextbookInteractionBaseEventField)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>textbook.pdf.searchcasesensitivity.toggled</code> event field.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Consists of the value <code>textbook.pdf.searchcasesensitivity.toggled</code>.</p> <code>caseSensitive</code> <code>bool</code> <p>Consists either of the <code>true</code> value if the case sensitive option is selected or <code>false</code> if this option is not selected.</p> <code>highlightAll</code> <code>bool</code> <p>Consists either of the <code>true</code> value if the option to highlight all matches is selected or <code>false</code> if this option is not selected.</p> <code>query</code> <code>str</code> <p>Consists of the value in the search field.</p> <code>status</code> <code>str</code> <p>Consists either of the value <code>not found</code> for a search string that is unsuccessful or blank for successful search strings.</p> Source code in <code>ralph/models/edx/textbook_interaction/fields/events.py</code> <pre><code>class TextbookPdfSearchCaseSensitivityToggledEventField(\n    TextbookInteractionBaseEventField\n):\n    \"\"\"Represents the `textbook.pdf.searchcasesensitivity.toggled` event field.\n\n    Attributes:\n        name (str): Consists of the value `textbook.pdf.searchcasesensitivity.toggled`.\n        caseSensitive (bool): Consists either of the `true` value if the case sensitive\n            option is selected or `false` if this option is not selected.\n        highlightAll (bool): Consists either of the `true` value if the option to\n            highlight all matches is selected or `false` if this option is not selected.\n        query (str): Consists of the value in the search field.\n        status (str): Consists either of the value `not found` for a search string that\n            is unsuccessful or blank for successful search strings.\n    \"\"\"\n\n    name: Literal[\"textbook.pdf.searchcasesensitivity.toggled\"]\n    caseSensitive: bool\n    highlightAll: bool\n    query: str\n    status: str\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.fields.events.TextbookPdfSearchExecutedEventField","title":"<code> TextbookPdfSearchExecutedEventField            (TextbookInteractionBaseEventField)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>textbook.pdf.search.executed</code> event field.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Consists of the value <code>textbook.pdf.search.executed</code>.</p> <code>caseSensitive</code> <code>bool</code> <p>Consists either of the <code>true</code> value if the case sensitive option is selected or <code>false</code> if this option is not selected.</p> <code>highlightAll</code> <code>bool</code> <p>Consists either of the <code>true</code> value if the option to highlight all matches is selected or <code>false</code> if this option is not selected.</p> <code>query</code> <code>str</code> <p>Consists of the value in the search field.</p> <code>status</code> <code>str</code> <p>Consists either of the value <code>not found</code> for a search string that is unsuccessful or blank for successful search strings.</p> Source code in <code>ralph/models/edx/textbook_interaction/fields/events.py</code> <pre><code>class TextbookPdfSearchExecutedEventField(TextbookInteractionBaseEventField):\n    \"\"\"Represents the `textbook.pdf.search.executed` event field.\n\n    Attributes:\n        name (str): Consists of the value `textbook.pdf.search.executed`.\n        caseSensitive (bool): Consists either of the `true` value if the case sensitive\n            option is selected or `false` if this option is not selected.\n        highlightAll (bool): Consists either of the `true` value if the option to\n            highlight all matches is selected or `false` if this option is not selected.\n        query (str): Consists of the value in the search field.\n        status (str): Consists either of the value `not found` for a search string that\n            is unsuccessful or blank for successful search strings.\n    \"\"\"\n\n    name: Literal[\"textbook.pdf.search.executed\"]\n    caseSensitive: bool\n    highlightAll: bool\n    query: str\n    status: str\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.fields.events.TextbookPdfSearchHighlightToggledEventField","title":"<code> TextbookPdfSearchHighlightToggledEventField            (TextbookInteractionBaseEventField)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>textbook.pdf.search.highlight.toggled</code> event field.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Consists of the value <code>textbook.pdf.search.highlight.toggled</code>.</p> <code>caseSensitive</code> <code>bool</code> <p>Consists either of the <code>true</code> value if the case sensitive option is selected or <code>false</code> if this option is not selected.</p> <code>highlightAll</code> <code>bool</code> <p>Consists either of the <code>true</code> value if the option to highlight all matches is selected or <code>false</code> if this option is not selected.</p> <code>query</code> <code>str</code> <p>Consists of the value in the search field.</p> <code>status</code> <code>str</code> <p>Consists either of the value <code>not found</code> for a search string that is unsuccessful or blank for successful search strings.</p> Source code in <code>ralph/models/edx/textbook_interaction/fields/events.py</code> <pre><code>class TextbookPdfSearchHighlightToggledEventField(TextbookInteractionBaseEventField):\n    \"\"\"Represents the `textbook.pdf.search.highlight.toggled` event field.\n\n    Attributes:\n        name (str): Consists of the value `textbook.pdf.search.highlight.toggled`.\n        caseSensitive (bool): Consists either of the `true` value if the case sensitive\n            option is selected or `false` if this option is not selected.\n        highlightAll (bool): Consists either of the `true` value if the option to\n            highlight all matches is selected or `false` if this option is not selected.\n        query (str): Consists of the value in the search field.\n        status (str): Consists either of the value `not found` for a search string that\n            is unsuccessful or blank for successful search strings.\n    \"\"\"\n\n    name: Literal[\"textbook.pdf.search.highlight.toggled\"]\n    caseSensitive: bool\n    highlightAll: bool\n    query: str\n    status: str\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.fields.events.TextbookPdfSearchNavigatedNextEventField","title":"<code> TextbookPdfSearchNavigatedNextEventField            (TextbookInteractionBaseEventField)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>textbook.pdf.search.navigatednext</code> event field.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Consists of the value <code>textbook.pdf.search.navigatednext</code>.</p> <code>caseSensitive</code> <code>bool</code> <p>Consists either of the <code>true</code> value if the case sensitive option is selected or <code>false</code> if this option is not selected.</p> <code>findPrevious(bool)</code> <p>Consists either of the \u2018true\u2019 value if the user clicks the Find Previous icon or \u2018false\u2019 if the user clicks the Find Next icon.</p> <code>highlightAll</code> <code>bool</code> <p>Consists either of the <code>true</code> value if the option to highlight all matches is selected or <code>false</code> if this option is not selected.</p> <code>query</code> <code>str</code> <p>Consists of the value in the search field.</p> <code>status</code> <code>str</code> <p>Consists either of the value <code>not found</code> for a search string that is unsuccessful or blank for successful search strings.</p> Source code in <code>ralph/models/edx/textbook_interaction/fields/events.py</code> <pre><code>class TextbookPdfSearchNavigatedNextEventField(TextbookInteractionBaseEventField):\n    \"\"\"Represents the `textbook.pdf.search.navigatednext` event field.\n\n    Attributes:\n        name (str): Consists of the value `textbook.pdf.search.navigatednext`.\n        caseSensitive (bool): Consists either of the `true` value if the case sensitive\n            option is selected or `false` if this option is not selected.\n        findPrevious(bool): Consists either of the \u2018true\u2019 value if the user clicks the\n            Find Previous icon or \u2018false\u2019 if the user clicks the &lt;kbd&gt;Find Next&lt;/kbd&gt;\n            icon.\n        highlightAll (bool): Consists either of the `true` value if the option to\n            highlight all matches is selected or `false` if this option is not selected.\n        query (str): Consists of the value in the search field.\n        status (str): Consists either of the value `not found` for a search string that\n            is unsuccessful or blank for successful search strings.\n    \"\"\"\n\n    name: Literal[\"textbook.pdf.search.navigatednext\"]\n    caseSensitive: bool\n    findPrevious: bool\n    highlightAll: bool\n    query: str\n    status: str\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.fields.events.TextbookPdfThumbnailNavigatedEventField","title":"<code> TextbookPdfThumbnailNavigatedEventField            (TextbookInteractionBaseEventField)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>textbook.pdf.thumbnail.navigated</code> event field.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Consists of the value <code>textbook.pdf.thumbnail.navigated</code>.</p> <code>thumbnail_title</code> <code>str</code> <p>Consists of the name of the thumbnail.</p> Source code in <code>ralph/models/edx/textbook_interaction/fields/events.py</code> <pre><code>class TextbookPdfThumbnailNavigatedEventField(TextbookInteractionBaseEventField):\n    \"\"\"Represents the `textbook.pdf.thumbnail.navigated` event field.\n\n    Attribute:\n        name (str): Consists of the value `textbook.pdf.thumbnail.navigated`.\n        thumbnail_title (str): Consists of the name of the thumbnail.\n    \"\"\"\n\n    name: Literal[\"textbook.pdf.thumbnail.navigated\"]\n    thumbnail_title: str\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.fields.events.TextbookPdfThumbnailsToggledEventField","title":"<code> TextbookPdfThumbnailsToggledEventField            (TextbookInteractionBaseEventField)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>textbook.pdf.thumbnails.toggled</code> event field.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Consists of the value <code>textbook.pdf.thumbnails.toggled</code>.</p> Source code in <code>ralph/models/edx/textbook_interaction/fields/events.py</code> <pre><code>class TextbookPdfThumbnailsToggledEventField(TextbookInteractionBaseEventField):\n    \"\"\"Represents the `textbook.pdf.thumbnails.toggled` event field.\n\n    Attribute:\n        name (str): Consists of the value `textbook.pdf.thumbnails.toggled`.\n    \"\"\"\n\n    name: Literal[\"textbook.pdf.thumbnails.toggled\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.fields.events.TextbookPdfZoomButtonsChangedEventField","title":"<code> TextbookPdfZoomButtonsChangedEventField            (TextbookInteractionBaseEventField)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>textbook.pdf.zoom.buttons.changed</code> event field.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Consists of the value <code>textbook.pdf.zoom.buttons.changed</code>.</p> <code>direction</code> <code>str</code> <p>Consists of either the <code>in</code> or <code>out</code> value.</p> Source code in <code>ralph/models/edx/textbook_interaction/fields/events.py</code> <pre><code>class TextbookPdfZoomButtonsChangedEventField(TextbookInteractionBaseEventField):\n    \"\"\"Represents the `textbook.pdf.zoom.buttons.changed` event field.\n\n    Attributes:\n        name (str): Consists of the value `textbook.pdf.zoom.buttons.changed`.\n        direction (str): Consists of either the `in` or `out` value.\n    \"\"\"\n\n    name: Literal[\"textbook.pdf.zoom.buttons.changed\"]\n    direction: Union[Literal[\"in\"], Literal[\"out\"]]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.fields.events.TextbookPdfZoomMenuChangedEventField","title":"<code> TextbookPdfZoomMenuChangedEventField            (TextbookInteractionBaseEventField)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>textbook.pdf.zoom.menu.changed</code> event field.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Consists of the value <code>textbook.pdf.zoom.menu.changed</code>.</p> <code>amount</code> <code>str</code> <p>Consists either of the <code>0.5</code>, <code>0.75</code>, <code>1</code>, <code>1.25</code>, <code>1.5</code>, <code>2</code>, <code>3</code>, <code>4</code>, <code>auto</code>, <code>custom</code>, <code>page-actual</code>, <code>page-fit</code>, <code>page-width</code> value.</p> Source code in <code>ralph/models/edx/textbook_interaction/fields/events.py</code> <pre><code>class TextbookPdfZoomMenuChangedEventField(TextbookInteractionBaseEventField):\n    \"\"\"Represents the `textbook.pdf.zoom.menu.changed` event field.\n\n    Attributes:\n        name (str): Consists of the value `textbook.pdf.zoom.menu.changed`.\n        amount (str): Consists either of the `0.5`, `0.75`, `1`, `1.25`, `1.5`, `2`,\n            `3`, `4`, `auto`, `custom`, `page-actual`, `page-fit`, `page-width` value.\n    \"\"\"\n\n    name: Literal[\"textbook.pdf.zoom.menu.changed\"]\n    amount: Union[\n        Literal[\"0.5\"],\n        Literal[\"0.75\"],\n        Literal[\"1\"],\n        Literal[\"1.25\"],\n        Literal[\"1.5\"],\n        Literal[\"2\"],\n        Literal[\"3\"],\n        Literal[\"4\"],\n        Literal[\"auto\"],\n        Literal[\"custom\"],\n        Literal[\"page-actual\"],\n        Literal[\"page-fit\"],\n        Literal[\"page-width\"],\n    ]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.statements","title":"<code>statements</code>","text":"<p>Textbook interaction event model definitions</p>"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.statements.UIBook","title":"<code> UIBook            (BaseBrowserModel)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>book</code> browser event model.</p> <p>The browser emits this event when a user navigates within the PDF Viewer or the PNG Viewer.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>BookEventField</code> <p>See BookEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>book</code>.</p> <code>name</code> <code>str</code> <p>Consists of the value <code>book</code>.</p> Source code in <code>ralph/models/edx/textbook_interaction/statements.py</code> <pre><code>class UIBook(BaseBrowserModel):\n    \"\"\"Represents the `book` browser event model.\n\n    The browser emits this event when a user navigates within the PDF Viewer or the\n    PNG Viewer.\n\n    Attributes:\n        event (BookEventField): See BookEventField.\n        event_type (str): Consists of the value `book`.\n        name (str): Consists of the value `book`.\n    \"\"\"\n\n    __selector__ = selector(event_source=\"browser\", event_type=\"book\")\n\n    event: Union[\n        Json[BookEventField], BookEventField  # pylint: disable=unsubscriptable-object\n    ]\n    event_type: Literal[\"book\"]\n    name: Literal[\"book\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.statements.UITextbookPdfChapterNavigated","title":"<code> UITextbookPdfChapterNavigated            (BaseBrowserModel)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>textbook.pdf.chapter.navigated</code> browser event model.</p> <p>The browser emits this event when a user clicks on a link in the outline to navigate to a chapter.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>json</code> <p>See TextbookPdfChapterNavigatedEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>textbook.pdf.chapter.navigated</code>.</p> <code>name</code> <code>str</code> <p>Consists of the value <code>textbook.pdf.chapter.navigated</code>.</p> Source code in <code>ralph/models/edx/textbook_interaction/statements.py</code> <pre><code>class UITextbookPdfChapterNavigated(BaseBrowserModel):\n    \"\"\"Represents the `textbook.pdf.chapter.navigated` browser event model.\n\n    The browser emits this event when a user clicks on a link in the outline to navigate\n    to a chapter.\n\n    Attributes:\n        event (json): See TextbookPdfChapterNavigatedEventField.\n        event_type (str): Consists of the value `textbook.pdf.chapter.navigated`.\n        name (str): Consists of the value `textbook.pdf.chapter.navigated`.\n    \"\"\"\n\n    __selector__ = selector(\n        event_source=\"browser\", event_type=\"textbook.pdf.chapter.navigated\"\n    )\n\n    event: Union[\n        Json[  # pylint: disable=unsubscriptable-object\n            TextbookPdfChapterNavigatedEventField\n        ],\n        TextbookPdfChapterNavigatedEventField,\n    ]\n    event_type: Literal[\"textbook.pdf.chapter.navigated\"]\n    name: Literal[\"textbook.pdf.chapter.navigated\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.statements.UITextbookPdfDisplayScaled","title":"<code> UITextbookPdfDisplayScaled            (BaseBrowserModel)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>textbook.pdf.display.scaled</code> browser event model.</p> <p>The browser emits this event when the display magnification changes or the first page is shown.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>json</code> <p>See TextbookPdfDisplayScaledEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>textbook.pdf.display.scaled</code>.</p> <code>name</code> <code>str</code> <p>Consists of the value <code>textbook.pdf.display.scaled</code>.</p> Source code in <code>ralph/models/edx/textbook_interaction/statements.py</code> <pre><code>class UITextbookPdfDisplayScaled(BaseBrowserModel):\n    \"\"\"Represents the `textbook.pdf.display.scaled` browser event model.\n\n    The browser emits this event when the display magnification changes or the first\n    page is shown.\n\n    Attributes:\n        event (json): See TextbookPdfDisplayScaledEventField.\n        event_type (str): Consists of the value `textbook.pdf.display.scaled`.\n        name (str): Consists of the value `textbook.pdf.display.scaled`.\n    \"\"\"\n\n    __selector__ = selector(\n        event_source=\"browser\", event_type=\"textbook.pdf.display.scaled\"\n    )\n\n    event: Union[\n        Json[  # pylint: disable=unsubscriptable-object\n            TextbookPdfDisplayScaledEventField\n        ],\n        TextbookPdfDisplayScaledEventField,\n    ]\n    event_type: Literal[\"textbook.pdf.display.scaled\"]\n    name: Literal[\"textbook.pdf.display.scaled\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.statements.UITextbookPdfOutlineToggled","title":"<code> UITextbookPdfOutlineToggled            (BaseBrowserModel)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>textbook.pdf.outline.toggled</code> browser event model.</p> <p>The browser emits this event when a user clicks the outline icon to show or hide a list of the book\u2019s chapters.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>json</code> <p>See TextbookPdfOutlineToggledEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>textbook.pdf.outline.toggled</code>.</p> <code>name</code> <code>str</code> <p>Consists of the value <code>textbook.pdf.outline.toggled</code>.</p> Source code in <code>ralph/models/edx/textbook_interaction/statements.py</code> <pre><code>class UITextbookPdfOutlineToggled(BaseBrowserModel):\n    \"\"\"Represents the `textbook.pdf.outline.toggled` browser event model.\n\n    The browser emits this event when a user clicks the outline icon to show or hide\n    a list of the book\u2019s chapters.\n\n    Attributes:\n        event (json): See TextbookPdfOutlineToggledEventField.\n        event_type (str): Consists of the value `textbook.pdf.outline.toggled`.\n        name (str): Consists of the value `textbook.pdf.outline.toggled`.\n    \"\"\"\n\n    __selector__ = selector(\n        event_source=\"browser\", event_type=\"textbook.pdf.outline.toggled\"\n    )\n\n    event: Union[\n        Json[  # pylint: disable=unsubscriptable-object\n            TextbookPdfOutlineToggledEventField\n        ],\n        TextbookPdfOutlineToggledEventField,\n    ]\n    event_type: Literal[\"textbook.pdf.outline.toggled\"]\n    name: Literal[\"textbook.pdf.outline.toggled\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.statements.UITextbookPdfPageNavigated","title":"<code> UITextbookPdfPageNavigated            (BaseBrowserModel)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>textbook.pdf.page.navigated</code> browser event model.</p> <p>The browser emits this event when a user manually enters a page number.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>json</code> <p>See TextbookPdfPageNavigatedEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>textbook.pdf.page.navigated</code>.</p> <code>name</code> <code>str</code> <p>Consists of the value <code>textbook.pdf.page.navigated</code>.</p> Source code in <code>ralph/models/edx/textbook_interaction/statements.py</code> <pre><code>class UITextbookPdfPageNavigated(BaseBrowserModel):\n    \"\"\"Represents the `textbook.pdf.page.navigated` browser event model.\n\n    The browser emits this event when a user manually enters a page number.\n\n    Attributes:\n        event (json): See TextbookPdfPageNavigatedEventField.\n        event_type (str): Consists of the value `textbook.pdf.page.navigated`.\n        name (str): Consists of the value `textbook.pdf.page.navigated`.\n    \"\"\"\n\n    __selector__ = selector(\n        event_source=\"browser\", event_type=\"textbook.pdf.page.navigated\"\n    )\n\n    event: Union[\n        Json[  # pylint: disable=unsubscriptable-object\n            TextbookPdfPageNavigatedEventField\n        ],\n        TextbookPdfPageNavigatedEventField,\n    ]\n    event_type: Literal[\"textbook.pdf.page.navigated\"]\n    name: Literal[\"textbook.pdf.page.navigated\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.statements.UITextbookPdfPageScrolled","title":"<code> UITextbookPdfPageScrolled            (BaseBrowserModel)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>textbook.pdf.page.scrolled</code> browser event model.</p> <p>The browser emits this event when the user scrolls to the next or previous page and the transition takes less than 50 milliseconds.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>json</code> <p>See TextbookPdfPageScrolledEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>textbook.pdf.page.scrolled</code>.</p> <code>name</code> <code>str</code> <p>Consists of the value <code>textbook.pdf.page.scrolled</code>.</p> Source code in <code>ralph/models/edx/textbook_interaction/statements.py</code> <pre><code>class UITextbookPdfPageScrolled(BaseBrowserModel):\n    \"\"\"Represents the `textbook.pdf.page.scrolled` browser event model.\n\n    The browser emits this event when the user scrolls to the next or previous page and\n    the transition takes less than 50 milliseconds.\n\n    Attributes:\n        event (json): See TextbookPdfPageScrolledEventField.\n        event_type (str): Consists of the value `textbook.pdf.page.scrolled`.\n        name (str): Consists of the value `textbook.pdf.page.scrolled`.\n    \"\"\"\n\n    __selector__ = selector(\n        event_source=\"browser\", event_type=\"textbook.pdf.page.scrolled\"\n    )\n\n    event: Union[\n        Json[  # pylint: disable=unsubscriptable-object\n            TextbookPdfPageScrolledEventField\n        ],\n        TextbookPdfPageScrolledEventField,\n    ]\n    event_type: Literal[\"textbook.pdf.page.scrolled\"]\n    name: Literal[\"textbook.pdf.page.scrolled\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.statements.UITextbookPdfSearchCaseSensitivityToggled","title":"<code> UITextbookPdfSearchCaseSensitivityToggled            (BaseBrowserModel)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>textbook.pdf.searchcasesensitivity.toggled</code> browser event model.</p> <p>The browser emits this event when a user selects or clears the Match Case option.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>json</code> <p>See TextbookPdfSearchCaseSensitivityToggledEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>textbook.pdf.searchcasesensitivity.toggled</code>.</p> <code>name</code> <code>str</code> <p>Consists of the value <code>textbook.pdf.searchcasesensitivity.toggled</code>.</p> Source code in <code>ralph/models/edx/textbook_interaction/statements.py</code> <pre><code>class UITextbookPdfSearchCaseSensitivityToggled(BaseBrowserModel):\n    \"\"\"Represents the `textbook.pdf.searchcasesensitivity.toggled` browser event model.\n\n    The browser emits this event when a user selects or clears the\n    &lt;kbd&gt;Match Case&lt;/kbd&gt; option.\n\n    Attributes:\n        event (json): See TextbookPdfSearchCaseSensitivityToggledEventField.\n        event_type (str): Consists of the value\n            `textbook.pdf.searchcasesensitivity.toggled`.\n        name (str): Consists of the value `textbook.pdf.searchcasesensitivity.toggled`.\n    \"\"\"\n\n    __selector__ = selector(\n        event_source=\"browser\", event_type=\"textbook.pdf.searchcasesensitivity.toggled\"\n    )\n\n    event: Union[\n        Json[  # pylint: disable=unsubscriptable-object\n            TextbookPdfSearchCaseSensitivityToggledEventField\n        ],\n        TextbookPdfSearchCaseSensitivityToggledEventField,\n    ]\n    event_type: Literal[\"textbook.pdf.searchcasesensitivity.toggled\"]\n    name: Literal[\"textbook.pdf.searchcasesensitivity.toggled\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.statements.UITextbookPdfSearchExecuted","title":"<code> UITextbookPdfSearchExecuted            (BaseBrowserModel)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>textbook.pdf.search.executed</code> browser event model.</p> <p>The browser emits this event when a user searches for a text value in the file.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>json</code> <p>See TextbookPdfSearchExecutedEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>textbook.pdf.search.executed</code>.</p> <code>name</code> <code>str</code> <p>Consists of the value <code>textbook.pdf.search.executed</code>.</p> Source code in <code>ralph/models/edx/textbook_interaction/statements.py</code> <pre><code>class UITextbookPdfSearchExecuted(BaseBrowserModel):\n    \"\"\"Represents the `textbook.pdf.search.executed` browser event model.\n\n    The browser emits this event when a user searches for a text value in the file.\n\n    Attributes:\n        event (json): See TextbookPdfSearchExecutedEventField.\n        event_type (str): Consists of the value `textbook.pdf.search.executed`.\n        name (str): Consists of the value `textbook.pdf.search.executed`.\n    \"\"\"\n\n    __selector__ = selector(\n        event_source=\"browser\", event_type=\"textbook.pdf.search.executed\"\n    )\n\n    event: Union[\n        Json[  # pylint: disable=unsubscriptable-object\n            TextbookPdfSearchExecutedEventField\n        ],\n        TextbookPdfSearchExecutedEventField,\n    ]\n    event_type: Literal[\"textbook.pdf.search.executed\"]\n    name: Literal[\"textbook.pdf.search.executed\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.statements.UITextbookPdfSearchHighlightToggled","title":"<code> UITextbookPdfSearchHighlightToggled            (BaseBrowserModel)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>textbook.pdf.search.highlight.toggled</code> browser event model.</p> <p>The browser emits this event when a user selects or clears the Highlight All option.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>json</code> <p>See TextbookPdfSearchHighlightToggledEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>textbook.pdf.search.highlight.toggled</code>.</p> <code>name</code> <code>str</code> <p>Consists of the value <code>textbook.pdf.search.highlight.toggled</code>.</p> Source code in <code>ralph/models/edx/textbook_interaction/statements.py</code> <pre><code>class UITextbookPdfSearchHighlightToggled(BaseBrowserModel):\n    \"\"\"Represents the `textbook.pdf.search.highlight.toggled` browser event model.\n\n    The browser emits this event when a user selects or clears the\n    &lt;kbd&gt;Highlight All&lt;/kbd&gt; option.\n\n    Attributes:\n        event (json): See TextbookPdfSearchHighlightToggledEventField.\n        event_type (str): Consists of the value `textbook.pdf.search.highlight.toggled`.\n        name (str): Consists of the value `textbook.pdf.search.highlight.toggled`.\n    \"\"\"\n\n    __selector__ = selector(\n        event_source=\"browser\", event_type=\"textbook.pdf.search.highlight.toggled\"\n    )\n\n    event: Union[\n        Json[  # pylint: disable=unsubscriptable-object\n            TextbookPdfSearchHighlightToggledEventField\n        ],\n        TextbookPdfSearchHighlightToggledEventField,\n    ]\n    event_type: Literal[\"textbook.pdf.search.highlight.toggled\"]\n    name: Literal[\"textbook.pdf.search.highlight.toggled\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.statements.UITextbookPdfSearchNavigatedNext","title":"<code> UITextbookPdfSearchNavigatedNext            (BaseBrowserModel)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>textbook.pdf.search.navigatednext</code> browser event model.</p> <p>The browser emits this event when a user clicks on the Find Next or Find Previous icons for an entered search string.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>json</code> <p>See TextbookPdfSearchNavigatedNextEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>textbook.pdf.search.navigatednext</code>.</p> <code>name</code> <code>str</code> <p>Consists of the value <code>textbook.pdf.search.navigatednext</code>.</p> Source code in <code>ralph/models/edx/textbook_interaction/statements.py</code> <pre><code>class UITextbookPdfSearchNavigatedNext(BaseBrowserModel):\n    \"\"\"Represents the `textbook.pdf.search.navigatednext` browser event model.\n\n    The browser emits this event when a user clicks on the &lt;kbd&gt;Find Next&lt;/kbd&gt; or\n    &lt;kbd&gt;Find Previous&lt;/kbd&gt; icons for an entered search string.\n\n    Attributes:\n        event (json): See TextbookPdfSearchNavigatedNextEventField.\n        event_type (str): Consists of the value `textbook.pdf.search.navigatednext`.\n        name (str): Consists of the value `textbook.pdf.search.navigatednext`.\n    \"\"\"\n\n    __selector__ = selector(\n        event_source=\"browser\", event_type=\"textbook.pdf.search.navigatednext\"\n    )\n\n    event: Union[\n        Json[  # pylint: disable=unsubscriptable-object\n            TextbookPdfSearchNavigatedNextEventField\n        ],\n        TextbookPdfSearchNavigatedNextEventField,\n    ]\n    event_type: Literal[\"textbook.pdf.search.navigatednext\"]\n    name: Literal[\"textbook.pdf.search.navigatednext\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.statements.UITextbookPdfThumbnailNavigated","title":"<code> UITextbookPdfThumbnailNavigated            (BaseBrowserModel)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>textbook.pdf.thumbnail.navigated</code> browser event model.</p> <p>The browser emits this event when a user clicks on a thumbnail image to navigate to a page.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>json</code> <p>See TextbookPdfThumbnailNavigatedEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>textbook.pdf.thumbnail.navigated</code>.</p> <code>name</code> <code>str</code> <p>Consists of the value <code>textbook.pdf.thumbnail.navigated</code>.</p> Source code in <code>ralph/models/edx/textbook_interaction/statements.py</code> <pre><code>class UITextbookPdfThumbnailNavigated(BaseBrowserModel):\n    \"\"\"Represents the `textbook.pdf.thumbnail.navigated` browser event model.\n\n    The browser emits this event when a user clicks on a thumbnail image to navigate\n    to a page.\n\n    Attributes:\n        event (json): See TextbookPdfThumbnailNavigatedEventField.\n        event_type (str): Consists of the value `textbook.pdf.thumbnail.navigated`.\n        name (str): Consists of the value `textbook.pdf.thumbnail.navigated`.\n    \"\"\"\n\n    __selector__ = selector(\n        event_source=\"browser\", event_type=\"textbook.pdf.thumbnail.navigated\"\n    )\n\n    event: Union[\n        Json[  # pylint: disable=unsubscriptable-object\n            TextbookPdfThumbnailNavigatedEventField\n        ],\n        TextbookPdfThumbnailNavigatedEventField,\n    ]\n    event_type: Literal[\"textbook.pdf.thumbnail.navigated\"]\n    name: Literal[\"textbook.pdf.thumbnail.navigated\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.statements.UITextbookPdfThumbnailsToggled","title":"<code> UITextbookPdfThumbnailsToggled            (BaseBrowserModel)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>textbook.pdf.thumbnails.toggled</code> browser event model.</p> <p>The browser emits this event when a user clicks on the icon to show or hide page thumbnails.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>json</code> <p>See TextbookPdfThumbnailsToggledEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>textbook.pdf.thumbnails.toggled</code>.</p> <code>name</code> <code>str</code> <p>Consists of the value <code>textbook.pdf.thumbnails.toggled</code>.</p> Source code in <code>ralph/models/edx/textbook_interaction/statements.py</code> <pre><code>class UITextbookPdfThumbnailsToggled(BaseBrowserModel):\n    \"\"\"Represents the `textbook.pdf.thumbnails.toggled` browser event model.\n\n    The browser emits this event when a user clicks on the icon to show or hide page\n    thumbnails.\n\n    Attributes:\n        event (json): See TextbookPdfThumbnailsToggledEventField.\n        event_type (str): Consists of the value `textbook.pdf.thumbnails.toggled`.\n        name (str): Consists of the value `textbook.pdf.thumbnails.toggled`.\n    \"\"\"\n\n    __selector__ = selector(\n        event_source=\"browser\", event_type=\"textbook.pdf.thumbnails.toggled\"\n    )\n\n    event: Union[\n        Json[  # pylint: disable=unsubscriptable-object\n            TextbookPdfThumbnailsToggledEventField\n        ],\n        TextbookPdfThumbnailsToggledEventField,\n    ]\n    event_type: Literal[\"textbook.pdf.thumbnails.toggled\"]\n    name: Literal[\"textbook.pdf.thumbnails.toggled\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.statements.UITextbookPdfZoomButtonsChanged","title":"<code> UITextbookPdfZoomButtonsChanged            (BaseBrowserModel)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>textbook.pdf.zoom.buttons.changed</code> browser event model.</p> <p>The browser emits this event when a user clicks either the Zoom In or Zoom Out icon.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>json</code> <p>See TextbookPdfZoomButtonsChangedEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>textbook.pdf.zoom.buttons.changed</code>.</p> <code>name</code> <code>str</code> <p>Consists of the value <code>textbook.pdf.zoom.buttons.changed</code>.</p> Source code in <code>ralph/models/edx/textbook_interaction/statements.py</code> <pre><code>class UITextbookPdfZoomButtonsChanged(BaseBrowserModel):\n    \"\"\"Represents the `textbook.pdf.zoom.buttons.changed` browser event model.\n\n    The browser emits this event when a user clicks either the &lt;kbd&gt;Zoom In&lt;/kbd&gt;\n    or &lt;kbd&gt;Zoom Out&lt;/kbd&gt; icon.\n\n    Attributes:\n        event (json): See TextbookPdfZoomButtonsChangedEventField.\n        event_type (str): Consists of the value `textbook.pdf.zoom.buttons.changed`.\n        name (str): Consists of the value `textbook.pdf.zoom.buttons.changed`.\n    \"\"\"\n\n    __selector__ = selector(\n        event_source=\"browser\", event_type=\"textbook.pdf.zoom.buttons.changed\"\n    )\n\n    event: Union[\n        Json[  # pylint: disable=unsubscriptable-object\n            TextbookPdfZoomButtonsChangedEventField\n        ],\n        TextbookPdfZoomButtonsChangedEventField,\n    ]\n    event_type: Literal[\"textbook.pdf.zoom.buttons.changed\"]\n    name: Literal[\"textbook.pdf.zoom.buttons.changed\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.textbook_interaction.statements.UITextbookPdfZoomMenuChanged","title":"<code> UITextbookPdfZoomMenuChanged            (BaseBrowserModel)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>textbook.pdf.zoom.menu.changed</code> browser event model.</p> <p>The browser emits this event when a user selects a magnification setting.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>json</code> <p>See TextbookPdfZoomMenuChangedEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>textbook.pdf.zoom.menu.changed</code>.</p> <code>name</code> <code>str</code> <p>Consists of the value <code>textbook.pdf.zoom.menu.changed</code>.</p> Source code in <code>ralph/models/edx/textbook_interaction/statements.py</code> <pre><code>class UITextbookPdfZoomMenuChanged(BaseBrowserModel):\n    \"\"\"Represents the `textbook.pdf.zoom.menu.changed` browser event model.\n\n    The browser emits this event when a user selects a magnification setting.\n\n    Attributes:\n        event (json): See TextbookPdfZoomMenuChangedEventField.\n        event_type (str): Consists of the value `textbook.pdf.zoom.menu.changed`.\n        name (str): Consists of the value `textbook.pdf.zoom.menu.changed`.\n    \"\"\"\n\n    __selector__ = selector(\n        event_source=\"browser\", event_type=\"textbook.pdf.zoom.menu.changed\"\n    )\n\n    event: Union[\n        Json[  # pylint: disable=unsubscriptable-object\n            TextbookPdfZoomMenuChangedEventField\n        ],\n        TextbookPdfZoomMenuChangedEventField,\n    ]\n    event_type: Literal[\"textbook.pdf.zoom.menu.changed\"]\n    name: Literal[\"textbook.pdf.zoom.menu.changed\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.video","title":"<code>video</code>  <code>special</code>","text":""},{"location":"models/edx/#ralph.models.edx.video.fields","title":"<code>fields</code>  <code>special</code>","text":""},{"location":"models/edx/#ralph.models.edx.video.fields.events","title":"<code>events</code>","text":"<p>Video event fields definitions</p>"},{"location":"models/edx/#ralph.models.edx.video.fields.events.PauseVideoEventField","title":"<code> PauseVideoEventField            (VideoBaseEventField)         </code>  <code>pydantic-model</code>","text":"<p>Represents the event field of <code>pause_video</code> statement.</p> <p>Attributes:</p> Name Type Description <code>currentTime</code> <code>float</code> <p>Consists of the time in the video at which the statement was emitted.</p> Source code in <code>ralph/models/edx/video/fields/events.py</code> <pre><code>class PauseVideoEventField(VideoBaseEventField):\n    \"\"\"Represents the event field of `pause_video` statement.\n\n    Attributes:\n        currentTime (float): Consists of the time in the video at which\n            the statement was emitted.\n    \"\"\"\n\n    currentTime: float\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.video.fields.events.PlayVideoEventField","title":"<code> PlayVideoEventField            (VideoBaseEventField)         </code>  <code>pydantic-model</code>","text":"<p>Represents the event field of <code>play_video</code> statement.</p> <p>Attributes:</p> Name Type Description <code>currentTime</code> <code>float</code> <p>Consists of the time in the video at which the statement was emitted.</p> Source code in <code>ralph/models/edx/video/fields/events.py</code> <pre><code>class PlayVideoEventField(VideoBaseEventField):\n    \"\"\"Represents the event field of `play_video` statement.\n\n    Attributes:\n        currentTime (float): Consists of the time in the video at which\n            the statement was emitted.\n    \"\"\"\n\n    currentTime: float\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.video.fields.events.SeekVideoEventField","title":"<code> SeekVideoEventField            (VideoBaseEventField)         </code>  <code>pydantic-model</code>","text":"<p>Represents the event field of <code>seek_video</code> statement.</p> <p>Attributes:</p> Name Type Description <code>new_time</code> <code>float</code> <p>Consists of the point in time the actor changed to in a media object during a seek operation.</p> <code>old_time</code> <code>float</code> <p>Consists of the point in time the actor changed from in a media object during a seek operation.</p> <code>type</code> <code>str</code> <p>Consists of the navigational method used to change position within the video, either <code>onCaptionSeek</code> or <code>onSlideSeek</code> value.</p> Source code in <code>ralph/models/edx/video/fields/events.py</code> <pre><code>class SeekVideoEventField(VideoBaseEventField):\n    \"\"\"Represents the event field of `seek_video` statement.\n\n    Attributes:\n        new_time (float): Consists of the point in time the actor changed to in a media\n            object during a seek operation.\n        old_time (float): Consists of the point in time the actor changed from in a\n            media object during a seek operation.\n        type (str): Consists of the navigational method used to change position\n            within the video, either `onCaptionSeek` or `onSlideSeek` value.\n    \"\"\"\n\n    new_time: float\n    old_time: float\n    type: str\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.video.fields.events.SpeedChangeVideoEventField","title":"<code> SpeedChangeVideoEventField            (VideoBaseEventField)         </code>  <code>pydantic-model</code>","text":"<p>Represents the event field of <code>speed_change_video</code> statement.</p> <p>Attributes:</p> Name Type Description <code>currentTime</code> <code>float</code> <p>Consists of the time in the video at which the statement was emitted.</p> Source code in <code>ralph/models/edx/video/fields/events.py</code> <pre><code>class SpeedChangeVideoEventField(VideoBaseEventField):\n    \"\"\"Represents the event field of `speed_change_video` statement.\n\n    Attributes:\n        currentTime (float): Consists of the time in the video at which\n            the statement was emitted.\n    \"\"\"\n\n    currentTime: float\n    new_speed: Literal[\"0.75\", \"1.0\", \"1.25\", \"1.50\", \"2.0\"]\n    old_speed: Literal[\"0.75\", \"1.0\", \"1.25\", \"1.50\", \"2.0\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.video.fields.events.StopVideoEventField","title":"<code> StopVideoEventField            (VideoBaseEventField)         </code>  <code>pydantic-model</code>","text":"<p>Represents the event field of <code>stop_video</code> statement.</p> <p>Attributes:</p> Name Type Description <code>currentTime</code> <code>float</code> <p>Consists of the time in the video at which the statement was emitted.</p> Source code in <code>ralph/models/edx/video/fields/events.py</code> <pre><code>class StopVideoEventField(VideoBaseEventField):\n    \"\"\"Represents the event field of `stop_video` statement.\n\n    Attributes:\n        currentTime (float): Consists of the time in the video at which\n            the statement was emitted.\n    \"\"\"\n\n    currentTime: float\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.video.fields.events.VideoBaseEventField","title":"<code> VideoBaseEventField            (AbstractBaseEventField)         </code>  <code>pydantic-model</code>","text":"<p>Represents the event field which attributes are common to most of the video statements.</p> <p>Attributes:</p> Name Type Description <code>code</code> <code>str</code> <p>Consists of the <code>html5</code> value for browser-played videos.</p> <code>id</code> <code>str</code> <p>Consists of the additional videos name if given by the course creators, or the system-generated hash code otherwise.</p> Source code in <code>ralph/models/edx/video/fields/events.py</code> <pre><code>class VideoBaseEventField(AbstractBaseEventField):\n    \"\"\"Represents the event field which attributes are common to most\n    of the video statements.\n\n    Attributes:\n        code (str): Consists of the `html5` value for browser-played\n            videos.\n        id (str): Consists of the additional videos name if given by the\n            course creators, or the system-generated hash code otherwise.\n    \"\"\"\n\n    class Config:  # pylint: disable=missing-class-docstring\n        extra = \"allow\"\n\n    code: str\n    id: str\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.video.fields.events.VideoTranscriptEventField","title":"<code> VideoTranscriptEventField            (VideoBaseEventField)         </code>  <code>pydantic-model</code>","text":"<p>Represents the event field of <code>hide_transcript</code> and <code>show_transcript</code> statement.</p> <p>Attributes:</p> Name Type Description <code>current_time</code> <code>float</code> <p>Consists of the time in the video at which the statement was emitted.</p> Source code in <code>ralph/models/edx/video/fields/events.py</code> <pre><code>class VideoTranscriptEventField(VideoBaseEventField):\n    \"\"\"Represents the event field of `hide_transcript` and `show_transcript`\n    statement.\n\n    Attributes:\n        current_time (float): Consists of the time in the video at which\n            the statement was emitted.\n    \"\"\"\n\n    current_time: float\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.video.statements","title":"<code>statements</code>","text":"<p>Video event model definitions</p>"},{"location":"models/edx/#ralph.models.edx.video.statements.UIHideTranscript","title":"<code> UIHideTranscript            (BaseBrowserModel)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>hide_transcript</code> event model.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>VideoTranscriptEventField</code> <p>See VideoTranscriptEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>hide_transcript</code>.</p> <code>name</code> <code>str</code> <p>Consists either of the value <code>hide_transcript</code> or <code>edx.video.transcript.hidden</code>.</p> Source code in <code>ralph/models/edx/video/statements.py</code> <pre><code>class UIHideTranscript(BaseBrowserModel):\n    \"\"\"Represents the `hide_transcript` event model.\n\n    Attributes:\n        event (VideoTranscriptEventField): See VideoTranscriptEventField.\n        event_type (str): Consists of the value `hide_transcript`.\n        name (str): Consists either of the value `hide_transcript` or\n            `edx.video.transcript.hidden`.\n    \"\"\"\n\n    __selector__ = selector(event_source=\"browser\", event_type=\"hide_transcript\")\n\n    event: Union[\n        Json[VideoTranscriptEventField],  # pylint: disable=unsubscriptable-object\n        VideoTranscriptEventField,\n    ]\n    event_type: Literal[\"hide_transcript\"]\n    name: Literal[\"hide_transcript\", \"edx.video.transcript.hidden\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.video.statements.UILoadVideo","title":"<code> UILoadVideo            (BaseBrowserModel)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>load_video</code> event model.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>VideoBaseEventField</code> <p>See VideoBaseEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>load_video</code>.</p> <code>name</code> <code>str</code> <p>Consists either of the value <code>load_video</code> or <code>edx.video.loaded</code>.</p> Source code in <code>ralph/models/edx/video/statements.py</code> <pre><code>class UILoadVideo(BaseBrowserModel):\n    \"\"\"Represents the `load_video` event model.\n\n    Attributes:\n        event (VideoBaseEventField): See VideoBaseEventField.\n        event_type (str): Consists of the value `load_video`.\n        name (str): Consists either of the value `load_video` or `edx.video.loaded`.\n    \"\"\"\n\n    __selector__ = selector(event_source=\"browser\", event_type=\"load_video\")\n\n    event: Union[\n        Json[VideoBaseEventField],  # pylint: disable=unsubscriptable-object\n        VideoBaseEventField,\n    ]\n    event_type: Literal[\"load_video\"]\n    name: Literal[\"load_video\", \"edx.video.loaded\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.video.statements.UIPauseVideo","title":"<code> UIPauseVideo            (BaseBrowserModel)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>pause_video</code> event model.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>PauseVideoEventField</code> <p>See PauseVideoEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>pause_video</code>.</p> <code>name</code> <code>str</code> <p>Consists either of the value <code>pause_video</code> or <code>edx.video.paused</code>.</p> Source code in <code>ralph/models/edx/video/statements.py</code> <pre><code>class UIPauseVideo(BaseBrowserModel):\n    \"\"\"Represents the `pause_video` event model.\n\n    Attributes:\n        event (PauseVideoEventField): See PauseVideoEventField.\n        event_type (str): Consists of the value `pause_video`.\n        name (str): Consists either of the value `pause_video` or `edx.video.paused`.\n    \"\"\"\n\n    __selector__ = selector(event_source=\"browser\", event_type=\"pause_video\")\n\n    event: Union[\n        Json[PauseVideoEventField],  # pylint: disable=unsubscriptable-object\n        PauseVideoEventField,\n    ]\n    event_type: Literal[\"pause_video\"]\n    name: Optional[Literal[\"pause_video\", \"edx.video.paused\"]]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.video.statements.UIPlayVideo","title":"<code> UIPlayVideo            (BaseBrowserModel)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>play_video</code> event model.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>PlayVideoEventField</code> <p>See PlayVideoEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>play_video</code>.</p> <code>name</code> <code>str</code> <p>Consists either of the value <code>play_video</code> or <code>edx.video.played</code>.</p> Source code in <code>ralph/models/edx/video/statements.py</code> <pre><code>class UIPlayVideo(BaseBrowserModel):\n    \"\"\"Represents the `play_video` event model.\n\n    Attributes:\n        event (PlayVideoEventField): See PlayVideoEventField.\n        event_type (str): Consists of the value `play_video`.\n        name (str): Consists either of the value `play_video` or `edx.video.played`.\n    \"\"\"\n\n    __selector__ = selector(event_source=\"browser\", event_type=\"play_video\")\n\n    event: Union[\n        Json[PlayVideoEventField],  # pylint: disable=unsubscriptable-object\n        PlayVideoEventField,\n    ]\n    event_type: Literal[\"play_video\"]\n    name: Optional[Literal[\"play_video\", \"edx.video.played\"]]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.video.statements.UISeekVideo","title":"<code> UISeekVideo            (BaseBrowserModel)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>seek_video</code> event model.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>SeekVideoEventField</code> <p>See SeekVideoEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>seek_video</code>.</p> <code>name</code> <code>str</code> <p>Consists either of the value <code>seek_video</code> or <code>edx.video.position.changed</code>.</p> Source code in <code>ralph/models/edx/video/statements.py</code> <pre><code>class UISeekVideo(BaseBrowserModel):\n    \"\"\"Represents the `seek_video` event model.\n\n    Attributes:\n        event (SeekVideoEventField): See SeekVideoEventField.\n        event_type (str): Consists of the value `seek_video`.\n        name (str): Consists either of the value `seek_video` or\n            `edx.video.position.changed`.\n    \"\"\"\n\n    __selector__ = selector(event_source=\"browser\", event_type=\"seek_video\")\n\n    event: Union[\n        Json[SeekVideoEventField],  # pylint: disable=unsubscriptable-object\n        SeekVideoEventField,\n    ]\n    event_type: Literal[\"seek_video\"]\n    name: Optional[Literal[\"seek_video\", \"edx.video.position.changed\"]]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.video.statements.UIShowTranscript","title":"<code> UIShowTranscript            (BaseBrowserModel)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>show_transcript</code> event model.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>VideoTranscriptEventField</code> <p>See VideoTranscriptEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>show_transcript</code>.</p> <code>name</code> <code>str</code> <p>Consists either of the value <code>show_transcript</code> or <code>edx.video.transcript.shown</code>.</p> Source code in <code>ralph/models/edx/video/statements.py</code> <pre><code>class UIShowTranscript(BaseBrowserModel):\n    \"\"\"Represents the `show_transcript` event model.\n\n    Attributes:\n        event (VideoTranscriptEventField): See VideoTranscriptEventField.\n        event_type (str): Consists of the value `show_transcript`.\n        name (str): Consists either of the value `show_transcript` or\n            `edx.video.transcript.shown`.\n    \"\"\"\n\n    __selector__ = selector(event_source=\"browser\", event_type=\"show_transcript\")\n\n    event: Union[\n        Json[VideoTranscriptEventField],  # pylint: disable=unsubscriptable-object\n        VideoTranscriptEventField,\n    ]\n    event_type: Literal[\"show_transcript\"]\n    name: Literal[\"show_transcript\", \"edx.video.transcript.shown\"]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.video.statements.UISpeedChangeVideo","title":"<code> UISpeedChangeVideo            (BaseBrowserModel)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>speed_change_video</code> event model.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>SpeedChangeVideoEventField</code> <p>See SpeedChangeVideoEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>speed_change_video</code>.</p> Source code in <code>ralph/models/edx/video/statements.py</code> <pre><code>class UISpeedChangeVideo(BaseBrowserModel):\n    \"\"\"Represents the `speed_change_video` event model.\n\n    Attributes:\n        event (SpeedChangeVideoEventField): See SpeedChangeVideoEventField.\n        event_type (str): Consists of the value `speed_change_video`.\n    \"\"\"\n\n    __selector__ = selector(event_source=\"browser\", event_type=\"speed_change_video\")\n\n    event: Union[\n        Json[SpeedChangeVideoEventField],  # pylint: disable=unsubscriptable-object\n        SpeedChangeVideoEventField,\n    ]\n    event_type: Literal[\"speed_change_video\"]\n    name: Optional[Literal[\"speed_change_video\"]]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.video.statements.UIStopVideo","title":"<code> UIStopVideo            (BaseBrowserModel)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>stop_video</code> event model.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>StopVideoEventField</code> <p>See StopVideoEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>stop_video</code>.</p> <code>name</code> <code>str</code> <p>Consists either of the value <code>stop_video</code> or <code>edx.video.stopped</code>.</p> Source code in <code>ralph/models/edx/video/statements.py</code> <pre><code>class UIStopVideo(BaseBrowserModel):\n    \"\"\"Represents the `stop_video` event model.\n\n    Attributes:\n        event (StopVideoEventField): See StopVideoEventField.\n        event_type (str): Consists of the value `stop_video`.\n        name (str): Consists either of the value `stop_video` or `edx.video.stopped`.\n    \"\"\"\n\n    __selector__ = selector(event_source=\"browser\", event_type=\"stop_video\")\n\n    event: Union[\n        Json[StopVideoEventField],  # pylint: disable=unsubscriptable-object\n        StopVideoEventField,\n    ]\n    event_type: Literal[\"stop_video\"]\n    name: Optional[Literal[\"stop_video\", \"edx.video.stopped\"]]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.video.statements.UIVideoHideCCMenu","title":"<code> UIVideoHideCCMenu            (BaseBrowserModel)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>video_hide_cc_menu</code> event model.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>VideoBaseEventField</code> <p>See VideoBaseEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>video_hide_cc_menu</code>.</p> Source code in <code>ralph/models/edx/video/statements.py</code> <pre><code>class UIVideoHideCCMenu(BaseBrowserModel):\n    \"\"\"Represents the `video_hide_cc_menu` event model.\n\n    Attributes:\n        event (VideoBaseEventField): See VideoBaseEventField.\n        event_type (str): Consists of the value `video_hide_cc_menu`.\n    \"\"\"\n\n    __selector__ = selector(event_source=\"browser\", event_type=\"video_hide_cc_menu\")\n\n    event: Union[\n        Json[VideoBaseEventField],  # pylint: disable=unsubscriptable-object\n        VideoBaseEventField,\n    ]\n    event_type: Literal[\"video_hide_cc_menu\"]\n    name: Optional[Literal[\"video_hide_cc_menu\"]]\n</code></pre>"},{"location":"models/edx/#ralph.models.edx.video.statements.UIVideoShowCCMenu","title":"<code> UIVideoShowCCMenu            (BaseBrowserModel)         </code>  <code>pydantic-model</code>","text":"<p>Represents the <code>video_show_cc_menu</code> event model.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>VideoBaseEventField</code> <p>See VideoBaseEventField.</p> <code>event_type</code> <code>str</code> <p>Consists of the value <code>video_show_cc_menu</code>.</p> Source code in <code>ralph/models/edx/video/statements.py</code> <pre><code>class UIVideoShowCCMenu(BaseBrowserModel):\n    \"\"\"Represents the `video_show_cc_menu` event model.\n\n    Attributes:\n        event (VideoBaseEventField): See VideoBaseEventField.\n        event_type (str): Consists of the value `video_show_cc_menu`.\n    \"\"\"\n\n    __selector__ = selector(event_source=\"browser\", event_type=\"video_show_cc_menu\")\n\n    event: Union[\n        Json[VideoBaseEventField],  # pylint: disable=unsubscriptable-object\n        VideoBaseEventField,\n    ]\n    event_type: Literal[\"video_show_cc_menu\"]\n    name: Optional[Literal[\"video_show_cc_menu\"]]\n</code></pre>"}]}